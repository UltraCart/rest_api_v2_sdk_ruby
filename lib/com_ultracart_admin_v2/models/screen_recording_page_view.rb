=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

OpenAPI spec version: 2.0.0
Contact: support@ultracart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'date'

module UltraCartAdminV2
  class ScreenRecordingPageView
    attr_accessor :events

    # First event timestamp
    attr_accessor :first_event_timestamp

    attr_accessor :http_post

    # Last event timestamp
    attr_accessor :last_event_timestamp

    attr_accessor :params

    attr_accessor :range_end

    attr_accessor :range_start

    attr_accessor :referrer

    attr_accessor :referrer_params

    attr_accessor :referrer_raw

    attr_accessor :screen_recording_page_view_uuid

    attr_accessor :time_on_page

    attr_accessor :truncated_events

    attr_accessor :ucapv

    attr_accessor :url

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'events' => :'events',
        :'first_event_timestamp' => :'first_event_timestamp',
        :'http_post' => :'http_post',
        :'last_event_timestamp' => :'last_event_timestamp',
        :'params' => :'params',
        :'range_end' => :'range_end',
        :'range_start' => :'range_start',
        :'referrer' => :'referrer',
        :'referrer_params' => :'referrer_params',
        :'referrer_raw' => :'referrer_raw',
        :'screen_recording_page_view_uuid' => :'screen_recording_page_view_uuid',
        :'time_on_page' => :'time_on_page',
        :'truncated_events' => :'truncated_events',
        :'ucapv' => :'ucapv',
        :'url' => :'url'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'events' => :'Array<ScreenRecordingPageViewEvent>',
        :'first_event_timestamp' => :'String',
        :'http_post' => :'BOOLEAN',
        :'last_event_timestamp' => :'String',
        :'params' => :'Array<ScreenRecordingPageViewParameter>',
        :'range_end' => :'Integer',
        :'range_start' => :'Integer',
        :'referrer' => :'String',
        :'referrer_params' => :'Array<ScreenRecordingPageViewParameter>',
        :'referrer_raw' => :'String',
        :'screen_recording_page_view_uuid' => :'String',
        :'time_on_page' => :'Integer',
        :'truncated_events' => :'BOOLEAN',
        :'ucapv' => :'String',
        :'url' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'events')
        if (value = attributes[:'events']).is_a?(Array)
          self.events = value
        end
      end

      if attributes.has_key?(:'first_event_timestamp')
        self.first_event_timestamp = attributes[:'first_event_timestamp']
      end

      if attributes.has_key?(:'http_post')
        self.http_post = attributes[:'http_post']
      end

      if attributes.has_key?(:'last_event_timestamp')
        self.last_event_timestamp = attributes[:'last_event_timestamp']
      end

      if attributes.has_key?(:'params')
        if (value = attributes[:'params']).is_a?(Array)
          self.params = value
        end
      end

      if attributes.has_key?(:'range_end')
        self.range_end = attributes[:'range_end']
      end

      if attributes.has_key?(:'range_start')
        self.range_start = attributes[:'range_start']
      end

      if attributes.has_key?(:'referrer')
        self.referrer = attributes[:'referrer']
      end

      if attributes.has_key?(:'referrer_params')
        if (value = attributes[:'referrer_params']).is_a?(Array)
          self.referrer_params = value
        end
      end

      if attributes.has_key?(:'referrer_raw')
        self.referrer_raw = attributes[:'referrer_raw']
      end

      if attributes.has_key?(:'screen_recording_page_view_uuid')
        self.screen_recording_page_view_uuid = attributes[:'screen_recording_page_view_uuid']
      end

      if attributes.has_key?(:'time_on_page')
        self.time_on_page = attributes[:'time_on_page']
      end

      if attributes.has_key?(:'truncated_events')
        self.truncated_events = attributes[:'truncated_events']
      end

      if attributes.has_key?(:'ucapv')
        self.ucapv = attributes[:'ucapv']
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          events == o.events &&
          first_event_timestamp == o.first_event_timestamp &&
          http_post == o.http_post &&
          last_event_timestamp == o.last_event_timestamp &&
          params == o.params &&
          range_end == o.range_end &&
          range_start == o.range_start &&
          referrer == o.referrer &&
          referrer_params == o.referrer_params &&
          referrer_raw == o.referrer_raw &&
          screen_recording_page_view_uuid == o.screen_recording_page_view_uuid &&
          time_on_page == o.time_on_page &&
          truncated_events == o.truncated_events &&
          ucapv == o.ucapv &&
          url == o.url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [events, first_event_timestamp, http_post, last_event_timestamp, params, range_end, range_start, referrer, referrer_params, referrer_raw, screen_recording_page_view_uuid, time_on_page, truncated_events, ucapv, url].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = UltraCartAdminV2.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
