=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

OpenAPI spec version: 2.0.0
Contact: support@ultracart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'date'

module UltraCartAdminV2
  class OrderItemOption
    # How the additional dimensions are applied to the item.
    attr_accessor :additional_dimension_application

    attr_accessor :cost_change

    attr_accessor :file_attachment

    attr_accessor :height

    # True if this option is hidden from display on the order
    attr_accessor :hidden

    # Label
    attr_accessor :label

    attr_accessor :length

    # True if the cost associated with this option is a one time fee or multiplied by the quantity of the item
    attr_accessor :one_time_fee

    # Value
    attr_accessor :value

    attr_accessor :weight_change

    attr_accessor :width

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'additional_dimension_application' => :'additional_dimension_application',
        :'cost_change' => :'cost_change',
        :'file_attachment' => :'file_attachment',
        :'height' => :'height',
        :'hidden' => :'hidden',
        :'label' => :'label',
        :'length' => :'length',
        :'one_time_fee' => :'one_time_fee',
        :'value' => :'value',
        :'weight_change' => :'weight_change',
        :'width' => :'width'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'additional_dimension_application' => :'String',
        :'cost_change' => :'Currency',
        :'file_attachment' => :'OrderItemOptionFileAttachment',
        :'height' => :'Distance',
        :'hidden' => :'BOOLEAN',
        :'label' => :'String',
        :'length' => :'Distance',
        :'one_time_fee' => :'BOOLEAN',
        :'value' => :'String',
        :'weight_change' => :'Weight',
        :'width' => :'Distance'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'additional_dimension_application')
        self.additional_dimension_application = attributes[:'additional_dimension_application']
      end

      if attributes.has_key?(:'cost_change')
        self.cost_change = attributes[:'cost_change']
      end

      if attributes.has_key?(:'file_attachment')
        self.file_attachment = attributes[:'file_attachment']
      end

      if attributes.has_key?(:'height')
        self.height = attributes[:'height']
      end

      if attributes.has_key?(:'hidden')
        self.hidden = attributes[:'hidden']
      end

      if attributes.has_key?(:'label')
        self.label = attributes[:'label']
      end

      if attributes.has_key?(:'length')
        self.length = attributes[:'length']
      end

      if attributes.has_key?(:'one_time_fee')
        self.one_time_fee = attributes[:'one_time_fee']
      end

      if attributes.has_key?(:'value')
        self.value = attributes[:'value']
      end

      if attributes.has_key?(:'weight_change')
        self.weight_change = attributes[:'weight_change']
      end

      if attributes.has_key?(:'width')
        self.width = attributes[:'width']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@label.nil? && @label.to_s.length > 50
        invalid_properties.push('invalid value for "label", the character length must be smaller than or equal to 50.')
      end

      if !@value.nil? && @value.to_s.length > 1024
        invalid_properties.push('invalid value for "value", the character length must be smaller than or equal to 1024.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      additional_dimension_application_validator = EnumAttributeValidator.new('String', ['none', 'set item to', 'add item'])
      return false unless additional_dimension_application_validator.valid?(@additional_dimension_application)
      return false if !@label.nil? && @label.to_s.length > 50
      return false if !@value.nil? && @value.to_s.length > 1024
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] additional_dimension_application Object to be assigned
    def additional_dimension_application=(additional_dimension_application)
      validator = EnumAttributeValidator.new('String', ['none', 'set item to', 'add item'])
      unless validator.valid?(additional_dimension_application)
        fail ArgumentError, 'invalid value for "additional_dimension_application", must be one of #{validator.allowable_values}.'
      end
      @additional_dimension_application = additional_dimension_application
    end

    # Custom attribute writer method with validation
    # @param [Object] label Value to be assigned
    def label=(label)
      if !label.nil? && label.to_s.length > 50
        fail ArgumentError, 'invalid value for "label", the character length must be smaller than or equal to 50.'
      end

      @label = label
    end

    # Custom attribute writer method with validation
    # @param [Object] value Value to be assigned
    def value=(value)
      if !value.nil? && value.to_s.length > 1024
        fail ArgumentError, 'invalid value for "value", the character length must be smaller than or equal to 1024.'
      end

      @value = value
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          additional_dimension_application == o.additional_dimension_application &&
          cost_change == o.cost_change &&
          file_attachment == o.file_attachment &&
          height == o.height &&
          hidden == o.hidden &&
          label == o.label &&
          length == o.length &&
          one_time_fee == o.one_time_fee &&
          value == o.value &&
          weight_change == o.weight_change &&
          width == o.width
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [additional_dimension_application, cost_change, file_attachment, height, hidden, label, length, one_time_fee, value, weight_change, width].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = UltraCartAdminV2.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
