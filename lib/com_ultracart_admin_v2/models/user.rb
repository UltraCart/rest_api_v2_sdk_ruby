=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

OpenAPI spec version: 2.0.0
Contact: support@ultracart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'date'

module UltraCartAdminV2
  class User
    # A list of IP addresses whitelisted for any user with API Access permission.  Without this list, each ip address must be authenticated by a user, which can be a pain for some servers.
    attr_accessor :api_ip_address_masks

    # Supply a new FTP password using this field.  Password are stored using one-way encryption, so they are never available anywhere in the system.  The FTP password cannot be the same as the normal password.
    attr_accessor :change_ftp_password_to

    # Supply a new password using this field.  Password are stored using one-way encryption, so they are never available anywhere in the system.
    attr_accessor :change_password_to

    # Email address of user
    attr_accessor :email

    # Full name of user.  This is used solely for human assistance and so the UltraCart staff knows who they are calling when there is a problem.
    attr_accessor :full_name

    # A list of groups for this merchant and whether or not this user is a member of those groups.
    attr_accessor :groups

    # A list of linked accounts and whether or not this user is mirrored to any of those accounts.
    attr_accessor :linked_accounts

    # User name of user.  Must be unique across a merchant account.
    attr_accessor :login

    # A list of user logins over the past 90 days
    attr_accessor :login_histories

    # A list of notifications the user receives.
    attr_accessor :notifications

    # OTP Serial Number such as Google Authenticator or Crypto Card.
    attr_accessor :otp_serial_number

    # A list of permissions the user enjoys for accessing the backend of UltraCart.
    attr_accessor :permissions

    # Phone number of user.  Please supply a valid phone number.  When something breaks on your account, we need to be able to reach you.
    attr_accessor :phone

    # User id is a unique identifier for this user
    attr_accessor :user_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'api_ip_address_masks' => :'api_ip_address_masks',
        :'change_ftp_password_to' => :'change_ftp_password_to',
        :'change_password_to' => :'change_password_to',
        :'email' => :'email',
        :'full_name' => :'full_name',
        :'groups' => :'groups',
        :'linked_accounts' => :'linked_accounts',
        :'login' => :'login',
        :'login_histories' => :'login_histories',
        :'notifications' => :'notifications',
        :'otp_serial_number' => :'otp_serial_number',
        :'permissions' => :'permissions',
        :'phone' => :'phone',
        :'user_id' => :'user_id'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'api_ip_address_masks' => :'Array<String>',
        :'change_ftp_password_to' => :'String',
        :'change_password_to' => :'String',
        :'email' => :'String',
        :'full_name' => :'String',
        :'groups' => :'Array<UserGroupMembership>',
        :'linked_accounts' => :'Array<LinkedAccount>',
        :'login' => :'String',
        :'login_histories' => :'Array<UserLogin>',
        :'notifications' => :'Array<Notification>',
        :'otp_serial_number' => :'String',
        :'permissions' => :'Array<Permission>',
        :'phone' => :'String',
        :'user_id' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'api_ip_address_masks')
        if (value = attributes[:'api_ip_address_masks']).is_a?(Array)
          self.api_ip_address_masks = value
        end
      end

      if attributes.has_key?(:'change_ftp_password_to')
        self.change_ftp_password_to = attributes[:'change_ftp_password_to']
      end

      if attributes.has_key?(:'change_password_to')
        self.change_password_to = attributes[:'change_password_to']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'full_name')
        self.full_name = attributes[:'full_name']
      end

      if attributes.has_key?(:'groups')
        if (value = attributes[:'groups']).is_a?(Array)
          self.groups = value
        end
      end

      if attributes.has_key?(:'linked_accounts')
        if (value = attributes[:'linked_accounts']).is_a?(Array)
          self.linked_accounts = value
        end
      end

      if attributes.has_key?(:'login')
        self.login = attributes[:'login']
      end

      if attributes.has_key?(:'login_histories')
        if (value = attributes[:'login_histories']).is_a?(Array)
          self.login_histories = value
        end
      end

      if attributes.has_key?(:'notifications')
        if (value = attributes[:'notifications']).is_a?(Array)
          self.notifications = value
        end
      end

      if attributes.has_key?(:'otp_serial_number')
        self.otp_serial_number = attributes[:'otp_serial_number']
      end

      if attributes.has_key?(:'permissions')
        if (value = attributes[:'permissions']).is_a?(Array)
          self.permissions = value
        end
      end

      if attributes.has_key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.has_key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          api_ip_address_masks == o.api_ip_address_masks &&
          change_ftp_password_to == o.change_ftp_password_to &&
          change_password_to == o.change_password_to &&
          email == o.email &&
          full_name == o.full_name &&
          groups == o.groups &&
          linked_accounts == o.linked_accounts &&
          login == o.login &&
          login_histories == o.login_histories &&
          notifications == o.notifications &&
          otp_serial_number == o.otp_serial_number &&
          permissions == o.permissions &&
          phone == o.phone &&
          user_id == o.user_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [api_ip_address_masks, change_ftp_password_to, change_password_to, email, full_name, groups, linked_accounts, login, login_histories, notifications, otp_serial_number, permissions, phone, user_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = UltraCartAdminV2.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
