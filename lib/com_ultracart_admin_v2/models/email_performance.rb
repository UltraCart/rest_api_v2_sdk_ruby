=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

OpenAPI spec version: 2.0.0
Contact: support@ultracart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'date'

module UltraCartAdminV2
  class EmailPerformance
    # Active customers.  The value will be -1 if calculation is pending.
    attr_accessor :active_customers

    # Actual customers that they have regardless of active state.  The value will be -1 if calculation is pending.
    attr_accessor :actual_customers

    # Bounce count
    attr_accessor :bounce_count

    # bounce percentage rate based upon our look back window.  This should be under five percent or the account will be paused for sending.
    attr_accessor :bounce_percentage

    # bounce percentage rate (formatted) based upon our look back window.  This should be under five percent or the account will be paused for sending.
    attr_accessor :bounce_percentage_formatted

    attr_accessor :customer_histogram

    # Daily statistics used for charting
    attr_accessor :daily_stats

    # Delivered count
    attr_accessor :delivered_count

    # Maximum active customers allowed under their billing plan
    attr_accessor :max_active_customers

    # Max emails per day
    attr_accessor :max_emails_per_day

    # Max emails per hour
    attr_accessor :max_emails_per_hour

    # Max emails per month
    attr_accessor :max_emails_per_month

    # True if campaign/flow emails are paused due to spam complaints.
    attr_accessor :paused_for_spam

    # Revenue
    attr_accessor :revenue

    # Sent emails last 24 hours
    attr_accessor :sent_emails_per_day

    # Sent emails last hour
    attr_accessor :sent_emails_per_hour

    # Sent emails last 31 days
    attr_accessor :sent_emails_per_month

    # Total sequence (campaign/flow) emails sent
    attr_accessor :sequence_send_count

    # Spam complaints
    attr_accessor :spam_count

    # Spam percentage rate based upon our look back window.  This should be under one half a percent or the account will be paused for sending.
    attr_accessor :spam_percentage

    # Spam percentage rate (formatted) based upon our look back window.  This should be under one half a percent or the account will be paused for sending.
    attr_accessor :spam_percentage_formatted

    # Total transactions emails sent
    attr_accessor :transactional_send_count

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'active_customers' => :'active_customers',
        :'actual_customers' => :'actual_customers',
        :'bounce_count' => :'bounce_count',
        :'bounce_percentage' => :'bounce_percentage',
        :'bounce_percentage_formatted' => :'bounce_percentage_formatted',
        :'customer_histogram' => :'customer_histogram',
        :'daily_stats' => :'daily_stats',
        :'delivered_count' => :'delivered_count',
        :'max_active_customers' => :'max_active_customers',
        :'max_emails_per_day' => :'max_emails_per_day',
        :'max_emails_per_hour' => :'max_emails_per_hour',
        :'max_emails_per_month' => :'max_emails_per_month',
        :'paused_for_spam' => :'paused_for_spam',
        :'revenue' => :'revenue',
        :'sent_emails_per_day' => :'sent_emails_per_day',
        :'sent_emails_per_hour' => :'sent_emails_per_hour',
        :'sent_emails_per_month' => :'sent_emails_per_month',
        :'sequence_send_count' => :'sequence_send_count',
        :'spam_count' => :'spam_count',
        :'spam_percentage' => :'spam_percentage',
        :'spam_percentage_formatted' => :'spam_percentage_formatted',
        :'transactional_send_count' => :'transactional_send_count'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'active_customers' => :'Integer',
        :'actual_customers' => :'Integer',
        :'bounce_count' => :'Integer',
        :'bounce_percentage' => :'Float',
        :'bounce_percentage_formatted' => :'String',
        :'customer_histogram' => :'EmailPerformanceCustomerHistogram',
        :'daily_stats' => :'Array<EmailPerformanceDaily>',
        :'delivered_count' => :'Integer',
        :'max_active_customers' => :'Integer',
        :'max_emails_per_day' => :'Integer',
        :'max_emails_per_hour' => :'Integer',
        :'max_emails_per_month' => :'Integer',
        :'paused_for_spam' => :'BOOLEAN',
        :'revenue' => :'Float',
        :'sent_emails_per_day' => :'Integer',
        :'sent_emails_per_hour' => :'Integer',
        :'sent_emails_per_month' => :'Integer',
        :'sequence_send_count' => :'Integer',
        :'spam_count' => :'Integer',
        :'spam_percentage' => :'Float',
        :'spam_percentage_formatted' => :'String',
        :'transactional_send_count' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'active_customers')
        self.active_customers = attributes[:'active_customers']
      end

      if attributes.has_key?(:'actual_customers')
        self.actual_customers = attributes[:'actual_customers']
      end

      if attributes.has_key?(:'bounce_count')
        self.bounce_count = attributes[:'bounce_count']
      end

      if attributes.has_key?(:'bounce_percentage')
        self.bounce_percentage = attributes[:'bounce_percentage']
      end

      if attributes.has_key?(:'bounce_percentage_formatted')
        self.bounce_percentage_formatted = attributes[:'bounce_percentage_formatted']
      end

      if attributes.has_key?(:'customer_histogram')
        self.customer_histogram = attributes[:'customer_histogram']
      end

      if attributes.has_key?(:'daily_stats')
        if (value = attributes[:'daily_stats']).is_a?(Array)
          self.daily_stats = value
        end
      end

      if attributes.has_key?(:'delivered_count')
        self.delivered_count = attributes[:'delivered_count']
      end

      if attributes.has_key?(:'max_active_customers')
        self.max_active_customers = attributes[:'max_active_customers']
      end

      if attributes.has_key?(:'max_emails_per_day')
        self.max_emails_per_day = attributes[:'max_emails_per_day']
      end

      if attributes.has_key?(:'max_emails_per_hour')
        self.max_emails_per_hour = attributes[:'max_emails_per_hour']
      end

      if attributes.has_key?(:'max_emails_per_month')
        self.max_emails_per_month = attributes[:'max_emails_per_month']
      end

      if attributes.has_key?(:'paused_for_spam')
        self.paused_for_spam = attributes[:'paused_for_spam']
      end

      if attributes.has_key?(:'revenue')
        self.revenue = attributes[:'revenue']
      end

      if attributes.has_key?(:'sent_emails_per_day')
        self.sent_emails_per_day = attributes[:'sent_emails_per_day']
      end

      if attributes.has_key?(:'sent_emails_per_hour')
        self.sent_emails_per_hour = attributes[:'sent_emails_per_hour']
      end

      if attributes.has_key?(:'sent_emails_per_month')
        self.sent_emails_per_month = attributes[:'sent_emails_per_month']
      end

      if attributes.has_key?(:'sequence_send_count')
        self.sequence_send_count = attributes[:'sequence_send_count']
      end

      if attributes.has_key?(:'spam_count')
        self.spam_count = attributes[:'spam_count']
      end

      if attributes.has_key?(:'spam_percentage')
        self.spam_percentage = attributes[:'spam_percentage']
      end

      if attributes.has_key?(:'spam_percentage_formatted')
        self.spam_percentage_formatted = attributes[:'spam_percentage_formatted']
      end

      if attributes.has_key?(:'transactional_send_count')
        self.transactional_send_count = attributes[:'transactional_send_count']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          active_customers == o.active_customers &&
          actual_customers == o.actual_customers &&
          bounce_count == o.bounce_count &&
          bounce_percentage == o.bounce_percentage &&
          bounce_percentage_formatted == o.bounce_percentage_formatted &&
          customer_histogram == o.customer_histogram &&
          daily_stats == o.daily_stats &&
          delivered_count == o.delivered_count &&
          max_active_customers == o.max_active_customers &&
          max_emails_per_day == o.max_emails_per_day &&
          max_emails_per_hour == o.max_emails_per_hour &&
          max_emails_per_month == o.max_emails_per_month &&
          paused_for_spam == o.paused_for_spam &&
          revenue == o.revenue &&
          sent_emails_per_day == o.sent_emails_per_day &&
          sent_emails_per_hour == o.sent_emails_per_hour &&
          sent_emails_per_month == o.sent_emails_per_month &&
          sequence_send_count == o.sequence_send_count &&
          spam_count == o.spam_count &&
          spam_percentage == o.spam_percentage &&
          spam_percentage_formatted == o.spam_percentage_formatted &&
          transactional_send_count == o.transactional_send_count
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [active_customers, actual_customers, bounce_count, bounce_percentage, bounce_percentage_formatted, customer_histogram, daily_stats, delivered_count, max_active_customers, max_emails_per_day, max_emails_per_hour, max_emails_per_month, paused_for_spam, revenue, sent_emails_per_day, sent_emails_per_hour, sent_emails_per_month, sequence_send_count, spam_count, spam_percentage, spam_percentage_formatted, transactional_send_count].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = UltraCartAdminV2.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
