=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

OpenAPI spec version: 2.0.0
Contact: support@ultracart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'date'

module UltraCartAdminV2
  class OrderReplacement
    # Additional merchant notes to append to the new order
    attr_accessor :additional_merchant_notes_new_order

    # Additional merchant notes to append to the original order
    attr_accessor :additional_merchant_notes_original_order

    # Custom field 1
    attr_accessor :custom_field1

    # Custom field 2
    attr_accessor :custom_field2

    # Custom field 3
    attr_accessor :custom_field3

    # Custom field 4
    attr_accessor :custom_field4

    # Custom field 5
    attr_accessor :custom_field5

    # Custom field 6
    attr_accessor :custom_field6

    # Custom field 7
    attr_accessor :custom_field7

    # Set to true if this replacement shipment should be free for the customer.
    attr_accessor :free

    # Set to true if you want to immediately charge the payment on this order, otherwise it will go to Accounts Receivable.
    attr_accessor :immediate_charge

    # Items to include in the replacement order
    attr_accessor :items

    # Original order id
    attr_accessor :original_order_id

    # Shipping method to use.  If not specified or invalid then least cost shipping will take place.
    attr_accessor :shipping_method

    # Set to true if you want to skip the payment as if it was successful.
    attr_accessor :skip_payment

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'additional_merchant_notes_new_order' => :'additional_merchant_notes_new_order',
        :'additional_merchant_notes_original_order' => :'additional_merchant_notes_original_order',
        :'custom_field1' => :'custom_field1',
        :'custom_field2' => :'custom_field2',
        :'custom_field3' => :'custom_field3',
        :'custom_field4' => :'custom_field4',
        :'custom_field5' => :'custom_field5',
        :'custom_field6' => :'custom_field6',
        :'custom_field7' => :'custom_field7',
        :'free' => :'free',
        :'immediate_charge' => :'immediate_charge',
        :'items' => :'items',
        :'original_order_id' => :'original_order_id',
        :'shipping_method' => :'shipping_method',
        :'skip_payment' => :'skip_payment'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'additional_merchant_notes_new_order' => :'String',
        :'additional_merchant_notes_original_order' => :'String',
        :'custom_field1' => :'String',
        :'custom_field2' => :'String',
        :'custom_field3' => :'String',
        :'custom_field4' => :'String',
        :'custom_field5' => :'String',
        :'custom_field6' => :'String',
        :'custom_field7' => :'String',
        :'free' => :'BOOLEAN',
        :'immediate_charge' => :'BOOLEAN',
        :'items' => :'Array<OrderReplacementItem>',
        :'original_order_id' => :'String',
        :'shipping_method' => :'String',
        :'skip_payment' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'additional_merchant_notes_new_order')
        self.additional_merchant_notes_new_order = attributes[:'additional_merchant_notes_new_order']
      end

      if attributes.has_key?(:'additional_merchant_notes_original_order')
        self.additional_merchant_notes_original_order = attributes[:'additional_merchant_notes_original_order']
      end

      if attributes.has_key?(:'custom_field1')
        self.custom_field1 = attributes[:'custom_field1']
      end

      if attributes.has_key?(:'custom_field2')
        self.custom_field2 = attributes[:'custom_field2']
      end

      if attributes.has_key?(:'custom_field3')
        self.custom_field3 = attributes[:'custom_field3']
      end

      if attributes.has_key?(:'custom_field4')
        self.custom_field4 = attributes[:'custom_field4']
      end

      if attributes.has_key?(:'custom_field5')
        self.custom_field5 = attributes[:'custom_field5']
      end

      if attributes.has_key?(:'custom_field6')
        self.custom_field6 = attributes[:'custom_field6']
      end

      if attributes.has_key?(:'custom_field7')
        self.custom_field7 = attributes[:'custom_field7']
      end

      if attributes.has_key?(:'free')
        self.free = attributes[:'free']
      end

      if attributes.has_key?(:'immediate_charge')
        self.immediate_charge = attributes[:'immediate_charge']
      end

      if attributes.has_key?(:'items')
        if (value = attributes[:'items']).is_a?(Array)
          self.items = value
        end
      end

      if attributes.has_key?(:'original_order_id')
        self.original_order_id = attributes[:'original_order_id']
      end

      if attributes.has_key?(:'shipping_method')
        self.shipping_method = attributes[:'shipping_method']
      end

      if attributes.has_key?(:'skip_payment')
        self.skip_payment = attributes[:'skip_payment']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@custom_field1.nil? && @custom_field1.to_s.length > 50
        invalid_properties.push('invalid value for "custom_field1", the character length must be smaller than or equal to 50.')
      end

      if !@custom_field2.nil? && @custom_field2.to_s.length > 50
        invalid_properties.push('invalid value for "custom_field2", the character length must be smaller than or equal to 50.')
      end

      if !@custom_field3.nil? && @custom_field3.to_s.length > 50
        invalid_properties.push('invalid value for "custom_field3", the character length must be smaller than or equal to 50.')
      end

      if !@custom_field4.nil? && @custom_field4.to_s.length > 50
        invalid_properties.push('invalid value for "custom_field4", the character length must be smaller than or equal to 50.')
      end

      if !@custom_field5.nil? && @custom_field5.to_s.length > 75
        invalid_properties.push('invalid value for "custom_field5", the character length must be smaller than or equal to 75.')
      end

      if !@custom_field6.nil? && @custom_field6.to_s.length > 50
        invalid_properties.push('invalid value for "custom_field6", the character length must be smaller than or equal to 50.')
      end

      if !@custom_field7.nil? && @custom_field7.to_s.length > 50
        invalid_properties.push('invalid value for "custom_field7", the character length must be smaller than or equal to 50.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@custom_field1.nil? && @custom_field1.to_s.length > 50
      return false if !@custom_field2.nil? && @custom_field2.to_s.length > 50
      return false if !@custom_field3.nil? && @custom_field3.to_s.length > 50
      return false if !@custom_field4.nil? && @custom_field4.to_s.length > 50
      return false if !@custom_field5.nil? && @custom_field5.to_s.length > 75
      return false if !@custom_field6.nil? && @custom_field6.to_s.length > 50
      return false if !@custom_field7.nil? && @custom_field7.to_s.length > 50
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_field1 Value to be assigned
    def custom_field1=(custom_field1)
      if !custom_field1.nil? && custom_field1.to_s.length > 50
        fail ArgumentError, 'invalid value for "custom_field1", the character length must be smaller than or equal to 50.'
      end

      @custom_field1 = custom_field1
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_field2 Value to be assigned
    def custom_field2=(custom_field2)
      if !custom_field2.nil? && custom_field2.to_s.length > 50
        fail ArgumentError, 'invalid value for "custom_field2", the character length must be smaller than or equal to 50.'
      end

      @custom_field2 = custom_field2
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_field3 Value to be assigned
    def custom_field3=(custom_field3)
      if !custom_field3.nil? && custom_field3.to_s.length > 50
        fail ArgumentError, 'invalid value for "custom_field3", the character length must be smaller than or equal to 50.'
      end

      @custom_field3 = custom_field3
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_field4 Value to be assigned
    def custom_field4=(custom_field4)
      if !custom_field4.nil? && custom_field4.to_s.length > 50
        fail ArgumentError, 'invalid value for "custom_field4", the character length must be smaller than or equal to 50.'
      end

      @custom_field4 = custom_field4
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_field5 Value to be assigned
    def custom_field5=(custom_field5)
      if !custom_field5.nil? && custom_field5.to_s.length > 75
        fail ArgumentError, 'invalid value for "custom_field5", the character length must be smaller than or equal to 75.'
      end

      @custom_field5 = custom_field5
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_field6 Value to be assigned
    def custom_field6=(custom_field6)
      if !custom_field6.nil? && custom_field6.to_s.length > 50
        fail ArgumentError, 'invalid value for "custom_field6", the character length must be smaller than or equal to 50.'
      end

      @custom_field6 = custom_field6
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_field7 Value to be assigned
    def custom_field7=(custom_field7)
      if !custom_field7.nil? && custom_field7.to_s.length > 50
        fail ArgumentError, 'invalid value for "custom_field7", the character length must be smaller than or equal to 50.'
      end

      @custom_field7 = custom_field7
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          additional_merchant_notes_new_order == o.additional_merchant_notes_new_order &&
          additional_merchant_notes_original_order == o.additional_merchant_notes_original_order &&
          custom_field1 == o.custom_field1 &&
          custom_field2 == o.custom_field2 &&
          custom_field3 == o.custom_field3 &&
          custom_field4 == o.custom_field4 &&
          custom_field5 == o.custom_field5 &&
          custom_field6 == o.custom_field6 &&
          custom_field7 == o.custom_field7 &&
          free == o.free &&
          immediate_charge == o.immediate_charge &&
          items == o.items &&
          original_order_id == o.original_order_id &&
          shipping_method == o.shipping_method &&
          skip_payment == o.skip_payment
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [additional_merchant_notes_new_order, additional_merchant_notes_original_order, custom_field1, custom_field2, custom_field3, custom_field4, custom_field5, custom_field6, custom_field7, free, immediate_charge, items, original_order_id, shipping_method, skip_payment].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = UltraCartAdminV2.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
