=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

OpenAPI spec version: 2.0.0
Contact: support@ultracart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'date'

module UltraCartAdminV2
  class EmailCommseqStep
    # Array of child steps for the alternate path
    attr_accessor :alt_child_email_communication_sequence_steps

    # Array of child steps
    attr_accessor :child_email_communication_sequence_steps

    # Email commseq step UUID
    attr_accessor :email_communication_sequence_step_uuid

    # True if the content of the email associated with this step is pending review by UltraCart
    attr_accessor :email_pending_review

    # True if the content of the email associated with this step was rejected during review by UltraCart
    attr_accessor :email_rejected

    # True if the content of the email associated with this step requires review by UltraCart
    attr_accessor :email_requires_review

    # Filter profile equation JSON
    attr_accessor :filter_profile_equation_json

    # Internal merchant notes
    attr_accessor :merchant_notes

    # Arbitrary Configuration for a step
    attr_accessor :step_config_json

    # Type of step
    attr_accessor :type

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'alt_child_email_communication_sequence_steps' => :'alt_child_email_communication_sequence_steps',
        :'child_email_communication_sequence_steps' => :'child_email_communication_sequence_steps',
        :'email_communication_sequence_step_uuid' => :'email_communication_sequence_step_uuid',
        :'email_pending_review' => :'email_pending_review',
        :'email_rejected' => :'email_rejected',
        :'email_requires_review' => :'email_requires_review',
        :'filter_profile_equation_json' => :'filter_profile_equation_json',
        :'merchant_notes' => :'merchant_notes',
        :'step_config_json' => :'step_config_json',
        :'type' => :'type'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'alt_child_email_communication_sequence_steps' => :'Array<EmailCommseqStep>',
        :'child_email_communication_sequence_steps' => :'Array<EmailCommseqStep>',
        :'email_communication_sequence_step_uuid' => :'String',
        :'email_pending_review' => :'BOOLEAN',
        :'email_rejected' => :'BOOLEAN',
        :'email_requires_review' => :'BOOLEAN',
        :'filter_profile_equation_json' => :'String',
        :'merchant_notes' => :'String',
        :'step_config_json' => :'String',
        :'type' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'alt_child_email_communication_sequence_steps')
        if (value = attributes[:'alt_child_email_communication_sequence_steps']).is_a?(Array)
          self.alt_child_email_communication_sequence_steps = value
        end
      end

      if attributes.has_key?(:'child_email_communication_sequence_steps')
        if (value = attributes[:'child_email_communication_sequence_steps']).is_a?(Array)
          self.child_email_communication_sequence_steps = value
        end
      end

      if attributes.has_key?(:'email_communication_sequence_step_uuid')
        self.email_communication_sequence_step_uuid = attributes[:'email_communication_sequence_step_uuid']
      end

      if attributes.has_key?(:'email_pending_review')
        self.email_pending_review = attributes[:'email_pending_review']
      end

      if attributes.has_key?(:'email_rejected')
        self.email_rejected = attributes[:'email_rejected']
      end

      if attributes.has_key?(:'email_requires_review')
        self.email_requires_review = attributes[:'email_requires_review']
      end

      if attributes.has_key?(:'filter_profile_equation_json')
        self.filter_profile_equation_json = attributes[:'filter_profile_equation_json']
      end

      if attributes.has_key?(:'merchant_notes')
        self.merchant_notes = attributes[:'merchant_notes']
      end

      if attributes.has_key?(:'step_config_json')
        self.step_config_json = attributes[:'step_config_json']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      type_validator = EnumAttributeValidator.new('String', ['begin', 'wait', 'email', 'merge', 'condition', 'end'])
      return false unless type_validator.valid?(@type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ['begin', 'wait', 'email', 'merge', 'condition', 'end'])
      unless validator.valid?(type)
        fail ArgumentError, 'invalid value for "type", must be one of #{validator.allowable_values}.'
      end
      @type = type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          alt_child_email_communication_sequence_steps == o.alt_child_email_communication_sequence_steps &&
          child_email_communication_sequence_steps == o.child_email_communication_sequence_steps &&
          email_communication_sequence_step_uuid == o.email_communication_sequence_step_uuid &&
          email_pending_review == o.email_pending_review &&
          email_rejected == o.email_rejected &&
          email_requires_review == o.email_requires_review &&
          filter_profile_equation_json == o.filter_profile_equation_json &&
          merchant_notes == o.merchant_notes &&
          step_config_json == o.step_config_json &&
          type == o.type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [alt_child_email_communication_sequence_steps, child_email_communication_sequence_steps, email_communication_sequence_step_uuid, email_pending_review, email_rejected, email_requires_review, filter_profile_equation_json, merchant_notes, step_config_json, type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = UltraCartAdminV2.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
