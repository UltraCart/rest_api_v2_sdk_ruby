=begin
#UltraCart Rest API V2

#This is the next generation UltraCart REST API...

OpenAPI spec version: 2.0.0
Contact: support@ultracart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module UltraCartAdminV2
  class CheckoutApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Setup Browser Application
    # Setup a browser key authenticated application with checkout permissions.  This REST call must be made with an authentication scheme that is not browser key.  The new application will be linked to the application that makes this call.  If this application is disabled / deleted, then so will the application setup by this call.  The purpose of this call is to allow an OAuth applicaiton, such as the Wordpress plugin, to setup the proper browser based authentication for the REST checkout API to use. 
    # @param browser_key_request Setup browser key request
    # @param [Hash] opts the optional parameters
    # @return [CheckoutSetupBrowserKeyResponse]
    def checkout_browser_key_put(browser_key_request, opts = {})
      data, _status_code, _headers = checkout_browser_key_put_with_http_info(browser_key_request, opts)
      return data
    end

    # Setup Browser Application
    # Setup a browser key authenticated application with checkout permissions.  This REST call must be made with an authentication scheme that is not browser key.  The new application will be linked to the application that makes this call.  If this application is disabled / deleted, then so will the application setup by this call.  The purpose of this call is to allow an OAuth applicaiton, such as the Wordpress plugin, to setup the proper browser based authentication for the REST checkout API to use. 
    # @param browser_key_request Setup browser key request
    # @param [Hash] opts the optional parameters
    # @return [Array<(CheckoutSetupBrowserKeyResponse, Fixnum, Hash)>] CheckoutSetupBrowserKeyResponse data, response status code and response headers
    def checkout_browser_key_put_with_http_info(browser_key_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CheckoutApi.checkout_browser_key_put ..."
      end
      # verify the required parameter 'browser_key_request' is set
      fail ArgumentError, "Missing the required parameter 'browser_key_request' when calling CheckoutApi.checkout_browser_key_put" if browser_key_request.nil?
      # resource path
      local_var_path = "/checkout/browser_key".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(browser_key_request)
      auth_names = ['ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CheckoutSetupBrowserKeyResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckoutApi#checkout_browser_key_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get cart (by cart id)
    # Get a cart specified by the cart_id parameter. 
    # @param cart_id Cart ID to retrieve
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_expand The object expansion to perform on the result.  See documentation for examples
    # @return [CartResponse]
    def checkout_cart_cart_id_get(cart_id, opts = {})
      data, _status_code, _headers = checkout_cart_cart_id_get_with_http_info(cart_id, opts)
      return data
    end

    # Get cart (by cart id)
    # Get a cart specified by the cart_id parameter. 
    # @param cart_id Cart ID to retrieve
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_expand The object expansion to perform on the result.  See documentation for examples
    # @return [Array<(CartResponse, Fixnum, Hash)>] CartResponse data, response status code and response headers
    def checkout_cart_cart_id_get_with_http_info(cart_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CheckoutApi.checkout_cart_cart_id_get ..."
      end
      # verify the required parameter 'cart_id' is set
      fail ArgumentError, "Missing the required parameter 'cart_id' when calling CheckoutApi.checkout_cart_cart_id_get" if cart_id.nil?
      # resource path
      local_var_path = "/checkout/cart/{cart_id}".sub('{format}','json').sub('{' + 'cart_id' + '}', cart_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'_expand'] = opts[:'_expand'] if !opts[:'_expand'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckoutApi#checkout_cart_cart_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Finalize Order
    # Finalize the cart into an order.  This method can not be called with browser key authentication.  It is ONLY meant for server side code to call. 
    # @param finalize_request Finalize request
    # @param [Hash] opts the optional parameters
    # @return [CartFinalizeOrderResponse]
    def checkout_cart_finalize_order_post(finalize_request, opts = {})
      data, _status_code, _headers = checkout_cart_finalize_order_post_with_http_info(finalize_request, opts)
      return data
    end

    # Finalize Order
    # Finalize the cart into an order.  This method can not be called with browser key authentication.  It is ONLY meant for server side code to call. 
    # @param finalize_request Finalize request
    # @param [Hash] opts the optional parameters
    # @return [Array<(CartFinalizeOrderResponse, Fixnum, Hash)>] CartFinalizeOrderResponse data, response status code and response headers
    def checkout_cart_finalize_order_post_with_http_info(finalize_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CheckoutApi.checkout_cart_finalize_order_post ..."
      end
      # verify the required parameter 'finalize_request' is set
      fail ArgumentError, "Missing the required parameter 'finalize_request' when calling CheckoutApi.checkout_cart_finalize_order_post" if finalize_request.nil?
      # resource path
      local_var_path = "/checkout/cart/finalizeOrder".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(finalize_request)
      auth_names = ['ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartFinalizeOrderResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckoutApi#checkout_cart_finalize_order_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get cart
    # If the cookie is set on the browser making the request then it will return their active cart.  Otherwise it will create a new cart. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_expand The object expansion to perform on the result.  See documentation for examples
    # @return [CartResponse]
    def checkout_cart_get(opts = {})
      data, _status_code, _headers = checkout_cart_get_with_http_info(opts)
      return data
    end

    # Get cart
    # If the cookie is set on the browser making the request then it will return their active cart.  Otherwise it will create a new cart. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_expand The object expansion to perform on the result.  See documentation for examples
    # @return [Array<(CartResponse, Fixnum, Hash)>] CartResponse data, response status code and response headers
    def checkout_cart_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CheckoutApi.checkout_cart_get ..."
      end
      # resource path
      local_var_path = "/checkout/cart".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'_expand'] = opts[:'_expand'] if !opts[:'_expand'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckoutApi#checkout_cart_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Handoff cart
    # Handoff the browser to UltraCart for view cart on StoreFront, transfer to PayPal or finalization of the order (including upsell processing). 
    # @param handoff_request Handoff request
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_expand The object expansion to perform on the result.  See documentation for examples
    # @return [CheckoutHandoffResponse]
    def checkout_cart_handoff_post(handoff_request, opts = {})
      data, _status_code, _headers = checkout_cart_handoff_post_with_http_info(handoff_request, opts)
      return data
    end

    # Handoff cart
    # Handoff the browser to UltraCart for view cart on StoreFront, transfer to PayPal or finalization of the order (including upsell processing). 
    # @param handoff_request Handoff request
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_expand The object expansion to perform on the result.  See documentation for examples
    # @return [Array<(CheckoutHandoffResponse, Fixnum, Hash)>] CheckoutHandoffResponse data, response status code and response headers
    def checkout_cart_handoff_post_with_http_info(handoff_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CheckoutApi.checkout_cart_handoff_post ..."
      end
      # verify the required parameter 'handoff_request' is set
      fail ArgumentError, "Missing the required parameter 'handoff_request' when calling CheckoutApi.checkout_cart_handoff_post" if handoff_request.nil?
      # resource path
      local_var_path = "/checkout/cart/handoff".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'_expand'] = opts[:'_expand'] if !opts[:'_expand'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(handoff_request)
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CheckoutHandoffResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckoutApi#checkout_cart_handoff_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Profile login
    # Login in to the customer profile specified by cart.billing.email and password 
    # @param login_request Login request
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_expand The object expansion to perform on the result.  See documentation for examples
    # @return [CartProfileLoginResponse]
    def checkout_cart_profile_login_post(login_request, opts = {})
      data, _status_code, _headers = checkout_cart_profile_login_post_with_http_info(login_request, opts)
      return data
    end

    # Profile login
    # Login in to the customer profile specified by cart.billing.email and password 
    # @param login_request Login request
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_expand The object expansion to perform on the result.  See documentation for examples
    # @return [Array<(CartProfileLoginResponse, Fixnum, Hash)>] CartProfileLoginResponse data, response status code and response headers
    def checkout_cart_profile_login_post_with_http_info(login_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CheckoutApi.checkout_cart_profile_login_post ..."
      end
      # verify the required parameter 'login_request' is set
      fail ArgumentError, "Missing the required parameter 'login_request' when calling CheckoutApi.checkout_cart_profile_login_post" if login_request.nil?
      # resource path
      local_var_path = "/checkout/cart/profile/login".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'_expand'] = opts[:'_expand'] if !opts[:'_expand'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(login_request)
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartProfileLoginResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckoutApi#checkout_cart_profile_login_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Profile logout
    # Log the cart out of the current profile.  No error will occur if they are not logged in. 
    # @param cart Cart
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_expand The object expansion to perform on the result.  See documentation for examples
    # @return [CartResponse]
    def checkout_cart_profile_logout_post(cart, opts = {})
      data, _status_code, _headers = checkout_cart_profile_logout_post_with_http_info(cart, opts)
      return data
    end

    # Profile logout
    # Log the cart out of the current profile.  No error will occur if they are not logged in. 
    # @param cart Cart
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_expand The object expansion to perform on the result.  See documentation for examples
    # @return [Array<(CartResponse, Fixnum, Hash)>] CartResponse data, response status code and response headers
    def checkout_cart_profile_logout_post_with_http_info(cart, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CheckoutApi.checkout_cart_profile_logout_post ..."
      end
      # verify the required parameter 'cart' is set
      fail ArgumentError, "Missing the required parameter 'cart' when calling CheckoutApi.checkout_cart_profile_logout_post" if cart.nil?
      # resource path
      local_var_path = "/checkout/cart/profile/logout".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'_expand'] = opts[:'_expand'] if !opts[:'_expand'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(cart)
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckoutApi#checkout_cart_profile_logout_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Profile registration
    # Register a new customer profile.  Requires the cart.billing object to be populated along with the password. 
    # @param register_request Register request
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_expand The object expansion to perform on the result.  See documentation for examples
    # @return [CartProfileRegisterResponse]
    def checkout_cart_profile_register_post(register_request, opts = {})
      data, _status_code, _headers = checkout_cart_profile_register_post_with_http_info(register_request, opts)
      return data
    end

    # Profile registration
    # Register a new customer profile.  Requires the cart.billing object to be populated along with the password. 
    # @param register_request Register request
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_expand The object expansion to perform on the result.  See documentation for examples
    # @return [Array<(CartProfileRegisterResponse, Fixnum, Hash)>] CartProfileRegisterResponse data, response status code and response headers
    def checkout_cart_profile_register_post_with_http_info(register_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CheckoutApi.checkout_cart_profile_register_post ..."
      end
      # verify the required parameter 'register_request' is set
      fail ArgumentError, "Missing the required parameter 'register_request' when calling CheckoutApi.checkout_cart_profile_register_post" if register_request.nil?
      # resource path
      local_var_path = "/checkout/cart/profile/register".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'_expand'] = opts[:'_expand'] if !opts[:'_expand'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(register_request)
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartProfileRegisterResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckoutApi#checkout_cart_profile_register_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update cart
    # Update the cart. 
    # @param cart Cart
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_expand The object expansion to perform on the result.  See documentation for examples
    # @return [CartResponse]
    def checkout_cart_put(cart, opts = {})
      data, _status_code, _headers = checkout_cart_put_with_http_info(cart, opts)
      return data
    end

    # Update cart
    # Update the cart. 
    # @param cart Cart
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_expand The object expansion to perform on the result.  See documentation for examples
    # @return [Array<(CartResponse, Fixnum, Hash)>] CartResponse data, response status code and response headers
    def checkout_cart_put_with_http_info(cart, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CheckoutApi.checkout_cart_put ..."
      end
      # verify the required parameter 'cart' is set
      fail ArgumentError, "Missing the required parameter 'cart' when calling CheckoutApi.checkout_cart_put" if cart.nil?
      # resource path
      local_var_path = "/checkout/cart".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'_expand'] = opts[:'_expand'] if !opts[:'_expand'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(cart)
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckoutApi#checkout_cart_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate
    # Validate the cart for errors.  Specific checks can be passed and multiple validations can occur throughout your checkout flow. 
    # @param validation_request Validation request
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_expand The object expansion to perform on the result.  See documentation for examples
    # @return [CartValidationResponse]
    def checkout_cart_validate_post(validation_request, opts = {})
      data, _status_code, _headers = checkout_cart_validate_post_with_http_info(validation_request, opts)
      return data
    end

    # Validate
    # Validate the cart for errors.  Specific checks can be passed and multiple validations can occur throughout your checkout flow. 
    # @param validation_request Validation request
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_expand The object expansion to perform on the result.  See documentation for examples
    # @return [Array<(CartValidationResponse, Fixnum, Hash)>] CartValidationResponse data, response status code and response headers
    def checkout_cart_validate_post_with_http_info(validation_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CheckoutApi.checkout_cart_validate_post ..."
      end
      # verify the required parameter 'validation_request' is set
      fail ArgumentError, "Missing the required parameter 'validation_request' when calling CheckoutApi.checkout_cart_validate_post" if validation_request.nil?
      # resource path
      local_var_path = "/checkout/cart/validate".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'_expand'] = opts[:'_expand'] if !opts[:'_expand'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(validation_request)
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartValidationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckoutApi#checkout_cart_validate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # City/State for Zip
    # Look up the city and state for the shipping zip code.  Useful for building an auto complete for parts of the shipping address 
    # @param cart Cart
    # @param [Hash] opts the optional parameters
    # @return [ItemsResponse]
    def checkout_city_state_post(cart, opts = {})
      data, _status_code, _headers = checkout_city_state_post_with_http_info(cart, opts)
      return data
    end

    # City/State for Zip
    # Look up the city and state for the shipping zip code.  Useful for building an auto complete for parts of the shipping address 
    # @param cart Cart
    # @param [Hash] opts the optional parameters
    # @return [Array<(ItemsResponse, Fixnum, Hash)>] ItemsResponse data, response status code and response headers
    def checkout_city_state_post_with_http_info(cart, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CheckoutApi.checkout_city_state_post ..."
      end
      # verify the required parameter 'cart' is set
      fail ArgumentError, "Missing the required parameter 'cart' when calling CheckoutApi.checkout_city_state_post" if cart.nil?
      # resource path
      local_var_path = "/checkout/city_state".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(cart)
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ItemsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckoutApi#checkout_city_state_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Related items (specific item)
    # Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers. 
    # @param item_id Item ID to retrieve related items for
    # @param cart Cart
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_expand The object expansion to perform on the result.  See item resource documentation for examples
    # @return [ItemsResponse]
    def checkout_related_items_item_id_post(item_id, cart, opts = {})
      data, _status_code, _headers = checkout_related_items_item_id_post_with_http_info(item_id, cart, opts)
      return data
    end

    # Related items (specific item)
    # Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers. 
    # @param item_id Item ID to retrieve related items for
    # @param cart Cart
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_expand The object expansion to perform on the result.  See item resource documentation for examples
    # @return [Array<(ItemsResponse, Fixnum, Hash)>] ItemsResponse data, response status code and response headers
    def checkout_related_items_item_id_post_with_http_info(item_id, cart, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CheckoutApi.checkout_related_items_item_id_post ..."
      end
      # verify the required parameter 'item_id' is set
      fail ArgumentError, "Missing the required parameter 'item_id' when calling CheckoutApi.checkout_related_items_item_id_post" if item_id.nil?
      # verify the required parameter 'cart' is set
      fail ArgumentError, "Missing the required parameter 'cart' when calling CheckoutApi.checkout_related_items_item_id_post" if cart.nil?
      # resource path
      local_var_path = "/checkout/relatedItems/{item_id}".sub('{format}','json').sub('{' + 'item_id' + '}', item_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'_expand'] = opts[:'_expand'] if !opts[:'_expand'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(cart)
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ItemsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckoutApi#checkout_related_items_item_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Related items
    # Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers. 
    # @param cart Cart
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_expand The object expansion to perform on the result.  See item resource documentation for examples
    # @return [ItemsResponse]
    def checkout_related_items_post(cart, opts = {})
      data, _status_code, _headers = checkout_related_items_post_with_http_info(cart, opts)
      return data
    end

    # Related items
    # Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers. 
    # @param cart Cart
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_expand The object expansion to perform on the result.  See item resource documentation for examples
    # @return [Array<(ItemsResponse, Fixnum, Hash)>] ItemsResponse data, response status code and response headers
    def checkout_related_items_post_with_http_info(cart, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CheckoutApi.checkout_related_items_post ..."
      end
      # verify the required parameter 'cart' is set
      fail ArgumentError, "Missing the required parameter 'cart' when calling CheckoutApi.checkout_related_items_post" if cart.nil?
      # resource path
      local_var_path = "/checkout/related_items".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'_expand'] = opts[:'_expand'] if !opts[:'_expand'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(cart)
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ItemsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckoutApi#checkout_related_items_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get cart (by return code)
    # Get a cart specified by the return code parameter. 
    # @param return_code Return code to lookup cart ID by
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_expand The object expansion to perform on the result.  See documentation for examples
    # @return [CartResponse]
    def checkout_return_return_code_get(return_code, opts = {})
      data, _status_code, _headers = checkout_return_return_code_get_with_http_info(return_code, opts)
      return data
    end

    # Get cart (by return code)
    # Get a cart specified by the return code parameter. 
    # @param return_code Return code to lookup cart ID by
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_expand The object expansion to perform on the result.  See documentation for examples
    # @return [Array<(CartResponse, Fixnum, Hash)>] CartResponse data, response status code and response headers
    def checkout_return_return_code_get_with_http_info(return_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CheckoutApi.checkout_return_return_code_get ..."
      end
      # verify the required parameter 'return_code' is set
      fail ArgumentError, "Missing the required parameter 'return_code' when calling CheckoutApi.checkout_return_return_code_get" if return_code.nil?
      # resource path
      local_var_path = "/checkout/return/{return_code}".sub('{format}','json').sub('{' + 'return_code' + '}', return_code.to_s)

      # query parameters
      query_params = {}
      query_params[:'_expand'] = opts[:'_expand'] if !opts[:'_expand'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckoutApi#checkout_return_return_code_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
