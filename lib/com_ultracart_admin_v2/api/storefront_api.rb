=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

OpenAPI spec version: 2.0.0
Contact: support@ultracart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module UltraCartAdminV2
  class StorefrontApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Archive email list
    # 
    # @param storefront_oid null
    # @param email_list_uuid null
    # @param [Hash] opts the optional parameters
    # @return [EmailListArchiveResponse]
    def archive_email_list(storefront_oid, email_list_uuid, opts = {})
      data, _status_code, _headers = archive_email_list_with_http_info(storefront_oid, email_list_uuid, opts)
      return data
    end

    # Archive email list
    # 
    # @param storefront_oid null
    # @param email_list_uuid null
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailListArchiveResponse, Fixnum, Hash)>] EmailListArchiveResponse data, response status code and response headers
    def archive_email_list_with_http_info(storefront_oid, email_list_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.archive_email_list ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.archive_email_list" if storefront_oid.nil?
      # verify the required parameter 'email_list_uuid' is set
      fail ArgumentError, "Missing the required parameter 'email_list_uuid' when calling StorefrontApi.archive_email_list" if email_list_uuid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/archive".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'email_list_uuid' + '}', email_list_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailListArchiveResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#archive_email_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Archive email segment
    # 
    # @param storefront_oid null
    # @param email_segment_uuid null
    # @param [Hash] opts the optional parameters
    # @return [EmailSegmentArchiveResponse]
    def archive_email_segment(storefront_oid, email_segment_uuid, opts = {})
      data, _status_code, _headers = archive_email_segment_with_http_info(storefront_oid, email_segment_uuid, opts)
      return data
    end

    # Archive email segment
    # 
    # @param storefront_oid null
    # @param email_segment_uuid null
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailSegmentArchiveResponse, Fixnum, Hash)>] EmailSegmentArchiveResponse data, response status code and response headers
    def archive_email_segment_with_http_info(storefront_oid, email_segment_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.archive_email_segment ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.archive_email_segment" if storefront_oid.nil?
      # verify the required parameter 'email_segment_uuid' is set
      fail ArgumentError, "Missing the required parameter 'email_segment_uuid' when calling StorefrontApi.archive_email_segment" if email_segment_uuid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/archive".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'email_segment_uuid' + '}', email_segment_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailSegmentArchiveResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#archive_email_segment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check download of email segment
    # 
    # @param storefront_oid null
    # @param email_segment_uuid null
    # @param email_segment_rebuild_uuid null
    # @param [Hash] opts the optional parameters
    # @return [EmailSegmentDownloadPrepareResponse]
    def check_download_email_segment(storefront_oid, email_segment_uuid, email_segment_rebuild_uuid, opts = {})
      data, _status_code, _headers = check_download_email_segment_with_http_info(storefront_oid, email_segment_uuid, email_segment_rebuild_uuid, opts)
      return data
    end

    # Check download of email segment
    # 
    # @param storefront_oid null
    # @param email_segment_uuid null
    # @param email_segment_rebuild_uuid null
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailSegmentDownloadPrepareResponse, Fixnum, Hash)>] EmailSegmentDownloadPrepareResponse data, response status code and response headers
    def check_download_email_segment_with_http_info(storefront_oid, email_segment_uuid, email_segment_rebuild_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.check_download_email_segment ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.check_download_email_segment" if storefront_oid.nil?
      # verify the required parameter 'email_segment_uuid' is set
      fail ArgumentError, "Missing the required parameter 'email_segment_uuid' when calling StorefrontApi.check_download_email_segment" if email_segment_uuid.nil?
      # verify the required parameter 'email_segment_rebuild_uuid' is set
      fail ArgumentError, "Missing the required parameter 'email_segment_rebuild_uuid' when calling StorefrontApi.check_download_email_segment" if email_segment_rebuild_uuid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/downloadPrepare/{email_segment_rebuild_uuid}".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'email_segment_uuid' + '}', email_segment_uuid.to_s).sub('{' + 'email_segment_rebuild_uuid' + '}', email_segment_rebuild_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailSegmentDownloadPrepareResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#check_download_email_segment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clone email campaign
    # 
    # @param storefront_oid null
    # @param email_campaign_uuid null
    # @param [Hash] opts the optional parameters
    # @return [EmailCampaignResponse]
    def clone_email_campaign(storefront_oid, email_campaign_uuid, opts = {})
      data, _status_code, _headers = clone_email_campaign_with_http_info(storefront_oid, email_campaign_uuid, opts)
      return data
    end

    # Clone email campaign
    # 
    # @param storefront_oid null
    # @param email_campaign_uuid null
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailCampaignResponse, Fixnum, Hash)>] EmailCampaignResponse data, response status code and response headers
    def clone_email_campaign_with_http_info(storefront_oid, email_campaign_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.clone_email_campaign ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.clone_email_campaign" if storefront_oid.nil?
      # verify the required parameter 'email_campaign_uuid' is set
      fail ArgumentError, "Missing the required parameter 'email_campaign_uuid' when calling StorefrontApi.clone_email_campaign" if email_campaign_uuid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/clone".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'email_campaign_uuid' + '}', email_campaign_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailCampaignResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#clone_email_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clone email flow
    # 
    # @param storefront_oid null
    # @param email_flow_uuid null
    # @param [Hash] opts the optional parameters
    # @return [EmailFlowResponse]
    def clone_email_flow(storefront_oid, email_flow_uuid, opts = {})
      data, _status_code, _headers = clone_email_flow_with_http_info(storefront_oid, email_flow_uuid, opts)
      return data
    end

    # Clone email flow
    # 
    # @param storefront_oid null
    # @param email_flow_uuid null
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailFlowResponse, Fixnum, Hash)>] EmailFlowResponse data, response status code and response headers
    def clone_email_flow_with_http_info(storefront_oid, email_flow_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.clone_email_flow ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.clone_email_flow" if storefront_oid.nil?
      # verify the required parameter 'email_flow_uuid' is set
      fail ArgumentError, "Missing the required parameter 'email_flow_uuid' when calling StorefrontApi.clone_email_flow" if email_flow_uuid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/clone".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'email_flow_uuid' + '}', email_flow_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailFlowResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#clone_email_flow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create email campaign
    # 
    # @param domain null
    # @param [Hash] opts the optional parameters
    # @return [EmailSendingDomainResponse]
    def create_email_sending_domain(domain, opts = {})
      data, _status_code, _headers = create_email_sending_domain_with_http_info(domain, opts)
      return data
    end

    # Create email campaign
    # 
    # @param domain null
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailSendingDomainResponse, Fixnum, Hash)>] EmailSendingDomainResponse data, response status code and response headers
    def create_email_sending_domain_with_http_info(domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.create_email_sending_domain ..."
      end
      # verify the required parameter 'domain' is set
      fail ArgumentError, "Missing the required parameter 'domain' when calling StorefrontApi.create_email_sending_domain" if domain.nil?
      # resource path
      local_var_path = "/storefront/email/sending_domains/{domain}/create".sub('{format}','json').sub('{' + 'domain' + '}', domain.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailSendingDomainResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#create_email_sending_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete email email
    # 
    # @param storefront_oid null
    # @param commseq_email_uuid null
    # @param [Hash] opts the optional parameters
    # @return [BaseResponse]
    def delete_email_email(storefront_oid, commseq_email_uuid, opts = {})
      data, _status_code, _headers = delete_email_email_with_http_info(storefront_oid, commseq_email_uuid, opts)
      return data
    end

    # Delete email email
    # 
    # @param storefront_oid null
    # @param commseq_email_uuid null
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseResponse, Fixnum, Hash)>] BaseResponse data, response status code and response headers
    def delete_email_email_with_http_info(storefront_oid, commseq_email_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.delete_email_email ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.delete_email_email" if storefront_oid.nil?
      # verify the required parameter 'commseq_email_uuid' is set
      fail ArgumentError, "Missing the required parameter 'commseq_email_uuid' when calling StorefrontApi.delete_email_email" if commseq_email_uuid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'commseq_email_uuid' + '}', commseq_email_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaseResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#delete_email_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete email list customer
    # 
    # @param storefront_oid null
    # @param email_list_uuid null
    # @param email_customer_uuid null
    # @param [Hash] opts the optional parameters
    # @return [BaseResponse]
    def delete_email_list_customer(storefront_oid, email_list_uuid, email_customer_uuid, opts = {})
      data, _status_code, _headers = delete_email_list_customer_with_http_info(storefront_oid, email_list_uuid, email_customer_uuid, opts)
      return data
    end

    # Delete email list customer
    # 
    # @param storefront_oid null
    # @param email_list_uuid null
    # @param email_customer_uuid null
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseResponse, Fixnum, Hash)>] BaseResponse data, response status code and response headers
    def delete_email_list_customer_with_http_info(storefront_oid, email_list_uuid, email_customer_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.delete_email_list_customer ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.delete_email_list_customer" if storefront_oid.nil?
      # verify the required parameter 'email_list_uuid' is set
      fail ArgumentError, "Missing the required parameter 'email_list_uuid' when calling StorefrontApi.delete_email_list_customer" if email_list_uuid.nil?
      # verify the required parameter 'email_customer_uuid' is set
      fail ArgumentError, "Missing the required parameter 'email_customer_uuid' when calling StorefrontApi.delete_email_list_customer" if email_customer_uuid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'email_list_uuid' + '}', email_list_uuid.to_s).sub('{' + 'email_customer_uuid' + '}', email_customer_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaseResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#delete_email_list_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # delete email campaign
    # 
    # @param domain null
    # @param [Hash] opts the optional parameters
    # @return [BaseResponse]
    def delete_email_sending_domain(domain, opts = {})
      data, _status_code, _headers = delete_email_sending_domain_with_http_info(domain, opts)
      return data
    end

    # delete email campaign
    # 
    # @param domain null
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseResponse, Fixnum, Hash)>] BaseResponse data, response status code and response headers
    def delete_email_sending_domain_with_http_info(domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.delete_email_sending_domain ..."
      end
      # verify the required parameter 'domain' is set
      fail ArgumentError, "Missing the required parameter 'domain' when calling StorefrontApi.delete_email_sending_domain" if domain.nil?
      # resource path
      local_var_path = "/storefront/email/sending_domains/{domain}".sub('{format}','json').sub('{' + 'domain' + '}', domain.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaseResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#delete_email_sending_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete experiment
    # 
    # @param storefront_oid null
    # @param storefront_experiment_oid null
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_experiment(storefront_oid, storefront_experiment_oid, opts = {})
      delete_experiment_with_http_info(storefront_oid, storefront_experiment_oid, opts)
      return nil
    end

    # Delete experiment
    # 
    # @param storefront_oid null
    # @param storefront_experiment_oid null
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_experiment_with_http_info(storefront_oid, storefront_experiment_oid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.delete_experiment ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.delete_experiment" if storefront_oid.nil?
      # verify the required parameter 'storefront_experiment_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_experiment_oid' when calling StorefrontApi.delete_experiment" if storefront_experiment_oid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'storefront_experiment_oid' + '}', storefront_experiment_oid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#delete_experiment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Obtain lat/long for an address
    # 
    # @param storefront_oid null
    # @param geocode_request geocode request
    # @param [Hash] opts the optional parameters
    # @return [GeocodeResponse]
    def geocode_address(storefront_oid, geocode_request, opts = {})
      data, _status_code, _headers = geocode_address_with_http_info(storefront_oid, geocode_request, opts)
      return data
    end

    # Obtain lat/long for an address
    # 
    # @param storefront_oid null
    # @param geocode_request geocode request
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeocodeResponse, Fixnum, Hash)>] GeocodeResponse data, response status code and response headers
    def geocode_address_with_http_info(storefront_oid, geocode_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.geocode_address ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.geocode_address" if storefront_oid.nil?
      # verify the required parameter 'geocode_request' is set
      fail ArgumentError, "Missing the required parameter 'geocode_request' when calling StorefrontApi.geocode_address" if geocode_request.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/geocode".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(geocode_request)
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GeocodeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#geocode_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get countries
    # Obtain a list of all the countries 
    # @param storefront_oid null
    # @param [Hash] opts the optional parameters
    # @return [CountriesResponse]
    def get_countries(storefront_oid, opts = {})
      data, _status_code, _headers = get_countries_with_http_info(storefront_oid, opts)
      return data
    end

    # Get countries
    # Obtain a list of all the countries 
    # @param storefront_oid null
    # @param [Hash] opts the optional parameters
    # @return [Array<(CountriesResponse, Fixnum, Hash)>] CountriesResponse data, response status code and response headers
    def get_countries_with_http_info(storefront_oid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_countries ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.get_countries" if storefront_oid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/countries".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CountriesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_countries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email communication base templates
    # 
    # @param storefront_oid null
    # @param [Hash] opts the optional parameters
    # @return [EmailBaseTemplateListResponse]
    def get_email_base_templates(storefront_oid, opts = {})
      data, _status_code, _headers = get_email_base_templates_with_http_info(storefront_oid, opts)
      return data
    end

    # Get email communication base templates
    # 
    # @param storefront_oid null
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailBaseTemplateListResponse, Fixnum, Hash)>] EmailBaseTemplateListResponse data, response status code and response headers
    def get_email_base_templates_with_http_info(storefront_oid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_email_base_templates ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.get_email_base_templates" if storefront_oid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/baseTemplates".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailBaseTemplateListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_email_base_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email campaign
    # 
    # @param storefront_oid null
    # @param email_campaign_uuid null
    # @param [Hash] opts the optional parameters
    # @return [EmailCampaignResponse]
    def get_email_campaign(storefront_oid, email_campaign_uuid, opts = {})
      data, _status_code, _headers = get_email_campaign_with_http_info(storefront_oid, email_campaign_uuid, opts)
      return data
    end

    # Get email campaign
    # 
    # @param storefront_oid null
    # @param email_campaign_uuid null
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailCampaignResponse, Fixnum, Hash)>] EmailCampaignResponse data, response status code and response headers
    def get_email_campaign_with_http_info(storefront_oid, email_campaign_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_email_campaign ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.get_email_campaign" if storefront_oid.nil?
      # verify the required parameter 'email_campaign_uuid' is set
      fail ArgumentError, "Missing the required parameter 'email_campaign_uuid' when calling StorefrontApi.get_email_campaign" if email_campaign_uuid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'email_campaign_uuid' + '}', email_campaign_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailCampaignResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_email_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email campaigns
    # 
    # @param storefront_oid null
    # @param [Hash] opts the optional parameters
    # @return [EmailCampaignsResponse]
    def get_email_campaigns(storefront_oid, opts = {})
      data, _status_code, _headers = get_email_campaigns_with_http_info(storefront_oid, opts)
      return data
    end

    # Get email campaigns
    # 
    # @param storefront_oid null
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailCampaignsResponse, Fixnum, Hash)>] EmailCampaignsResponse data, response status code and response headers
    def get_email_campaigns_with_http_info(storefront_oid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_email_campaigns ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.get_email_campaigns" if storefront_oid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/campaigns".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailCampaignsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_email_campaigns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email campaigns with stats
    # 
    # @param storefront_oid null
    # @param stat_days null
    # @param [Hash] opts the optional parameters
    # @return [EmailCampaignsResponse]
    def get_email_campaigns_with_stats(storefront_oid, stat_days, opts = {})
      data, _status_code, _headers = get_email_campaigns_with_stats_with_http_info(storefront_oid, stat_days, opts)
      return data
    end

    # Get email campaigns with stats
    # 
    # @param storefront_oid null
    # @param stat_days null
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailCampaignsResponse, Fixnum, Hash)>] EmailCampaignsResponse data, response status code and response headers
    def get_email_campaigns_with_stats_with_http_info(storefront_oid, stat_days, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_email_campaigns_with_stats ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.get_email_campaigns_with_stats" if storefront_oid.nil?
      # verify the required parameter 'stat_days' is set
      fail ArgumentError, "Missing the required parameter 'stat_days' when calling StorefrontApi.get_email_campaigns_with_stats" if stat_days.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/campaignsWithStats/{stat_days}".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'stat_days' + '}', stat_days.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailCampaignsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_email_campaigns_with_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email commseq
    # 
    # @param storefront_oid null
    # @param commseq_uuid null
    # @param [Hash] opts the optional parameters
    # @return [EmailCommseqResponse]
    def get_email_commseq(storefront_oid, commseq_uuid, opts = {})
      data, _status_code, _headers = get_email_commseq_with_http_info(storefront_oid, commseq_uuid, opts)
      return data
    end

    # Get email commseq
    # 
    # @param storefront_oid null
    # @param commseq_uuid null
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailCommseqResponse, Fixnum, Hash)>] EmailCommseqResponse data, response status code and response headers
    def get_email_commseq_with_http_info(storefront_oid, commseq_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_email_commseq ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.get_email_commseq" if storefront_oid.nil?
      # verify the required parameter 'commseq_uuid' is set
      fail ArgumentError, "Missing the required parameter 'commseq_uuid' when calling StorefrontApi.get_email_commseq" if commseq_uuid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'commseq_uuid' + '}', commseq_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailCommseqResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_email_commseq\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email communication sequence emails stats
    # 
    # @param storefront_oid null
    # @param commseq_uuid null
    # @param stats_request StatsRequest
    # @param [Hash] opts the optional parameters
    # @return [EmailStatSummaryResponse]
    def get_email_commseq_email_stats(storefront_oid, commseq_uuid, stats_request, opts = {})
      data, _status_code, _headers = get_email_commseq_email_stats_with_http_info(storefront_oid, commseq_uuid, stats_request, opts)
      return data
    end

    # Get email communication sequence emails stats
    # 
    # @param storefront_oid null
    # @param commseq_uuid null
    # @param stats_request StatsRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailStatSummaryResponse, Fixnum, Hash)>] EmailStatSummaryResponse data, response status code and response headers
    def get_email_commseq_email_stats_with_http_info(storefront_oid, commseq_uuid, stats_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_email_commseq_email_stats ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.get_email_commseq_email_stats" if storefront_oid.nil?
      # verify the required parameter 'commseq_uuid' is set
      fail ArgumentError, "Missing the required parameter 'commseq_uuid' when calling StorefrontApi.get_email_commseq_email_stats" if commseq_uuid.nil?
      # verify the required parameter 'stats_request' is set
      fail ArgumentError, "Missing the required parameter 'stats_request' when calling StorefrontApi.get_email_commseq_email_stats" if stats_request.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/emailStats".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'commseq_uuid' + '}', commseq_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(stats_request)
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailStatSummaryResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_email_commseq_email_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get communication sequence stats overall
    # 
    # @param storefront_oid null
    # @param commseq_uuid null
    # @param [Hash] opts the optional parameters
    # @return [EmailCommseqStatResponse]
    def get_email_commseq_stat_overall(storefront_oid, commseq_uuid, opts = {})
      data, _status_code, _headers = get_email_commseq_stat_overall_with_http_info(storefront_oid, commseq_uuid, opts)
      return data
    end

    # Get communication sequence stats overall
    # 
    # @param storefront_oid null
    # @param commseq_uuid null
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailCommseqStatResponse, Fixnum, Hash)>] EmailCommseqStatResponse data, response status code and response headers
    def get_email_commseq_stat_overall_with_http_info(storefront_oid, commseq_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_email_commseq_stat_overall ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.get_email_commseq_stat_overall" if storefront_oid.nil?
      # verify the required parameter 'commseq_uuid' is set
      fail ArgumentError, "Missing the required parameter 'commseq_uuid' when calling StorefrontApi.get_email_commseq_stat_overall" if commseq_uuid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stat".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'commseq_uuid' + '}', commseq_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailCommseqStatResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_email_commseq_stat_overall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email communication sequence customers waiting at each requested step
    # 
    # @param storefront_oid null
    # @param commseq_uuid null
    # @param waiting_request WaitingRequest
    # @param [Hash] opts the optional parameters
    # @return [EmailStepWaitingResponse]
    def get_email_commseq_step_waiting(storefront_oid, commseq_uuid, waiting_request, opts = {})
      data, _status_code, _headers = get_email_commseq_step_waiting_with_http_info(storefront_oid, commseq_uuid, waiting_request, opts)
      return data
    end

    # Get email communication sequence customers waiting at each requested step
    # 
    # @param storefront_oid null
    # @param commseq_uuid null
    # @param waiting_request WaitingRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailStepWaitingResponse, Fixnum, Hash)>] EmailStepWaitingResponse data, response status code and response headers
    def get_email_commseq_step_waiting_with_http_info(storefront_oid, commseq_uuid, waiting_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_email_commseq_step_waiting ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.get_email_commseq_step_waiting" if storefront_oid.nil?
      # verify the required parameter 'commseq_uuid' is set
      fail ArgumentError, "Missing the required parameter 'commseq_uuid' when calling StorefrontApi.get_email_commseq_step_waiting" if commseq_uuid.nil?
      # verify the required parameter 'waiting_request' is set
      fail ArgumentError, "Missing the required parameter 'waiting_request' when calling StorefrontApi.get_email_commseq_step_waiting" if waiting_request.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/waiting".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'commseq_uuid' + '}', commseq_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(waiting_request)
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailStepWaitingResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_email_commseq_step_waiting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email commseqs
    # 
    # @param storefront_oid null
    # @param [Hash] opts the optional parameters
    # @return [EmailCommseqsResponse]
    def get_email_commseqs(storefront_oid, opts = {})
      data, _status_code, _headers = get_email_commseqs_with_http_info(storefront_oid, opts)
      return data
    end

    # Get email commseqs
    # 
    # @param storefront_oid null
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailCommseqsResponse, Fixnum, Hash)>] EmailCommseqsResponse data, response status code and response headers
    def get_email_commseqs_with_http_info(storefront_oid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_email_commseqs ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.get_email_commseqs" if storefront_oid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/commseqs".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailCommseqsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_email_commseqs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email dashboard activity
    # 
    # @param storefront_oid null
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :last_records null
    # @return [EmailDashboardActivityResponse]
    def get_email_dashboard_activity(storefront_oid, opts = {})
      data, _status_code, _headers = get_email_dashboard_activity_with_http_info(storefront_oid, opts)
      return data
    end

    # Get email dashboard activity
    # 
    # @param storefront_oid null
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :last_records null
    # @return [Array<(EmailDashboardActivityResponse, Fixnum, Hash)>] EmailDashboardActivityResponse data, response status code and response headers
    def get_email_dashboard_activity_with_http_info(storefront_oid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_email_dashboard_activity ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.get_email_dashboard_activity" if storefront_oid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/dashboard_activity".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s)

      # query parameters
      query_params = {}
      query_params[:'last_records'] = opts[:'last_records'] if !opts[:'last_records'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailDashboardActivityResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_email_dashboard_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get dashboard stats
    # 
    # @param storefront_oid null
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :days null
    # @return [EmailDashboardStatsResponse]
    def get_email_dashboard_stats(storefront_oid, opts = {})
      data, _status_code, _headers = get_email_dashboard_stats_with_http_info(storefront_oid, opts)
      return data
    end

    # Get dashboard stats
    # 
    # @param storefront_oid null
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :days null
    # @return [Array<(EmailDashboardStatsResponse, Fixnum, Hash)>] EmailDashboardStatsResponse data, response status code and response headers
    def get_email_dashboard_stats_with_http_info(storefront_oid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_email_dashboard_stats ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.get_email_dashboard_stats" if storefront_oid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/dashboard_stats".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s)

      # query parameters
      query_params = {}
      query_params[:'days'] = opts[:'days'] if !opts[:'days'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailDashboardStatsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_email_dashboard_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email email
    # 
    # @param storefront_oid null
    # @param commseq_email_uuid null
    # @param [Hash] opts the optional parameters
    # @return [EmailCommseqEmailResponse]
    def get_email_email(storefront_oid, commseq_email_uuid, opts = {})
      data, _status_code, _headers = get_email_email_with_http_info(storefront_oid, commseq_email_uuid, opts)
      return data
    end

    # Get email email
    # 
    # @param storefront_oid null
    # @param commseq_email_uuid null
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailCommseqEmailResponse, Fixnum, Hash)>] EmailCommseqEmailResponse data, response status code and response headers
    def get_email_email_with_http_info(storefront_oid, commseq_email_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_email_email ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.get_email_email" if storefront_oid.nil?
      # verify the required parameter 'commseq_email_uuid' is set
      fail ArgumentError, "Missing the required parameter 'commseq_email_uuid' when calling StorefrontApi.get_email_email" if commseq_email_uuid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'commseq_email_uuid' + '}', commseq_email_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailCommseqEmailResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_email_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email emails
    # 
    # @param storefront_oid null
    # @param [Hash] opts the optional parameters
    # @return [EmailCommseqEmailsResponse]
    def get_email_emails(storefront_oid, opts = {})
      data, _status_code, _headers = get_email_emails_with_http_info(storefront_oid, opts)
      return data
    end

    # Get email emails
    # 
    # @param storefront_oid null
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailCommseqEmailsResponse, Fixnum, Hash)>] EmailCommseqEmailsResponse data, response status code and response headers
    def get_email_emails_with_http_info(storefront_oid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_email_emails ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.get_email_emails" if storefront_oid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/emails".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailCommseqEmailsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_email_emails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email emails multiple
    # 
    # @param storefront_oid null
    # @param email_commseq_emails_request Request of email uuids
    # @param [Hash] opts the optional parameters
    # @return [EmailCommseqEmailsResponse]
    def get_email_emails_multiple(storefront_oid, email_commseq_emails_request, opts = {})
      data, _status_code, _headers = get_email_emails_multiple_with_http_info(storefront_oid, email_commseq_emails_request, opts)
      return data
    end

    # Get email emails multiple
    # 
    # @param storefront_oid null
    # @param email_commseq_emails_request Request of email uuids
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailCommseqEmailsResponse, Fixnum, Hash)>] EmailCommseqEmailsResponse data, response status code and response headers
    def get_email_emails_multiple_with_http_info(storefront_oid, email_commseq_emails_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_email_emails_multiple ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.get_email_emails_multiple" if storefront_oid.nil?
      # verify the required parameter 'email_commseq_emails_request' is set
      fail ArgumentError, "Missing the required parameter 'email_commseq_emails_request' when calling StorefrontApi.get_email_emails_multiple" if email_commseq_emails_request.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/emails/multiple".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(email_commseq_emails_request)
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailCommseqEmailsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_email_emails_multiple\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email flow
    # 
    # @param storefront_oid null
    # @param email_flow_uuid null
    # @param [Hash] opts the optional parameters
    # @return [EmailFlowResponse]
    def get_email_flow(storefront_oid, email_flow_uuid, opts = {})
      data, _status_code, _headers = get_email_flow_with_http_info(storefront_oid, email_flow_uuid, opts)
      return data
    end

    # Get email flow
    # 
    # @param storefront_oid null
    # @param email_flow_uuid null
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailFlowResponse, Fixnum, Hash)>] EmailFlowResponse data, response status code and response headers
    def get_email_flow_with_http_info(storefront_oid, email_flow_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_email_flow ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.get_email_flow" if storefront_oid.nil?
      # verify the required parameter 'email_flow_uuid' is set
      fail ArgumentError, "Missing the required parameter 'email_flow_uuid' when calling StorefrontApi.get_email_flow" if email_flow_uuid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'email_flow_uuid' + '}', email_flow_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailFlowResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_email_flow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email flows
    # 
    # @param storefront_oid null
    # @param [Hash] opts the optional parameters
    # @return [EmailFlowsResponse]
    def get_email_flows(storefront_oid, opts = {})
      data, _status_code, _headers = get_email_flows_with_http_info(storefront_oid, opts)
      return data
    end

    # Get email flows
    # 
    # @param storefront_oid null
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailFlowsResponse, Fixnum, Hash)>] EmailFlowsResponse data, response status code and response headers
    def get_email_flows_with_http_info(storefront_oid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_email_flows ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.get_email_flows" if storefront_oid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/flows".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailFlowsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_email_flows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email list
    # 
    # @param storefront_oid null
    # @param email_list_uuid null
    # @param [Hash] opts the optional parameters
    # @return [EmailListResponse]
    def get_email_list(storefront_oid, email_list_uuid, opts = {})
      data, _status_code, _headers = get_email_list_with_http_info(storefront_oid, email_list_uuid, opts)
      return data
    end

    # Get email list
    # 
    # @param storefront_oid null
    # @param email_list_uuid null
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailListResponse, Fixnum, Hash)>] EmailListResponse data, response status code and response headers
    def get_email_list_with_http_info(storefront_oid, email_list_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_email_list ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.get_email_list" if storefront_oid.nil?
      # verify the required parameter 'email_list_uuid' is set
      fail ArgumentError, "Missing the required parameter 'email_list_uuid' when calling StorefrontApi.get_email_list" if email_list_uuid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'email_list_uuid' + '}', email_list_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_email_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email list customers
    # 
    # @param storefront_oid null
    # @param email_list_uuid null
    # @param email_customer_uuid null
    # @param [Hash] opts the optional parameters
    # @return [EmailCustomerEditorUrlResponse]
    def get_email_list_customer_editor_url(storefront_oid, email_list_uuid, email_customer_uuid, opts = {})
      data, _status_code, _headers = get_email_list_customer_editor_url_with_http_info(storefront_oid, email_list_uuid, email_customer_uuid, opts)
      return data
    end

    # Get email list customers
    # 
    # @param storefront_oid null
    # @param email_list_uuid null
    # @param email_customer_uuid null
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailCustomerEditorUrlResponse, Fixnum, Hash)>] EmailCustomerEditorUrlResponse data, response status code and response headers
    def get_email_list_customer_editor_url_with_http_info(storefront_oid, email_list_uuid, email_customer_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_email_list_customer_editor_url ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.get_email_list_customer_editor_url" if storefront_oid.nil?
      # verify the required parameter 'email_list_uuid' is set
      fail ArgumentError, "Missing the required parameter 'email_list_uuid' when calling StorefrontApi.get_email_list_customer_editor_url" if email_list_uuid.nil?
      # verify the required parameter 'email_customer_uuid' is set
      fail ArgumentError, "Missing the required parameter 'email_customer_uuid' when calling StorefrontApi.get_email_list_customer_editor_url" if email_customer_uuid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}/editor_url".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'email_list_uuid' + '}', email_list_uuid.to_s).sub('{' + 'email_customer_uuid' + '}', email_customer_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailCustomerEditorUrlResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_email_list_customer_editor_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email list customers
    # 
    # @param storefront_oid null
    # @param email_list_uuid null
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_number null
    # @option opts [Integer] :page_size null
    # @return [EmailListCustomersResponse]
    def get_email_list_customers(storefront_oid, email_list_uuid, opts = {})
      data, _status_code, _headers = get_email_list_customers_with_http_info(storefront_oid, email_list_uuid, opts)
      return data
    end

    # Get email list customers
    # 
    # @param storefront_oid null
    # @param email_list_uuid null
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_number null
    # @option opts [Integer] :page_size null
    # @return [Array<(EmailListCustomersResponse, Fixnum, Hash)>] EmailListCustomersResponse data, response status code and response headers
    def get_email_list_customers_with_http_info(storefront_oid, email_list_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_email_list_customers ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.get_email_list_customers" if storefront_oid.nil?
      # verify the required parameter 'email_list_uuid' is set
      fail ArgumentError, "Missing the required parameter 'email_list_uuid' when calling StorefrontApi.get_email_list_customers" if email_list_uuid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'email_list_uuid' + '}', email_list_uuid.to_s)

      # query parameters
      query_params = {}
      query_params[:'pageNumber'] = opts[:'page_number'] if !opts[:'page_number'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailListCustomersResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_email_list_customers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email lists
    # 
    # @param storefront_oid null
    # @param [Hash] opts the optional parameters
    # @return [EmailListsResponse]
    def get_email_lists(storefront_oid, opts = {})
      data, _status_code, _headers = get_email_lists_with_http_info(storefront_oid, opts)
      return data
    end

    # Get email lists
    # 
    # @param storefront_oid null
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailListsResponse, Fixnum, Hash)>] EmailListsResponse data, response status code and response headers
    def get_email_lists_with_http_info(storefront_oid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_email_lists ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.get_email_lists" if storefront_oid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/lists".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailListsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_email_lists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email segment
    # 
    # @param storefront_oid null
    # @param email_segment_uuid null
    # @param [Hash] opts the optional parameters
    # @return [EmailSegmentResponse]
    def get_email_segment(storefront_oid, email_segment_uuid, opts = {})
      data, _status_code, _headers = get_email_segment_with_http_info(storefront_oid, email_segment_uuid, opts)
      return data
    end

    # Get email segment
    # 
    # @param storefront_oid null
    # @param email_segment_uuid null
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailSegmentResponse, Fixnum, Hash)>] EmailSegmentResponse data, response status code and response headers
    def get_email_segment_with_http_info(storefront_oid, email_segment_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_email_segment ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.get_email_segment" if storefront_oid.nil?
      # verify the required parameter 'email_segment_uuid' is set
      fail ArgumentError, "Missing the required parameter 'email_segment_uuid' when calling StorefrontApi.get_email_segment" if email_segment_uuid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'email_segment_uuid' + '}', email_segment_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailSegmentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_email_segment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email segment customers editor URL
    # 
    # @param storefront_oid null
    # @param email_segment_uuid null
    # @param email_customer_uuid null
    # @param [Hash] opts the optional parameters
    # @return [EmailCustomerEditorUrlResponse]
    def get_email_segment_customer_editor_url(storefront_oid, email_segment_uuid, email_customer_uuid, opts = {})
      data, _status_code, _headers = get_email_segment_customer_editor_url_with_http_info(storefront_oid, email_segment_uuid, email_customer_uuid, opts)
      return data
    end

    # Get email segment customers editor URL
    # 
    # @param storefront_oid null
    # @param email_segment_uuid null
    # @param email_customer_uuid null
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailCustomerEditorUrlResponse, Fixnum, Hash)>] EmailCustomerEditorUrlResponse data, response status code and response headers
    def get_email_segment_customer_editor_url_with_http_info(storefront_oid, email_segment_uuid, email_customer_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_email_segment_customer_editor_url ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.get_email_segment_customer_editor_url" if storefront_oid.nil?
      # verify the required parameter 'email_segment_uuid' is set
      fail ArgumentError, "Missing the required parameter 'email_segment_uuid' when calling StorefrontApi.get_email_segment_customer_editor_url" if email_segment_uuid.nil?
      # verify the required parameter 'email_customer_uuid' is set
      fail ArgumentError, "Missing the required parameter 'email_customer_uuid' when calling StorefrontApi.get_email_segment_customer_editor_url" if email_customer_uuid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers/{email_customer_uuid}/editor_url".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'email_segment_uuid' + '}', email_segment_uuid.to_s).sub('{' + 'email_customer_uuid' + '}', email_customer_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailCustomerEditorUrlResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_email_segment_customer_editor_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email segment customers
    # 
    # @param storefront_oid null
    # @param email_segment_uuid null
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_number null
    # @option opts [Integer] :page_size null
    # @return [EmailSegmentCustomersResponse]
    def get_email_segment_customers(storefront_oid, email_segment_uuid, opts = {})
      data, _status_code, _headers = get_email_segment_customers_with_http_info(storefront_oid, email_segment_uuid, opts)
      return data
    end

    # Get email segment customers
    # 
    # @param storefront_oid null
    # @param email_segment_uuid null
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_number null
    # @option opts [Integer] :page_size null
    # @return [Array<(EmailSegmentCustomersResponse, Fixnum, Hash)>] EmailSegmentCustomersResponse data, response status code and response headers
    def get_email_segment_customers_with_http_info(storefront_oid, email_segment_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_email_segment_customers ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.get_email_segment_customers" if storefront_oid.nil?
      # verify the required parameter 'email_segment_uuid' is set
      fail ArgumentError, "Missing the required parameter 'email_segment_uuid' when calling StorefrontApi.get_email_segment_customers" if email_segment_uuid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'email_segment_uuid' + '}', email_segment_uuid.to_s)

      # query parameters
      query_params = {}
      query_params[:'pageNumber'] = opts[:'page_number'] if !opts[:'page_number'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailSegmentCustomersResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_email_segment_customers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email segments
    # 
    # @param storefront_oid null
    # @param [Hash] opts the optional parameters
    # @return [EmailSegmentsResponse]
    def get_email_segments(storefront_oid, opts = {})
      data, _status_code, _headers = get_email_segments_with_http_info(storefront_oid, opts)
      return data
    end

    # Get email segments
    # 
    # @param storefront_oid null
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailSegmentsResponse, Fixnum, Hash)>] EmailSegmentsResponse data, response status code and response headers
    def get_email_segments_with_http_info(storefront_oid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_email_segments ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.get_email_segments" if storefront_oid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/segments".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailSegmentsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_email_segments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email sending domain
    # 
    # @param domain null
    # @param [Hash] opts the optional parameters
    # @return [EmailSendingDomainResponse]
    def get_email_sending_domain(domain, opts = {})
      data, _status_code, _headers = get_email_sending_domain_with_http_info(domain, opts)
      return data
    end

    # Get email sending domain
    # 
    # @param domain null
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailSendingDomainResponse, Fixnum, Hash)>] EmailSendingDomainResponse data, response status code and response headers
    def get_email_sending_domain_with_http_info(domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_email_sending_domain ..."
      end
      # verify the required parameter 'domain' is set
      fail ArgumentError, "Missing the required parameter 'domain' when calling StorefrontApi.get_email_sending_domain" if domain.nil?
      # resource path
      local_var_path = "/storefront/email/sending_domain/{domain}".sub('{format}','json').sub('{' + 'domain' + '}', domain.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailSendingDomainResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_email_sending_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email sending domain status
    # 
    # @param domain null
    # @param [Hash] opts the optional parameters
    # @return [EmailSendingDomainResponse]
    def get_email_sending_domain_status(domain, opts = {})
      data, _status_code, _headers = get_email_sending_domain_status_with_http_info(domain, opts)
      return data
    end

    # Get email sending domain status
    # 
    # @param domain null
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailSendingDomainResponse, Fixnum, Hash)>] EmailSendingDomainResponse data, response status code and response headers
    def get_email_sending_domain_status_with_http_info(domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_email_sending_domain_status ..."
      end
      # verify the required parameter 'domain' is set
      fail ArgumentError, "Missing the required parameter 'domain' when calling StorefrontApi.get_email_sending_domain_status" if domain.nil?
      # resource path
      local_var_path = "/storefront/email/sending_domains/{domain}/status".sub('{format}','json').sub('{' + 'domain' + '}', domain.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailSendingDomainResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_email_sending_domain_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email sending domains
    # 
    # @param [Hash] opts the optional parameters
    # @return [EmailSendingDomainsResponse]
    def get_email_sending_domains(opts = {})
      data, _status_code, _headers = get_email_sending_domains_with_http_info(opts)
      return data
    end

    # Get email sending domains
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailSendingDomainsResponse, Fixnum, Hash)>] EmailSendingDomainsResponse data, response status code and response headers
    def get_email_sending_domains_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_email_sending_domains ..."
      end
      # resource path
      local_var_path = "/storefront/email/sending_domains".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailSendingDomainsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_email_sending_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email template
    # 
    # @param storefront_oid null
    # @param email_template_oid null
    # @param [Hash] opts the optional parameters
    # @return [EmailTemplate]
    def get_email_template(storefront_oid, email_template_oid, opts = {})
      data, _status_code, _headers = get_email_template_with_http_info(storefront_oid, email_template_oid, opts)
      return data
    end

    # Get email template
    # 
    # @param storefront_oid null
    # @param email_template_oid null
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailTemplate, Fixnum, Hash)>] EmailTemplate data, response status code and response headers
    def get_email_template_with_http_info(storefront_oid, email_template_oid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_email_template ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.get_email_template" if storefront_oid.nil?
      # verify the required parameter 'email_template_oid' is set
      fail ArgumentError, "Missing the required parameter 'email_template_oid' when calling StorefrontApi.get_email_template" if email_template_oid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/templates/{email_template_oid}".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'email_template_oid' + '}', email_template_oid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailTemplate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_email_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email templates
    # 
    # @param storefront_oid null
    # @param [Hash] opts the optional parameters
    # @option opts [String] :trigger_type null
    # @return [EmailTemplatesResponse]
    def get_email_templates(storefront_oid, opts = {})
      data, _status_code, _headers = get_email_templates_with_http_info(storefront_oid, opts)
      return data
    end

    # Get email templates
    # 
    # @param storefront_oid null
    # @param [Hash] opts the optional parameters
    # @option opts [String] :trigger_type null
    # @return [Array<(EmailTemplatesResponse, Fixnum, Hash)>] EmailTemplatesResponse data, response status code and response headers
    def get_email_templates_with_http_info(storefront_oid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_email_templates ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.get_email_templates" if storefront_oid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/templates".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s)

      # query parameters
      query_params = {}
      query_params[:'trigger_type'] = opts[:'trigger_type'] if !opts[:'trigger_type'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailTemplatesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_email_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of third party email providers
    # 
    # @param storefront_oid null
    # @param [Hash] opts the optional parameters
    # @return [EmailThirdPartyProvidersResponse]
    def get_email_third_party_providers(storefront_oid, opts = {})
      data, _status_code, _headers = get_email_third_party_providers_with_http_info(storefront_oid, opts)
      return data
    end

    # Get a list of third party email providers
    # 
    # @param storefront_oid null
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailThirdPartyProvidersResponse, Fixnum, Hash)>] EmailThirdPartyProvidersResponse data, response status code and response headers
    def get_email_third_party_providers_with_http_info(storefront_oid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_email_third_party_providers ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.get_email_third_party_providers" if storefront_oid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/third_party_providers".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailThirdPartyProvidersResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_email_third_party_providers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get experiments
    # 
    # @param storefront_oid null
    # @param [Hash] opts the optional parameters
    # @return [ExperimentsResponse]
    def get_experiments(storefront_oid, opts = {})
      data, _status_code, _headers = get_experiments_with_http_info(storefront_oid, opts)
      return data
    end

    # Get experiments
    # 
    # @param storefront_oid null
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExperimentsResponse, Fixnum, Hash)>] ExperimentsResponse data, response status code and response headers
    def get_experiments_with_http_info(storefront_oid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_experiments ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.get_experiments" if storefront_oid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/experiments".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExperimentsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_experiments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get histogram property names
    # Obtain a list of property names for a given property type 
    # @param storefront_oid null
    # @param [Hash] opts the optional parameters
    # @option opts [String] :property_type null
    # @return [EmailHistogramPropertyNamesResponse]
    def get_histogram_property_names(storefront_oid, opts = {})
      data, _status_code, _headers = get_histogram_property_names_with_http_info(storefront_oid, opts)
      return data
    end

    # Get histogram property names
    # Obtain a list of property names for a given property type 
    # @param storefront_oid null
    # @param [Hash] opts the optional parameters
    # @option opts [String] :property_type null
    # @return [Array<(EmailHistogramPropertyNamesResponse, Fixnum, Hash)>] EmailHistogramPropertyNamesResponse data, response status code and response headers
    def get_histogram_property_names_with_http_info(storefront_oid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_histogram_property_names ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.get_histogram_property_names" if storefront_oid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/histogram/property_names".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s)

      # query parameters
      query_params = {}
      query_params[:'property_type'] = opts[:'property_type'] if !opts[:'property_type'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailHistogramPropertyNamesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_histogram_property_names\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get histogram property values
    # Obtain a list of property values for a given property name and type 
    # @param storefront_oid null
    # @param [Hash] opts the optional parameters
    # @option opts [String] :property_name null
    # @option opts [String] :property_type null
    # @option opts [Integer] :limit null
    # @return [EmailHistogramPropertyValuesResponse]
    def get_histogram_property_values(storefront_oid, opts = {})
      data, _status_code, _headers = get_histogram_property_values_with_http_info(storefront_oid, opts)
      return data
    end

    # Get histogram property values
    # Obtain a list of property values for a given property name and type 
    # @param storefront_oid null
    # @param [Hash] opts the optional parameters
    # @option opts [String] :property_name null
    # @option opts [String] :property_type null
    # @option opts [Integer] :limit null
    # @return [Array<(EmailHistogramPropertyValuesResponse, Fixnum, Hash)>] EmailHistogramPropertyValuesResponse data, response status code and response headers
    def get_histogram_property_values_with_http_info(storefront_oid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_histogram_property_values ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.get_histogram_property_values" if storefront_oid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/histogram/property_values".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s)

      # query parameters
      query_params = {}
      query_params[:'property_name'] = opts[:'property_name'] if !opts[:'property_name'].nil?
      query_params[:'property_type'] = opts[:'property_type'] if !opts[:'property_type'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailHistogramPropertyValuesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_histogram_property_values\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a list of transaction email names
    # Obtain a list of all transactional emails and return back just their names 
    # @param id null
    # @param [Hash] opts the optional parameters
    # @return [TransactionEmailListResponse]
    def get_transaction_email_list(id, opts = {})
      data, _status_code, _headers = get_transaction_email_list_with_http_info(id, opts)
      return data
    end

    # Gets a list of transaction email names
    # Obtain a list of all transactional emails and return back just their names 
    # @param id null
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionEmailListResponse, Fixnum, Hash)>] TransactionEmailListResponse data, response status code and response headers
    def get_transaction_email_list_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.get_transaction_email_list ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling StorefrontApi.get_transaction_email_list" if id.nil?
      # resource path
      local_var_path = "/storefront/{id}/transaction_email/list".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransactionEmailListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#get_transaction_email_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Import a third party provider list
    # 
    # @param storefront_oid null
    # @param import_request lists to import
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def import_email_third_party_provider_list(storefront_oid, import_request, opts = {})
      import_email_third_party_provider_list_with_http_info(storefront_oid, import_request, opts)
      return nil
    end

    # Import a third party provider list
    # 
    # @param storefront_oid null
    # @param import_request lists to import
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def import_email_third_party_provider_list_with_http_info(storefront_oid, import_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.import_email_third_party_provider_list ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.import_email_third_party_provider_list" if storefront_oid.nil?
      # verify the required parameter 'import_request' is set
      fail ArgumentError, "Missing the required parameter 'import_request' when calling StorefrontApi.import_email_third_party_provider_list" if import_request.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/third_party_providers/import".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(import_request)
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#import_email_third_party_provider_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insert email campaign
    # 
    # @param storefront_oid null
    # @param email_campaign Email campaign
    # @param [Hash] opts the optional parameters
    # @return [EmailCampaignResponse]
    def insert_email_campaign(storefront_oid, email_campaign, opts = {})
      data, _status_code, _headers = insert_email_campaign_with_http_info(storefront_oid, email_campaign, opts)
      return data
    end

    # Insert email campaign
    # 
    # @param storefront_oid null
    # @param email_campaign Email campaign
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailCampaignResponse, Fixnum, Hash)>] EmailCampaignResponse data, response status code and response headers
    def insert_email_campaign_with_http_info(storefront_oid, email_campaign, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.insert_email_campaign ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.insert_email_campaign" if storefront_oid.nil?
      # verify the required parameter 'email_campaign' is set
      fail ArgumentError, "Missing the required parameter 'email_campaign' when calling StorefrontApi.insert_email_campaign" if email_campaign.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/campaigns".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(email_campaign)
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailCampaignResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#insert_email_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insert email commseq
    # 
    # @param storefront_oid null
    # @param email_commseq Email commseq
    # @param [Hash] opts the optional parameters
    # @return [EmailCommseqResponse]
    def insert_email_commseq(storefront_oid, email_commseq, opts = {})
      data, _status_code, _headers = insert_email_commseq_with_http_info(storefront_oid, email_commseq, opts)
      return data
    end

    # Insert email commseq
    # 
    # @param storefront_oid null
    # @param email_commseq Email commseq
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailCommseqResponse, Fixnum, Hash)>] EmailCommseqResponse data, response status code and response headers
    def insert_email_commseq_with_http_info(storefront_oid, email_commseq, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.insert_email_commseq ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.insert_email_commseq" if storefront_oid.nil?
      # verify the required parameter 'email_commseq' is set
      fail ArgumentError, "Missing the required parameter 'email_commseq' when calling StorefrontApi.insert_email_commseq" if email_commseq.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/commseqs".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(email_commseq)
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailCommseqResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#insert_email_commseq\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insert email email
    # 
    # @param storefront_oid null
    # @param email_commseq_email Email email
    # @param [Hash] opts the optional parameters
    # @return [EmailCommseqEmailResponse]
    def insert_email_email(storefront_oid, email_commseq_email, opts = {})
      data, _status_code, _headers = insert_email_email_with_http_info(storefront_oid, email_commseq_email, opts)
      return data
    end

    # Insert email email
    # 
    # @param storefront_oid null
    # @param email_commseq_email Email email
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailCommseqEmailResponse, Fixnum, Hash)>] EmailCommseqEmailResponse data, response status code and response headers
    def insert_email_email_with_http_info(storefront_oid, email_commseq_email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.insert_email_email ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.insert_email_email" if storefront_oid.nil?
      # verify the required parameter 'email_commseq_email' is set
      fail ArgumentError, "Missing the required parameter 'email_commseq_email' when calling StorefrontApi.insert_email_email" if email_commseq_email.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/emails".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(email_commseq_email)
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailCommseqEmailResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#insert_email_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insert email flow
    # 
    # @param storefront_oid null
    # @param email_flow Email flow
    # @param [Hash] opts the optional parameters
    # @return [EmailFlowResponse]
    def insert_email_flow(storefront_oid, email_flow, opts = {})
      data, _status_code, _headers = insert_email_flow_with_http_info(storefront_oid, email_flow, opts)
      return data
    end

    # Insert email flow
    # 
    # @param storefront_oid null
    # @param email_flow Email flow
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailFlowResponse, Fixnum, Hash)>] EmailFlowResponse data, response status code and response headers
    def insert_email_flow_with_http_info(storefront_oid, email_flow, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.insert_email_flow ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.insert_email_flow" if storefront_oid.nil?
      # verify the required parameter 'email_flow' is set
      fail ArgumentError, "Missing the required parameter 'email_flow' when calling StorefrontApi.insert_email_flow" if email_flow.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/flows".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(email_flow)
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailFlowResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#insert_email_flow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insert email list
    # 
    # @param storefront_oid null
    # @param email_list Email list
    # @param [Hash] opts the optional parameters
    # @return [EmailListResponse]
    def insert_email_list(storefront_oid, email_list, opts = {})
      data, _status_code, _headers = insert_email_list_with_http_info(storefront_oid, email_list, opts)
      return data
    end

    # Insert email list
    # 
    # @param storefront_oid null
    # @param email_list Email list
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailListResponse, Fixnum, Hash)>] EmailListResponse data, response status code and response headers
    def insert_email_list_with_http_info(storefront_oid, email_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.insert_email_list ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.insert_email_list" if storefront_oid.nil?
      # verify the required parameter 'email_list' is set
      fail ArgumentError, "Missing the required parameter 'email_list' when calling StorefrontApi.insert_email_list" if email_list.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/lists".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(email_list)
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#insert_email_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insert email segment
    # 
    # @param storefront_oid null
    # @param email_segment Email segment
    # @param [Hash] opts the optional parameters
    # @return [EmailSegmentResponse]
    def insert_email_segment(storefront_oid, email_segment, opts = {})
      data, _status_code, _headers = insert_email_segment_with_http_info(storefront_oid, email_segment, opts)
      return data
    end

    # Insert email segment
    # 
    # @param storefront_oid null
    # @param email_segment Email segment
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailSegmentResponse, Fixnum, Hash)>] EmailSegmentResponse data, response status code and response headers
    def insert_email_segment_with_http_info(storefront_oid, email_segment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.insert_email_segment ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.insert_email_segment" if storefront_oid.nil?
      # verify the required parameter 'email_segment' is set
      fail ArgumentError, "Missing the required parameter 'email_segment' when calling StorefrontApi.insert_email_segment" if email_segment.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/segments".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(email_segment)
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailSegmentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#insert_email_segment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Prepare download of email segment
    # 
    # @param storefront_oid null
    # @param email_segment_uuid null
    # @param [Hash] opts the optional parameters
    # @return [EmailSegmentDownloadPrepareResponse]
    def prepare_download_email_segment(storefront_oid, email_segment_uuid, opts = {})
      data, _status_code, _headers = prepare_download_email_segment_with_http_info(storefront_oid, email_segment_uuid, opts)
      return data
    end

    # Prepare download of email segment
    # 
    # @param storefront_oid null
    # @param email_segment_uuid null
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailSegmentDownloadPrepareResponse, Fixnum, Hash)>] EmailSegmentDownloadPrepareResponse data, response status code and response headers
    def prepare_download_email_segment_with_http_info(storefront_oid, email_segment_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.prepare_download_email_segment ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.prepare_download_email_segment" if storefront_oid.nil?
      # verify the required parameter 'email_segment_uuid' is set
      fail ArgumentError, "Missing the required parameter 'email_segment_uuid' when calling StorefrontApi.prepare_download_email_segment" if email_segment_uuid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/downloadPrepare".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'email_segment_uuid' + '}', email_segment_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailSegmentDownloadPrepareResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#prepare_download_email_segment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Searches for all matching values
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category null
    # @option opts [String] :matches null
    # @option opts [Integer] :max_hits null
    # @return [LookupResponse]
    def search(opts = {})
      data, _status_code, _headers = search_with_http_info(opts)
      return data
    end

    # Searches for all matching values
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category null
    # @option opts [String] :matches null
    # @option opts [Integer] :max_hits null
    # @return [Array<(LookupResponse, Fixnum, Hash)>] LookupResponse data, response status code and response headers
    def search_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.search ..."
      end
      # resource path
      local_var_path = "/storefront/search".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'category'] = opts[:'category'] if !opts[:'category'].nil?
      query_params[:'matches'] = opts[:'matches'] if !opts[:'matches'].nil?
      query_params[:'max_hits'] = opts[:'max_hits'] if !opts[:'max_hits'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LookupResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search email list customers
    # 
    # @param storefront_oid null
    # @param email_list_uuid null
    # @param [Hash] opts the optional parameters
    # @option opts [String] :starts_with null
    # @return [EmailListCustomersResponse]
    def search_email_list_customers(storefront_oid, email_list_uuid, opts = {})
      data, _status_code, _headers = search_email_list_customers_with_http_info(storefront_oid, email_list_uuid, opts)
      return data
    end

    # Search email list customers
    # 
    # @param storefront_oid null
    # @param email_list_uuid null
    # @param [Hash] opts the optional parameters
    # @option opts [String] :starts_with null
    # @return [Array<(EmailListCustomersResponse, Fixnum, Hash)>] EmailListCustomersResponse data, response status code and response headers
    def search_email_list_customers_with_http_info(storefront_oid, email_list_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.search_email_list_customers ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.search_email_list_customers" if storefront_oid.nil?
      # verify the required parameter 'email_list_uuid' is set
      fail ArgumentError, "Missing the required parameter 'email_list_uuid' when calling StorefrontApi.search_email_list_customers" if email_list_uuid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/search".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'email_list_uuid' + '}', email_list_uuid.to_s)

      # query parameters
      query_params = {}
      query_params[:'startsWith'] = opts[:'starts_with'] if !opts[:'starts_with'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailListCustomersResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#search_email_list_customers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search email segment customers
    # 
    # @param storefront_oid null
    # @param email_segment_uuid null
    # @param [Hash] opts the optional parameters
    # @option opts [String] :starts_with null
    # @return [EmailSegmentCustomersResponse]
    def search_email_segment_customers(storefront_oid, email_segment_uuid, opts = {})
      data, _status_code, _headers = search_email_segment_customers_with_http_info(storefront_oid, email_segment_uuid, opts)
      return data
    end

    # Search email segment customers
    # 
    # @param storefront_oid null
    # @param email_segment_uuid null
    # @param [Hash] opts the optional parameters
    # @option opts [String] :starts_with null
    # @return [Array<(EmailSegmentCustomersResponse, Fixnum, Hash)>] EmailSegmentCustomersResponse data, response status code and response headers
    def search_email_segment_customers_with_http_info(storefront_oid, email_segment_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.search_email_segment_customers ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.search_email_segment_customers" if storefront_oid.nil?
      # verify the required parameter 'email_segment_uuid' is set
      fail ArgumentError, "Missing the required parameter 'email_segment_uuid' when calling StorefrontApi.search_email_segment_customers" if email_segment_uuid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/search".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'email_segment_uuid' + '}', email_segment_uuid.to_s)

      # query parameters
      query_params = {}
      query_params[:'startsWith'] = opts[:'starts_with'] if !opts[:'starts_with'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailSegmentCustomersResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#search_email_segment_customers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start email campaign
    # 
    # @param storefront_oid null
    # @param email_campaign_uuid null
    # @param [Hash] opts the optional parameters
    # @return [BaseResponse]
    def start_email_campaign(storefront_oid, email_campaign_uuid, opts = {})
      data, _status_code, _headers = start_email_campaign_with_http_info(storefront_oid, email_campaign_uuid, opts)
      return data
    end

    # Start email campaign
    # 
    # @param storefront_oid null
    # @param email_campaign_uuid null
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseResponse, Fixnum, Hash)>] BaseResponse data, response status code and response headers
    def start_email_campaign_with_http_info(storefront_oid, email_campaign_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.start_email_campaign ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.start_email_campaign" if storefront_oid.nil?
      # verify the required parameter 'email_campaign_uuid' is set
      fail ArgumentError, "Missing the required parameter 'email_campaign_uuid' when calling StorefrontApi.start_email_campaign" if email_campaign_uuid.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/start".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'email_campaign_uuid' + '}', email_campaign_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BaseResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#start_email_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Subscribe customers to email list
    # 
    # @param storefront_oid null
    # @param email_list_uuid null
    # @param customers Customers
    # @param [Hash] opts the optional parameters
    # @return [EmailListSubscribeResponse]
    def subscribe_to_email_list(storefront_oid, email_list_uuid, customers, opts = {})
      data, _status_code, _headers = subscribe_to_email_list_with_http_info(storefront_oid, email_list_uuid, customers, opts)
      return data
    end

    # Subscribe customers to email list
    # 
    # @param storefront_oid null
    # @param email_list_uuid null
    # @param customers Customers
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailListSubscribeResponse, Fixnum, Hash)>] EmailListSubscribeResponse data, response status code and response headers
    def subscribe_to_email_list_with_http_info(storefront_oid, email_list_uuid, customers, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.subscribe_to_email_list ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.subscribe_to_email_list" if storefront_oid.nil?
      # verify the required parameter 'email_list_uuid' is set
      fail ArgumentError, "Missing the required parameter 'email_list_uuid' when calling StorefrontApi.subscribe_to_email_list" if email_list_uuid.nil?
      # verify the required parameter 'customers' is set
      fail ArgumentError, "Missing the required parameter 'customers' when calling StorefrontApi.subscribe_to_email_list" if customers.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/subscribe".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'email_list_uuid' + '}', email_list_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(customers)
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailListSubscribeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#subscribe_to_email_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update email campaign
    # 
    # @param storefront_oid null
    # @param email_campaign_uuid null
    # @param email_campaign Email campaign
    # @param [Hash] opts the optional parameters
    # @return [EmailCampaignResponse]
    def update_email_campaign(storefront_oid, email_campaign_uuid, email_campaign, opts = {})
      data, _status_code, _headers = update_email_campaign_with_http_info(storefront_oid, email_campaign_uuid, email_campaign, opts)
      return data
    end

    # Update email campaign
    # 
    # @param storefront_oid null
    # @param email_campaign_uuid null
    # @param email_campaign Email campaign
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailCampaignResponse, Fixnum, Hash)>] EmailCampaignResponse data, response status code and response headers
    def update_email_campaign_with_http_info(storefront_oid, email_campaign_uuid, email_campaign, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.update_email_campaign ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.update_email_campaign" if storefront_oid.nil?
      # verify the required parameter 'email_campaign_uuid' is set
      fail ArgumentError, "Missing the required parameter 'email_campaign_uuid' when calling StorefrontApi.update_email_campaign" if email_campaign_uuid.nil?
      # verify the required parameter 'email_campaign' is set
      fail ArgumentError, "Missing the required parameter 'email_campaign' when calling StorefrontApi.update_email_campaign" if email_campaign.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'email_campaign_uuid' + '}', email_campaign_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(email_campaign)
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailCampaignResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#update_email_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update email commseq
    # 
    # @param storefront_oid null
    # @param commseq_uuid null
    # @param email_commseq Email commseq
    # @param [Hash] opts the optional parameters
    # @return [EmailCommseqResponse]
    def update_email_commseq(storefront_oid, commseq_uuid, email_commseq, opts = {})
      data, _status_code, _headers = update_email_commseq_with_http_info(storefront_oid, commseq_uuid, email_commseq, opts)
      return data
    end

    # Update email commseq
    # 
    # @param storefront_oid null
    # @param commseq_uuid null
    # @param email_commseq Email commseq
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailCommseqResponse, Fixnum, Hash)>] EmailCommseqResponse data, response status code and response headers
    def update_email_commseq_with_http_info(storefront_oid, commseq_uuid, email_commseq, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.update_email_commseq ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.update_email_commseq" if storefront_oid.nil?
      # verify the required parameter 'commseq_uuid' is set
      fail ArgumentError, "Missing the required parameter 'commseq_uuid' when calling StorefrontApi.update_email_commseq" if commseq_uuid.nil?
      # verify the required parameter 'email_commseq' is set
      fail ArgumentError, "Missing the required parameter 'email_commseq' when calling StorefrontApi.update_email_commseq" if email_commseq.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'commseq_uuid' + '}', commseq_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(email_commseq)
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailCommseqResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#update_email_commseq\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update email email
    # 
    # @param storefront_oid null
    # @param commseq_email_uuid null
    # @param email_commseq_email Email commseq email
    # @param [Hash] opts the optional parameters
    # @return [EmailCommseqEmailResponse]
    def update_email_email(storefront_oid, commseq_email_uuid, email_commseq_email, opts = {})
      data, _status_code, _headers = update_email_email_with_http_info(storefront_oid, commseq_email_uuid, email_commseq_email, opts)
      return data
    end

    # Update email email
    # 
    # @param storefront_oid null
    # @param commseq_email_uuid null
    # @param email_commseq_email Email commseq email
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailCommseqEmailResponse, Fixnum, Hash)>] EmailCommseqEmailResponse data, response status code and response headers
    def update_email_email_with_http_info(storefront_oid, commseq_email_uuid, email_commseq_email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.update_email_email ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.update_email_email" if storefront_oid.nil?
      # verify the required parameter 'commseq_email_uuid' is set
      fail ArgumentError, "Missing the required parameter 'commseq_email_uuid' when calling StorefrontApi.update_email_email" if commseq_email_uuid.nil?
      # verify the required parameter 'email_commseq_email' is set
      fail ArgumentError, "Missing the required parameter 'email_commseq_email' when calling StorefrontApi.update_email_email" if email_commseq_email.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'commseq_email_uuid' + '}', commseq_email_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(email_commseq_email)
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailCommseqEmailResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#update_email_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update email flow
    # 
    # @param storefront_oid null
    # @param email_flow_uuid null
    # @param email_flow Email flow
    # @param [Hash] opts the optional parameters
    # @return [EmailFlowResponse]
    def update_email_flow(storefront_oid, email_flow_uuid, email_flow, opts = {})
      data, _status_code, _headers = update_email_flow_with_http_info(storefront_oid, email_flow_uuid, email_flow, opts)
      return data
    end

    # Update email flow
    # 
    # @param storefront_oid null
    # @param email_flow_uuid null
    # @param email_flow Email flow
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailFlowResponse, Fixnum, Hash)>] EmailFlowResponse data, response status code and response headers
    def update_email_flow_with_http_info(storefront_oid, email_flow_uuid, email_flow, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.update_email_flow ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.update_email_flow" if storefront_oid.nil?
      # verify the required parameter 'email_flow_uuid' is set
      fail ArgumentError, "Missing the required parameter 'email_flow_uuid' when calling StorefrontApi.update_email_flow" if email_flow_uuid.nil?
      # verify the required parameter 'email_flow' is set
      fail ArgumentError, "Missing the required parameter 'email_flow' when calling StorefrontApi.update_email_flow" if email_flow.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'email_flow_uuid' + '}', email_flow_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(email_flow)
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailFlowResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#update_email_flow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update email list
    # 
    # @param storefront_oid null
    # @param email_list_uuid null
    # @param email_list Email list
    # @param [Hash] opts the optional parameters
    # @return [EmailListResponse]
    def update_email_list(storefront_oid, email_list_uuid, email_list, opts = {})
      data, _status_code, _headers = update_email_list_with_http_info(storefront_oid, email_list_uuid, email_list, opts)
      return data
    end

    # Update email list
    # 
    # @param storefront_oid null
    # @param email_list_uuid null
    # @param email_list Email list
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailListResponse, Fixnum, Hash)>] EmailListResponse data, response status code and response headers
    def update_email_list_with_http_info(storefront_oid, email_list_uuid, email_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.update_email_list ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.update_email_list" if storefront_oid.nil?
      # verify the required parameter 'email_list_uuid' is set
      fail ArgumentError, "Missing the required parameter 'email_list_uuid' when calling StorefrontApi.update_email_list" if email_list_uuid.nil?
      # verify the required parameter 'email_list' is set
      fail ArgumentError, "Missing the required parameter 'email_list' when calling StorefrontApi.update_email_list" if email_list.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'email_list_uuid' + '}', email_list_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(email_list)
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#update_email_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update email segment
    # 
    # @param storefront_oid null
    # @param email_segment_uuid null
    # @param email_segment Email segment
    # @param [Hash] opts the optional parameters
    # @return [EmailSegmentResponse]
    def update_email_segment(storefront_oid, email_segment_uuid, email_segment, opts = {})
      data, _status_code, _headers = update_email_segment_with_http_info(storefront_oid, email_segment_uuid, email_segment, opts)
      return data
    end

    # Update email segment
    # 
    # @param storefront_oid null
    # @param email_segment_uuid null
    # @param email_segment Email segment
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailSegmentResponse, Fixnum, Hash)>] EmailSegmentResponse data, response status code and response headers
    def update_email_segment_with_http_info(storefront_oid, email_segment_uuid, email_segment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.update_email_segment ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.update_email_segment" if storefront_oid.nil?
      # verify the required parameter 'email_segment_uuid' is set
      fail ArgumentError, "Missing the required parameter 'email_segment_uuid' when calling StorefrontApi.update_email_segment" if email_segment_uuid.nil?
      # verify the required parameter 'email_segment' is set
      fail ArgumentError, "Missing the required parameter 'email_segment' when calling StorefrontApi.update_email_segment" if email_segment.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'email_segment_uuid' + '}', email_segment_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(email_segment)
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailSegmentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#update_email_segment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update experiment
    # 
    # @param storefront_oid null
    # @param storefront_experiment_oid null
    # @param experiment Experiment
    # @param [Hash] opts the optional parameters
    # @return [ExperimentResponse]
    def update_experiment(storefront_oid, storefront_experiment_oid, experiment, opts = {})
      data, _status_code, _headers = update_experiment_with_http_info(storefront_oid, storefront_experiment_oid, experiment, opts)
      return data
    end

    # Update experiment
    # 
    # @param storefront_oid null
    # @param storefront_experiment_oid null
    # @param experiment Experiment
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExperimentResponse, Fixnum, Hash)>] ExperimentResponse data, response status code and response headers
    def update_experiment_with_http_info(storefront_oid, storefront_experiment_oid, experiment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StorefrontApi.update_experiment ..."
      end
      # verify the required parameter 'storefront_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_oid' when calling StorefrontApi.update_experiment" if storefront_oid.nil?
      # verify the required parameter 'storefront_experiment_oid' is set
      fail ArgumentError, "Missing the required parameter 'storefront_experiment_oid' when calling StorefrontApi.update_experiment" if storefront_experiment_oid.nil?
      # verify the required parameter 'experiment' is set
      fail ArgumentError, "Missing the required parameter 'experiment' when calling StorefrontApi.update_experiment" if experiment.nil?
      # resource path
      local_var_path = "/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}".sub('{format}','json').sub('{' + 'storefront_oid' + '}', storefront_oid.to_s).sub('{' + 'storefront_experiment_oid' + '}', storefront_experiment_oid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(experiment)
      auth_names = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExperimentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorefrontApi#update_experiment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
