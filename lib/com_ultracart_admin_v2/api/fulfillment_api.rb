=begin
#UltraCart Rest API V2

#This is the next generation UltraCart REST API...

OpenAPI spec version: 2.0.0
Contact: support@ultracart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module UltraCartAdminV2
  class FulfillmentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Acknowledge receipt of orders.
    # Acknowledge receipt of orders so that they are removed from the fulfillment queue.  This method must be called after receiving and order (via webhook) or retrieving (via retrieve orders method). 
    # @param distribution_center_code Distribution center code
    # @param order_ids Orders to acknowledge receipt of (limit 100)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def acknowledge_orders(distribution_center_code, order_ids, opts = {})
      acknowledge_orders_with_http_info(distribution_center_code, order_ids, opts)
      return nil
    end

    # Acknowledge receipt of orders.
    # Acknowledge receipt of orders so that they are removed from the fulfillment queue.  This method must be called after receiving and order (via webhook) or retrieving (via retrieve orders method). 
    # @param distribution_center_code Distribution center code
    # @param order_ids Orders to acknowledge receipt of (limit 100)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def acknowledge_orders_with_http_info(distribution_center_code, order_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FulfillmentApi.acknowledge_orders ..."
      end
      # verify the required parameter 'distribution_center_code' is set
      fail ArgumentError, "Missing the required parameter 'distribution_center_code' when calling FulfillmentApi.acknowledge_orders" if distribution_center_code.nil?
      # verify the required parameter 'order_ids' is set
      fail ArgumentError, "Missing the required parameter 'order_ids' when calling FulfillmentApi.acknowledge_orders" if order_ids.nil?
      # resource path
      local_var_path = "/fulfillment/distribution_centers/{distribution_center_code}/acknowledgements".sub('{format}','json').sub('{' + 'distribution_center_code' + '}', distribution_center_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(order_ids)
      auth_names = ['ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FulfillmentApi#acknowledge_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve orders queued up for this distribution center.
    # Retrieves up to 100 orders that are queued up in this distribution center.  You must acknowledge them before additional new orders will be returned.  The orders that are returned contain only items for this distribution center and are expanded with billing, buysafe, channel_partner, checkout, coupons, customer_profile, edi, gift, gift_certificate, internal, items, payment, shipping, summary, taxes. 
    # @param distribution_center_code Distribution center code
    # @param [Hash] opts the optional parameters
    # @return [OrdersResponse]
    def get_distribution_center_orders(distribution_center_code, opts = {})
      data, _status_code, _headers = get_distribution_center_orders_with_http_info(distribution_center_code, opts)
      return data
    end

    # Retrieve orders queued up for this distribution center.
    # Retrieves up to 100 orders that are queued up in this distribution center.  You must acknowledge them before additional new orders will be returned.  The orders that are returned contain only items for this distribution center and are expanded with billing, buysafe, channel_partner, checkout, coupons, customer_profile, edi, gift, gift_certificate, internal, items, payment, shipping, summary, taxes. 
    # @param distribution_center_code Distribution center code
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrdersResponse, Fixnum, Hash)>] OrdersResponse data, response status code and response headers
    def get_distribution_center_orders_with_http_info(distribution_center_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FulfillmentApi.get_distribution_center_orders ..."
      end
      # verify the required parameter 'distribution_center_code' is set
      fail ArgumentError, "Missing the required parameter 'distribution_center_code' when calling FulfillmentApi.get_distribution_center_orders" if distribution_center_code.nil?
      # resource path
      local_var_path = "/fulfillment/distribution_centers/{distribution_center_code}/orders".sub('{format}','json').sub('{' + 'distribution_center_code' + '}', distribution_center_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrdersResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FulfillmentApi#get_distribution_center_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve distribution centers
    # Retrieves the distribution centers that this user has access to. 
    # @param [Hash] opts the optional parameters
    # @return [DistributionCentersResponse]
    def get_distribution_centers(opts = {})
      data, _status_code, _headers = get_distribution_centers_with_http_info(opts)
      return data
    end

    # Retrieve distribution centers
    # Retrieves the distribution centers that this user has access to. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DistributionCentersResponse, Fixnum, Hash)>] DistributionCentersResponse data, response status code and response headers
    def get_distribution_centers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FulfillmentApi.get_distribution_centers ..."
      end
      # resource path
      local_var_path = "/fulfillment/distribution_centers".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DistributionCentersResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FulfillmentApi#get_distribution_centers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Mark orders as shipped
    # Store the tracking information and mark the order shipped for this distribution center. 
    # @param distribution_center_code Distribution center code
    # @param shipments Orders to mark shipped
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def ship_orders(distribution_center_code, shipments, opts = {})
      ship_orders_with_http_info(distribution_center_code, shipments, opts)
      return nil
    end

    # Mark orders as shipped
    # Store the tracking information and mark the order shipped for this distribution center. 
    # @param distribution_center_code Distribution center code
    # @param shipments Orders to mark shipped
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def ship_orders_with_http_info(distribution_center_code, shipments, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FulfillmentApi.ship_orders ..."
      end
      # verify the required parameter 'distribution_center_code' is set
      fail ArgumentError, "Missing the required parameter 'distribution_center_code' when calling FulfillmentApi.ship_orders" if distribution_center_code.nil?
      # verify the required parameter 'shipments' is set
      fail ArgumentError, "Missing the required parameter 'shipments' when calling FulfillmentApi.ship_orders" if shipments.nil?
      # resource path
      local_var_path = "/fulfillment/distribution_centers/{distribution_center_code}/shipments".sub('{format}','json').sub('{' + 'distribution_center_code' + '}', distribution_center_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(shipments)
      auth_names = ['ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FulfillmentApi#ship_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update inventory
    # Update the inventory for items associated with this distribution center 
    # @param distribution_center_code Distribution center code
    # @param inventories Inventory updates (limit 500)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_inventory(distribution_center_code, inventories, opts = {})
      update_inventory_with_http_info(distribution_center_code, inventories, opts)
      return nil
    end

    # Update inventory
    # Update the inventory for items associated with this distribution center 
    # @param distribution_center_code Distribution center code
    # @param inventories Inventory updates (limit 500)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_inventory_with_http_info(distribution_center_code, inventories, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FulfillmentApi.update_inventory ..."
      end
      # verify the required parameter 'distribution_center_code' is set
      fail ArgumentError, "Missing the required parameter 'distribution_center_code' when calling FulfillmentApi.update_inventory" if distribution_center_code.nil?
      # verify the required parameter 'inventories' is set
      fail ArgumentError, "Missing the required parameter 'inventories' when calling FulfillmentApi.update_inventory" if inventories.nil?
      # resource path
      local_var_path = "/fulfillment/distribution_centers/{distribution_center_code}/inventory".sub('{format}','json').sub('{' + 'distribution_center_code' + '}', distribution_center_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(inventories)
      auth_names = ['ultraCartOauth', 'ultraCartSimpleApiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FulfillmentApi#update_inventory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
