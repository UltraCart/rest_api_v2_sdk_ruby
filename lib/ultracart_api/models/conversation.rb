=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

OpenAPI spec version: 2.0.0
Contact: support@ultracart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'date'

module UltracartClient
  class Conversation
    # The base language iso code for the StoreFront that everything is translated into
    attr_accessor :base_language_iso_code

    attr_accessor :closed

    attr_accessor :conversation_arn

    attr_accessor :conversation_uuid

    # Date/time of the first customer message that is unresponded to.
    attr_accessor :customer_first_message_unresponded_to_dts

    attr_accessor :last_conversation_message_body

    attr_accessor :last_conversation_participant_arn

    attr_accessor :last_conversation_participant_name

    # Last interactive message date/time
    attr_accessor :last_interactive_message_dts

    # Last message date/time
    attr_accessor :last_message_dts

    # The communication medium of the customer.
    attr_accessor :medium

    attr_accessor :merchant_id

    attr_accessor :message_count

    attr_accessor :messages

    attr_accessor :participants

    # Start of the conversation date/time
    attr_accessor :start_dts

    attr_accessor :unread_messages

    attr_accessor :visible

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'base_language_iso_code' => :'base_language_iso_code',
        :'closed' => :'closed',
        :'conversation_arn' => :'conversation_arn',
        :'conversation_uuid' => :'conversation_uuid',
        :'customer_first_message_unresponded_to_dts' => :'customer_first_message_unresponded_to_dts',
        :'last_conversation_message_body' => :'last_conversation_message_body',
        :'last_conversation_participant_arn' => :'last_conversation_participant_arn',
        :'last_conversation_participant_name' => :'last_conversation_participant_name',
        :'last_interactive_message_dts' => :'last_interactive_message_dts',
        :'last_message_dts' => :'last_message_dts',
        :'medium' => :'medium',
        :'merchant_id' => :'merchant_id',
        :'message_count' => :'message_count',
        :'messages' => :'messages',
        :'participants' => :'participants',
        :'start_dts' => :'start_dts',
        :'unread_messages' => :'unread_messages',
        :'visible' => :'visible'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'base_language_iso_code' => :'String',
        :'closed' => :'BOOLEAN',
        :'conversation_arn' => :'String',
        :'conversation_uuid' => :'String',
        :'customer_first_message_unresponded_to_dts' => :'String',
        :'last_conversation_message_body' => :'String',
        :'last_conversation_participant_arn' => :'String',
        :'last_conversation_participant_name' => :'String',
        :'last_interactive_message_dts' => :'String',
        :'last_message_dts' => :'String',
        :'medium' => :'String',
        :'merchant_id' => :'String',
        :'message_count' => :'Integer',
        :'messages' => :'Array<ConversationMessage>',
        :'participants' => :'Array<ConversationParticipant>',
        :'start_dts' => :'String',
        :'unread_messages' => :'BOOLEAN',
        :'visible' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'base_language_iso_code')
        self.base_language_iso_code = attributes[:'base_language_iso_code']
      end

      if attributes.has_key?(:'closed')
        self.closed = attributes[:'closed']
      end

      if attributes.has_key?(:'conversation_arn')
        self.conversation_arn = attributes[:'conversation_arn']
      end

      if attributes.has_key?(:'conversation_uuid')
        self.conversation_uuid = attributes[:'conversation_uuid']
      end

      if attributes.has_key?(:'customer_first_message_unresponded_to_dts')
        self.customer_first_message_unresponded_to_dts = attributes[:'customer_first_message_unresponded_to_dts']
      end

      if attributes.has_key?(:'last_conversation_message_body')
        self.last_conversation_message_body = attributes[:'last_conversation_message_body']
      end

      if attributes.has_key?(:'last_conversation_participant_arn')
        self.last_conversation_participant_arn = attributes[:'last_conversation_participant_arn']
      end

      if attributes.has_key?(:'last_conversation_participant_name')
        self.last_conversation_participant_name = attributes[:'last_conversation_participant_name']
      end

      if attributes.has_key?(:'last_interactive_message_dts')
        self.last_interactive_message_dts = attributes[:'last_interactive_message_dts']
      end

      if attributes.has_key?(:'last_message_dts')
        self.last_message_dts = attributes[:'last_message_dts']
      end

      if attributes.has_key?(:'medium')
        self.medium = attributes[:'medium']
      end

      if attributes.has_key?(:'merchant_id')
        self.merchant_id = attributes[:'merchant_id']
      end

      if attributes.has_key?(:'message_count')
        self.message_count = attributes[:'message_count']
      end

      if attributes.has_key?(:'messages')
        if (value = attributes[:'messages']).is_a?(Array)
          self.messages = value
        end
      end

      if attributes.has_key?(:'participants')
        if (value = attributes[:'participants']).is_a?(Array)
          self.participants = value
        end
      end

      if attributes.has_key?(:'start_dts')
        self.start_dts = attributes[:'start_dts']
      end

      if attributes.has_key?(:'unread_messages')
        self.unread_messages = attributes[:'unread_messages']
      end

      if attributes.has_key?(:'visible')
        self.visible = attributes[:'visible']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      medium_validator = EnumAttributeValidator.new('String', ['sms', 'websocket'])
      return false unless medium_validator.valid?(@medium)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] medium Object to be assigned
    def medium=(medium)
      validator = EnumAttributeValidator.new('String', ['sms', 'websocket'])
      unless validator.valid?(medium)
        fail ArgumentError, 'invalid value for "medium", must be one of #{validator.allowable_values}.'
      end
      @medium = medium
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          base_language_iso_code == o.base_language_iso_code &&
          closed == o.closed &&
          conversation_arn == o.conversation_arn &&
          conversation_uuid == o.conversation_uuid &&
          customer_first_message_unresponded_to_dts == o.customer_first_message_unresponded_to_dts &&
          last_conversation_message_body == o.last_conversation_message_body &&
          last_conversation_participant_arn == o.last_conversation_participant_arn &&
          last_conversation_participant_name == o.last_conversation_participant_name &&
          last_interactive_message_dts == o.last_interactive_message_dts &&
          last_message_dts == o.last_message_dts &&
          medium == o.medium &&
          merchant_id == o.merchant_id &&
          message_count == o.message_count &&
          messages == o.messages &&
          participants == o.participants &&
          start_dts == o.start_dts &&
          unread_messages == o.unread_messages &&
          visible == o.visible
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [base_language_iso_code, closed, conversation_arn, conversation_uuid, customer_first_message_unresponded_to_dts, last_conversation_message_body, last_conversation_participant_arn, last_conversation_participant_name, last_interactive_message_dts, last_message_dts, medium, merchant_id, message_count, messages, participants, start_dts, unread_messages, visible].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = UltracartClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
