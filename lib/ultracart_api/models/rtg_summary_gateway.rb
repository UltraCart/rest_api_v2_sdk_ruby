=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

OpenAPI spec version: 2.0.0
Contact: support@ultracart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'date'

module UltracartClient
  class RtgSummaryGateway
    attr_accessor :cascade_code

    attr_accessor :code

    attr_accessor :delay_auto_orders

    attr_accessor :name

    attr_accessor :reserve_percentage

    # An optional date specifying the date up to which your gateway has released all reserve funds.  This aids in profitability reporting.
    attr_accessor :reserves_released_through

    attr_accessor :rotating_transaction_gateway_oid

    attr_accessor :show_ultracart_payments_verification

    attr_accessor :show_ultracart_payments_verified

    attr_accessor :status

    attr_accessor :supports_auth

    attr_accessor :supports_refund

    attr_accessor :third_party

    attr_accessor :traffic_percentage

    attr_accessor :warning

    attr_accessor :wepay_account_update_uri

    attr_accessor :wepay_console_hostname

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cascade_code' => :'cascade_code',
        :'code' => :'code',
        :'delay_auto_orders' => :'delay_auto_orders',
        :'name' => :'name',
        :'reserve_percentage' => :'reserve_percentage',
        :'reserves_released_through' => :'reserves_released_through',
        :'rotating_transaction_gateway_oid' => :'rotating_transaction_gateway_oid',
        :'show_ultracart_payments_verification' => :'show_ultracart_payments_verification',
        :'show_ultracart_payments_verified' => :'show_ultracart_payments_verified',
        :'status' => :'status',
        :'supports_auth' => :'supports_auth',
        :'supports_refund' => :'supports_refund',
        :'third_party' => :'third_party',
        :'traffic_percentage' => :'traffic_percentage',
        :'warning' => :'warning',
        :'wepay_account_update_uri' => :'wepay_account_update_uri',
        :'wepay_console_hostname' => :'wepay_console_hostname'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'cascade_code' => :'String',
        :'code' => :'String',
        :'delay_auto_orders' => :'String',
        :'name' => :'String',
        :'reserve_percentage' => :'Float',
        :'reserves_released_through' => :'String',
        :'rotating_transaction_gateway_oid' => :'Integer',
        :'show_ultracart_payments_verification' => :'BOOLEAN',
        :'show_ultracart_payments_verified' => :'BOOLEAN',
        :'status' => :'String',
        :'supports_auth' => :'String',
        :'supports_refund' => :'String',
        :'third_party' => :'String',
        :'traffic_percentage' => :'Float',
        :'warning' => :'String',
        :'wepay_account_update_uri' => :'String',
        :'wepay_console_hostname' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'cascade_code')
        self.cascade_code = attributes[:'cascade_code']
      end

      if attributes.has_key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.has_key?(:'delay_auto_orders')
        self.delay_auto_orders = attributes[:'delay_auto_orders']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'reserve_percentage')
        self.reserve_percentage = attributes[:'reserve_percentage']
      end

      if attributes.has_key?(:'reserves_released_through')
        self.reserves_released_through = attributes[:'reserves_released_through']
      end

      if attributes.has_key?(:'rotating_transaction_gateway_oid')
        self.rotating_transaction_gateway_oid = attributes[:'rotating_transaction_gateway_oid']
      end

      if attributes.has_key?(:'show_ultracart_payments_verification')
        self.show_ultracart_payments_verification = attributes[:'show_ultracart_payments_verification']
      end

      if attributes.has_key?(:'show_ultracart_payments_verified')
        self.show_ultracart_payments_verified = attributes[:'show_ultracart_payments_verified']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'supports_auth')
        self.supports_auth = attributes[:'supports_auth']
      end

      if attributes.has_key?(:'supports_refund')
        self.supports_refund = attributes[:'supports_refund']
      end

      if attributes.has_key?(:'third_party')
        self.third_party = attributes[:'third_party']
      end

      if attributes.has_key?(:'traffic_percentage')
        self.traffic_percentage = attributes[:'traffic_percentage']
      end

      if attributes.has_key?(:'warning')
        self.warning = attributes[:'warning']
      end

      if attributes.has_key?(:'wepay_account_update_uri')
        self.wepay_account_update_uri = attributes[:'wepay_account_update_uri']
      end

      if attributes.has_key?(:'wepay_console_hostname')
        self.wepay_console_hostname = attributes[:'wepay_console_hostname']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cascade_code == o.cascade_code &&
          code == o.code &&
          delay_auto_orders == o.delay_auto_orders &&
          name == o.name &&
          reserve_percentage == o.reserve_percentage &&
          reserves_released_through == o.reserves_released_through &&
          rotating_transaction_gateway_oid == o.rotating_transaction_gateway_oid &&
          show_ultracart_payments_verification == o.show_ultracart_payments_verification &&
          show_ultracart_payments_verified == o.show_ultracart_payments_verified &&
          status == o.status &&
          supports_auth == o.supports_auth &&
          supports_refund == o.supports_refund &&
          third_party == o.third_party &&
          traffic_percentage == o.traffic_percentage &&
          warning == o.warning &&
          wepay_account_update_uri == o.wepay_account_update_uri &&
          wepay_console_hostname == o.wepay_console_hostname
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [cascade_code, code, delay_auto_orders, name, reserve_percentage, reserves_released_through, rotating_transaction_gateway_oid, show_ultracart_payments_verification, show_ultracart_payments_verified, status, supports_auth, supports_refund, third_party, traffic_percentage, warning, wepay_account_update_uri, wepay_console_hostname].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = UltracartClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
