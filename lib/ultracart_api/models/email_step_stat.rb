=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

OpenAPI spec version: 2.0.0
Contact: support@ultracart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'date'

module UltracartClient
  class EmailStepStat
    # conversion count (left/default side)
    attr_accessor :left_conversion_count

    # conversion count formatted (left/default side)
    attr_accessor :left_conversion_count_formatted

    # customer count (left/default side)
    attr_accessor :left_customer_count

    # customer count formatted (left/default side)
    attr_accessor :left_customer_count_formatted

    # order count (left/default side)
    attr_accessor :left_order_count

    # order count formatted (left/default side)
    attr_accessor :left_order_count_formatted

    # profit (left/default side)
    attr_accessor :left_profit

    # profit formatted (left/default side)
    attr_accessor :left_profit_formatted

    # revenue (left/default side)
    attr_accessor :left_revenue

    # revenue formatted (left/default side)
    attr_accessor :left_revenue_formatted

    # conversion count (right side)
    attr_accessor :right_conversion_count

    # conversion count formatted (right side)
    attr_accessor :right_conversion_count_formatted

    # customer count (right side)
    attr_accessor :right_customer_count

    # customer count formatted (right side)
    attr_accessor :right_customer_count_formatted

    # order count (right side)
    attr_accessor :right_order_count

    # order count formatted (right side)
    attr_accessor :right_order_count_formatted

    # profit (right side)
    attr_accessor :right_profit

    # profit formatted (right side)
    attr_accessor :right_profit_formatted

    # revenue (right side)
    attr_accessor :right_revenue

    # revenue formatted (right side)
    attr_accessor :right_revenue_formatted

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'left_conversion_count' => :'left_conversion_count',
        :'left_conversion_count_formatted' => :'left_conversion_count_formatted',
        :'left_customer_count' => :'left_customer_count',
        :'left_customer_count_formatted' => :'left_customer_count_formatted',
        :'left_order_count' => :'left_order_count',
        :'left_order_count_formatted' => :'left_order_count_formatted',
        :'left_profit' => :'left_profit',
        :'left_profit_formatted' => :'left_profit_formatted',
        :'left_revenue' => :'left_revenue',
        :'left_revenue_formatted' => :'left_revenue_formatted',
        :'right_conversion_count' => :'right_conversion_count',
        :'right_conversion_count_formatted' => :'right_conversion_count_formatted',
        :'right_customer_count' => :'right_customer_count',
        :'right_customer_count_formatted' => :'right_customer_count_formatted',
        :'right_order_count' => :'right_order_count',
        :'right_order_count_formatted' => :'right_order_count_formatted',
        :'right_profit' => :'right_profit',
        :'right_profit_formatted' => :'right_profit_formatted',
        :'right_revenue' => :'right_revenue',
        :'right_revenue_formatted' => :'right_revenue_formatted'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'left_conversion_count' => :'Integer',
        :'left_conversion_count_formatted' => :'String',
        :'left_customer_count' => :'Integer',
        :'left_customer_count_formatted' => :'String',
        :'left_order_count' => :'Integer',
        :'left_order_count_formatted' => :'String',
        :'left_profit' => :'Float',
        :'left_profit_formatted' => :'String',
        :'left_revenue' => :'Float',
        :'left_revenue_formatted' => :'String',
        :'right_conversion_count' => :'Integer',
        :'right_conversion_count_formatted' => :'String',
        :'right_customer_count' => :'Integer',
        :'right_customer_count_formatted' => :'String',
        :'right_order_count' => :'Integer',
        :'right_order_count_formatted' => :'String',
        :'right_profit' => :'Float',
        :'right_profit_formatted' => :'String',
        :'right_revenue' => :'Float',
        :'right_revenue_formatted' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'left_conversion_count')
        self.left_conversion_count = attributes[:'left_conversion_count']
      end

      if attributes.has_key?(:'left_conversion_count_formatted')
        self.left_conversion_count_formatted = attributes[:'left_conversion_count_formatted']
      end

      if attributes.has_key?(:'left_customer_count')
        self.left_customer_count = attributes[:'left_customer_count']
      end

      if attributes.has_key?(:'left_customer_count_formatted')
        self.left_customer_count_formatted = attributes[:'left_customer_count_formatted']
      end

      if attributes.has_key?(:'left_order_count')
        self.left_order_count = attributes[:'left_order_count']
      end

      if attributes.has_key?(:'left_order_count_formatted')
        self.left_order_count_formatted = attributes[:'left_order_count_formatted']
      end

      if attributes.has_key?(:'left_profit')
        self.left_profit = attributes[:'left_profit']
      end

      if attributes.has_key?(:'left_profit_formatted')
        self.left_profit_formatted = attributes[:'left_profit_formatted']
      end

      if attributes.has_key?(:'left_revenue')
        self.left_revenue = attributes[:'left_revenue']
      end

      if attributes.has_key?(:'left_revenue_formatted')
        self.left_revenue_formatted = attributes[:'left_revenue_formatted']
      end

      if attributes.has_key?(:'right_conversion_count')
        self.right_conversion_count = attributes[:'right_conversion_count']
      end

      if attributes.has_key?(:'right_conversion_count_formatted')
        self.right_conversion_count_formatted = attributes[:'right_conversion_count_formatted']
      end

      if attributes.has_key?(:'right_customer_count')
        self.right_customer_count = attributes[:'right_customer_count']
      end

      if attributes.has_key?(:'right_customer_count_formatted')
        self.right_customer_count_formatted = attributes[:'right_customer_count_formatted']
      end

      if attributes.has_key?(:'right_order_count')
        self.right_order_count = attributes[:'right_order_count']
      end

      if attributes.has_key?(:'right_order_count_formatted')
        self.right_order_count_formatted = attributes[:'right_order_count_formatted']
      end

      if attributes.has_key?(:'right_profit')
        self.right_profit = attributes[:'right_profit']
      end

      if attributes.has_key?(:'right_profit_formatted')
        self.right_profit_formatted = attributes[:'right_profit_formatted']
      end

      if attributes.has_key?(:'right_revenue')
        self.right_revenue = attributes[:'right_revenue']
      end

      if attributes.has_key?(:'right_revenue_formatted')
        self.right_revenue_formatted = attributes[:'right_revenue_formatted']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          left_conversion_count == o.left_conversion_count &&
          left_conversion_count_formatted == o.left_conversion_count_formatted &&
          left_customer_count == o.left_customer_count &&
          left_customer_count_formatted == o.left_customer_count_formatted &&
          left_order_count == o.left_order_count &&
          left_order_count_formatted == o.left_order_count_formatted &&
          left_profit == o.left_profit &&
          left_profit_formatted == o.left_profit_formatted &&
          left_revenue == o.left_revenue &&
          left_revenue_formatted == o.left_revenue_formatted &&
          right_conversion_count == o.right_conversion_count &&
          right_conversion_count_formatted == o.right_conversion_count_formatted &&
          right_customer_count == o.right_customer_count &&
          right_customer_count_formatted == o.right_customer_count_formatted &&
          right_order_count == o.right_order_count &&
          right_order_count_formatted == o.right_order_count_formatted &&
          right_profit == o.right_profit &&
          right_profit_formatted == o.right_profit_formatted &&
          right_revenue == o.right_revenue &&
          right_revenue_formatted == o.right_revenue_formatted
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [left_conversion_count, left_conversion_count_formatted, left_customer_count, left_customer_count_formatted, left_order_count, left_order_count_formatted, left_profit, left_profit_formatted, left_revenue, left_revenue_formatted, right_conversion_count, right_conversion_count_formatted, right_customer_count, right_customer_count_formatted, right_order_count, right_order_count_formatted, right_profit, right_profit_formatted, right_revenue, right_revenue_formatted].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = UltracartClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
