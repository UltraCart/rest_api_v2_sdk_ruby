=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

The version of the OpenAPI document: 2.0.0
Contact: support@ultracart.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1-SNAPSHOT

=end

require 'date'
require 'time'

module UltracartClient
  class AvalaraConfig
    # Avalara account ID
    attr_accessor :account_id

    # True if Avalara is active for this merchant
    attr_accessor :active

    # Unique identifier for this avalara config object
    attr_accessor :avalara_oid

    # Avalara company ID
    attr_accessor :company_id

    # True if this Avalara configuration is set to enable tax valuation by UPC
    attr_accessor :enable_upc

    # True if this Avalara configuration is to estimate taxes only and not report placed orders to Avalara
    attr_accessor :estimate_only

    # Optional customer code for customers without profiles, defaults to GuestCustomer
    attr_accessor :guest_customer_code

    # Date/time of the connection test to Avalara
    attr_accessor :last_test_dts

    # Avalara license key
    attr_accessor :license_key

    # True if this Avalara instance is pointed at the Avalara Sandbox
    attr_accessor :sandbox

    # Send test orders through to Avalara.  The default is to not transmit test orders to Avalara.
    attr_accessor :send_test_orders

    # Avalara service URL
    attr_accessor :service_url

    # Test results of the last connection test to Avalara
    attr_accessor :test_results

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'account_id' => :'account_id',
        :'active' => :'active',
        :'avalara_oid' => :'avalara_oid',
        :'company_id' => :'company_id',
        :'enable_upc' => :'enable_upc',
        :'estimate_only' => :'estimate_only',
        :'guest_customer_code' => :'guest_customer_code',
        :'last_test_dts' => :'last_test_dts',
        :'license_key' => :'license_key',
        :'sandbox' => :'sandbox',
        :'send_test_orders' => :'send_test_orders',
        :'service_url' => :'service_url',
        :'test_results' => :'test_results'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'account_id' => :'String',
        :'active' => :'Boolean',
        :'avalara_oid' => :'Integer',
        :'company_id' => :'String',
        :'enable_upc' => :'Boolean',
        :'estimate_only' => :'Boolean',
        :'guest_customer_code' => :'String',
        :'last_test_dts' => :'String',
        :'license_key' => :'String',
        :'sandbox' => :'Boolean',
        :'send_test_orders' => :'Boolean',
        :'service_url' => :'String',
        :'test_results' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `UltracartClient::AvalaraConfig` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `UltracartClient::AvalaraConfig`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'account_id')
        self.account_id = attributes[:'account_id']
      end

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      end

      if attributes.key?(:'avalara_oid')
        self.avalara_oid = attributes[:'avalara_oid']
      end

      if attributes.key?(:'company_id')
        self.company_id = attributes[:'company_id']
      end

      if attributes.key?(:'enable_upc')
        self.enable_upc = attributes[:'enable_upc']
      end

      if attributes.key?(:'estimate_only')
        self.estimate_only = attributes[:'estimate_only']
      end

      if attributes.key?(:'guest_customer_code')
        self.guest_customer_code = attributes[:'guest_customer_code']
      end

      if attributes.key?(:'last_test_dts')
        self.last_test_dts = attributes[:'last_test_dts']
      end

      if attributes.key?(:'license_key')
        self.license_key = attributes[:'license_key']
      end

      if attributes.key?(:'sandbox')
        self.sandbox = attributes[:'sandbox']
      end

      if attributes.key?(:'send_test_orders')
        self.send_test_orders = attributes[:'send_test_orders']
      end

      if attributes.key?(:'service_url')
        self.service_url = attributes[:'service_url']
      end

      if attributes.key?(:'test_results')
        self.test_results = attributes[:'test_results']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account_id == o.account_id &&
          active == o.active &&
          avalara_oid == o.avalara_oid &&
          company_id == o.company_id &&
          enable_upc == o.enable_upc &&
          estimate_only == o.estimate_only &&
          guest_customer_code == o.guest_customer_code &&
          last_test_dts == o.last_test_dts &&
          license_key == o.license_key &&
          sandbox == o.sandbox &&
          send_test_orders == o.send_test_orders &&
          service_url == o.service_url &&
          test_results == o.test_results
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [account_id, active, avalara_oid, company_id, enable_upc, estimate_only, guest_customer_code, last_test_dts, license_key, sandbox, send_test_orders, service_url, test_results].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = UltracartClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
