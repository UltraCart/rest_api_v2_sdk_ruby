=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

OpenAPI spec version: 2.0.0
Contact: support@ultracart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'date'

module UltracartClient
  class ScreenRecordingFilterValues
    attr_accessor :geolocation_countries

    attr_accessor :geolocation_states

    attr_accessor :max_values

    attr_accessor :page_views

    attr_accessor :time_on_site_max

    attr_accessor :time_on_site_min

    attr_accessor :urls

    attr_accessor :user_agent_device_names

    attr_accessor :user_agent_device_os_names

    attr_accessor :user_agent_device_os_versions

    attr_accessor :user_agent_names

    attr_accessor :user_agent_originals

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'geolocation_countries' => :'geolocation_countries',
        :'geolocation_states' => :'geolocation_states',
        :'max_values' => :'max_values',
        :'page_views' => :'page_views',
        :'time_on_site_max' => :'time_on_site_max',
        :'time_on_site_min' => :'time_on_site_min',
        :'urls' => :'urls',
        :'user_agent_device_names' => :'user_agent_device_names',
        :'user_agent_device_os_names' => :'user_agent_device_os_names',
        :'user_agent_device_os_versions' => :'user_agent_device_os_versions',
        :'user_agent_names' => :'user_agent_names',
        :'user_agent_originals' => :'user_agent_originals'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'geolocation_countries' => :'Array<String>',
        :'geolocation_states' => :'Array<String>',
        :'max_values' => :'Integer',
        :'page_views' => :'Array<ScreenRecordingFilterValuesPageView>',
        :'time_on_site_max' => :'Integer',
        :'time_on_site_min' => :'Integer',
        :'urls' => :'Array<String>',
        :'user_agent_device_names' => :'Array<String>',
        :'user_agent_device_os_names' => :'Array<String>',
        :'user_agent_device_os_versions' => :'Array<String>',
        :'user_agent_names' => :'Array<String>',
        :'user_agent_originals' => :'Array<String>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'geolocation_countries')
        if (value = attributes[:'geolocation_countries']).is_a?(Array)
          self.geolocation_countries = value
        end
      end

      if attributes.has_key?(:'geolocation_states')
        if (value = attributes[:'geolocation_states']).is_a?(Array)
          self.geolocation_states = value
        end
      end

      if attributes.has_key?(:'max_values')
        self.max_values = attributes[:'max_values']
      end

      if attributes.has_key?(:'page_views')
        if (value = attributes[:'page_views']).is_a?(Array)
          self.page_views = value
        end
      end

      if attributes.has_key?(:'time_on_site_max')
        self.time_on_site_max = attributes[:'time_on_site_max']
      end

      if attributes.has_key?(:'time_on_site_min')
        self.time_on_site_min = attributes[:'time_on_site_min']
      end

      if attributes.has_key?(:'urls')
        if (value = attributes[:'urls']).is_a?(Array)
          self.urls = value
        end
      end

      if attributes.has_key?(:'user_agent_device_names')
        if (value = attributes[:'user_agent_device_names']).is_a?(Array)
          self.user_agent_device_names = value
        end
      end

      if attributes.has_key?(:'user_agent_device_os_names')
        if (value = attributes[:'user_agent_device_os_names']).is_a?(Array)
          self.user_agent_device_os_names = value
        end
      end

      if attributes.has_key?(:'user_agent_device_os_versions')
        if (value = attributes[:'user_agent_device_os_versions']).is_a?(Array)
          self.user_agent_device_os_versions = value
        end
      end

      if attributes.has_key?(:'user_agent_names')
        if (value = attributes[:'user_agent_names']).is_a?(Array)
          self.user_agent_names = value
        end
      end

      if attributes.has_key?(:'user_agent_originals')
        if (value = attributes[:'user_agent_originals']).is_a?(Array)
          self.user_agent_originals = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          geolocation_countries == o.geolocation_countries &&
          geolocation_states == o.geolocation_states &&
          max_values == o.max_values &&
          page_views == o.page_views &&
          time_on_site_max == o.time_on_site_max &&
          time_on_site_min == o.time_on_site_min &&
          urls == o.urls &&
          user_agent_device_names == o.user_agent_device_names &&
          user_agent_device_os_names == o.user_agent_device_os_names &&
          user_agent_device_os_versions == o.user_agent_device_os_versions &&
          user_agent_names == o.user_agent_names &&
          user_agent_originals == o.user_agent_originals
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [geolocation_countries, geolocation_states, max_values, page_views, time_on_site_max, time_on_site_min, urls, user_agent_device_names, user_agent_device_os_names, user_agent_device_os_versions, user_agent_names, user_agent_originals].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = UltracartClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
