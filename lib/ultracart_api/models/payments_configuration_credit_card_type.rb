=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

OpenAPI spec version: 2.0.0
Contact: support@ultracart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'date'

module UltracartClient
  class PaymentsConfigurationCreditCardType
    # Optional field used for Quickbooks integrations to match this credit card with the corresponding payment type in Quickbooks
    attr_accessor :accounting_code

    # Internally used icon information for this card type
    attr_accessor :card_type_icon

    # Credit card type
    attr_accessor :credit_card

    # The name of the account to deposit funds
    attr_accessor :deposit_to_account

    # If true, this card type will be accepted during checkout
    attr_accessor :enabled

    # Optional additional fee applied to order for this card
    attr_accessor :processing_fee

    # Optional additional fee applied to order for this card
    attr_accessor :processing_percentage

    attr_accessor :restrictions

    # Optional field. If integrated with Quickbooks, this code will be used when informing Quickbooks about any surcharges applied to orders
    attr_accessor :surcharge_accounting_code

    # An optional additional fee to charge the customer for using this card.
    attr_accessor :transaction_fee

    # An optional transaction percentage to charge the customer for using this card
    attr_accessor :transaction_percentage

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'accounting_code' => :'accounting_code',
        :'card_type_icon' => :'card_type_icon',
        :'credit_card' => :'credit_card',
        :'deposit_to_account' => :'deposit_to_account',
        :'enabled' => :'enabled',
        :'processing_fee' => :'processing_fee',
        :'processing_percentage' => :'processing_percentage',
        :'restrictions' => :'restrictions',
        :'surcharge_accounting_code' => :'surcharge_accounting_code',
        :'transaction_fee' => :'transaction_fee',
        :'transaction_percentage' => :'transaction_percentage'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'accounting_code' => :'String',
        :'card_type_icon' => :'String',
        :'credit_card' => :'String',
        :'deposit_to_account' => :'String',
        :'enabled' => :'BOOLEAN',
        :'processing_fee' => :'Float',
        :'processing_percentage' => :'Float',
        :'restrictions' => :'PaymentsConfigurationRestrictions',
        :'surcharge_accounting_code' => :'String',
        :'transaction_fee' => :'Float',
        :'transaction_percentage' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'accounting_code')
        self.accounting_code = attributes[:'accounting_code']
      end

      if attributes.has_key?(:'card_type_icon')
        self.card_type_icon = attributes[:'card_type_icon']
      end

      if attributes.has_key?(:'credit_card')
        self.credit_card = attributes[:'credit_card']
      end

      if attributes.has_key?(:'deposit_to_account')
        self.deposit_to_account = attributes[:'deposit_to_account']
      end

      if attributes.has_key?(:'enabled')
        self.enabled = attributes[:'enabled']
      end

      if attributes.has_key?(:'processing_fee')
        self.processing_fee = attributes[:'processing_fee']
      end

      if attributes.has_key?(:'processing_percentage')
        self.processing_percentage = attributes[:'processing_percentage']
      end

      if attributes.has_key?(:'restrictions')
        self.restrictions = attributes[:'restrictions']
      end

      if attributes.has_key?(:'surcharge_accounting_code')
        self.surcharge_accounting_code = attributes[:'surcharge_accounting_code']
      end

      if attributes.has_key?(:'transaction_fee')
        self.transaction_fee = attributes[:'transaction_fee']
      end

      if attributes.has_key?(:'transaction_percentage')
        self.transaction_percentage = attributes[:'transaction_percentage']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      credit_card_validator = EnumAttributeValidator.new('String', ['AMEX', 'Diners Club', 'Discover', 'MasterCard', 'JCB', 'VISA'])
      return false unless credit_card_validator.valid?(@credit_card)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] credit_card Object to be assigned
    def credit_card=(credit_card)
      validator = EnumAttributeValidator.new('String', ['AMEX', 'Diners Club', 'Discover', 'MasterCard', 'JCB', 'VISA'])
      unless validator.valid?(credit_card)
        fail ArgumentError, 'invalid value for "credit_card", must be one of #{validator.allowable_values}.'
      end
      @credit_card = credit_card
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          accounting_code == o.accounting_code &&
          card_type_icon == o.card_type_icon &&
          credit_card == o.credit_card &&
          deposit_to_account == o.deposit_to_account &&
          enabled == o.enabled &&
          processing_fee == o.processing_fee &&
          processing_percentage == o.processing_percentage &&
          restrictions == o.restrictions &&
          surcharge_accounting_code == o.surcharge_accounting_code &&
          transaction_fee == o.transaction_fee &&
          transaction_percentage == o.transaction_percentage
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [accounting_code, card_type_icon, credit_card, deposit_to_account, enabled, processing_fee, processing_percentage, restrictions, surcharge_accounting_code, transaction_fee, transaction_percentage].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = UltracartClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
