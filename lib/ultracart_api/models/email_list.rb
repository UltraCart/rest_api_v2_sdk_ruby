=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

The version of the OpenAPI document: 2.0.0
Contact: support@ultracart.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1-SNAPSHOT

=end

require 'date'
require 'time'

module UltracartClient
  class EmailList
    # True if the current user has the rights to download this list.
    attr_accessor :allow_csv_download

    # Created date
    attr_accessor :created_dts

    # True if this campaign was deleted
    attr_accessor :deleted

    # Email list UUID
    attr_accessor :email_list_uuid

    # List/Segment folder UUID
    attr_accessor :esp_list_segment_folder_uuid

    # Count of members in this list
    attr_accessor :member_count

    # Merchant ID
    attr_accessor :merchant_id

    # Name of email list
    attr_accessor :name

    # Description of list shown to customer.
    attr_accessor :public_description

    # True if this list is public
    attr_accessor :public_list

    # Storefront oid
    attr_accessor :storefront_oid

    # Details on the flows or campaigns that use this list.
    attr_accessor :used_by

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'allow_csv_download' => :'allow_csv_download',
        :'created_dts' => :'created_dts',
        :'deleted' => :'deleted',
        :'email_list_uuid' => :'email_list_uuid',
        :'esp_list_segment_folder_uuid' => :'esp_list_segment_folder_uuid',
        :'member_count' => :'member_count',
        :'merchant_id' => :'merchant_id',
        :'name' => :'name',
        :'public_description' => :'public_description',
        :'public_list' => :'public_list',
        :'storefront_oid' => :'storefront_oid',
        :'used_by' => :'used_by'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'allow_csv_download' => :'Boolean',
        :'created_dts' => :'String',
        :'deleted' => :'Boolean',
        :'email_list_uuid' => :'String',
        :'esp_list_segment_folder_uuid' => :'String',
        :'member_count' => :'Integer',
        :'merchant_id' => :'String',
        :'name' => :'String',
        :'public_description' => :'String',
        :'public_list' => :'Boolean',
        :'storefront_oid' => :'Integer',
        :'used_by' => :'Array<EmailListSegmentUsedBy>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `UltracartClient::EmailList` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `UltracartClient::EmailList`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'allow_csv_download')
        self.allow_csv_download = attributes[:'allow_csv_download']
      end

      if attributes.key?(:'created_dts')
        self.created_dts = attributes[:'created_dts']
      end

      if attributes.key?(:'deleted')
        self.deleted = attributes[:'deleted']
      end

      if attributes.key?(:'email_list_uuid')
        self.email_list_uuid = attributes[:'email_list_uuid']
      end

      if attributes.key?(:'esp_list_segment_folder_uuid')
        self.esp_list_segment_folder_uuid = attributes[:'esp_list_segment_folder_uuid']
      end

      if attributes.key?(:'member_count')
        self.member_count = attributes[:'member_count']
      end

      if attributes.key?(:'merchant_id')
        self.merchant_id = attributes[:'merchant_id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'public_description')
        self.public_description = attributes[:'public_description']
      end

      if attributes.key?(:'public_list')
        self.public_list = attributes[:'public_list']
      end

      if attributes.key?(:'storefront_oid')
        self.storefront_oid = attributes[:'storefront_oid']
      end

      if attributes.key?(:'used_by')
        if (value = attributes[:'used_by']).is_a?(Array)
          self.used_by = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@name.nil? && @name.to_s.length > 250
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 250.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@name.nil? && @name.to_s.length > 250
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if !name.nil? && name.to_s.length > 250
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 250.'
      end

      @name = name
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          allow_csv_download == o.allow_csv_download &&
          created_dts == o.created_dts &&
          deleted == o.deleted &&
          email_list_uuid == o.email_list_uuid &&
          esp_list_segment_folder_uuid == o.esp_list_segment_folder_uuid &&
          member_count == o.member_count &&
          merchant_id == o.merchant_id &&
          name == o.name &&
          public_description == o.public_description &&
          public_list == o.public_list &&
          storefront_oid == o.storefront_oid &&
          used_by == o.used_by
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [allow_csv_download, created_dts, deleted, email_list_uuid, esp_list_segment_folder_uuid, member_count, merchant_id, name, public_description, public_list, storefront_oid, used_by].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = UltracartClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
