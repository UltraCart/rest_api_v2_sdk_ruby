=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

OpenAPI spec version: 2.0.0
Contact: support@ultracart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'date'

module ultracart_client
  class CheckoutHandoffRequest
    attr_accessor :cart

    # If any error happen during the processing on the UltraCart side, the browser will be redirected to your error_return_url with the error passed in this parameter name.
    attr_accessor :error_parameter_name

    # The URL to return the browser to if there are processing errors on the UltraCart side.
    attr_accessor :error_return_url

    # The type of handoff operation to perform
    attr_accessor :operation

    # The maximum amount of revenue that you think the customer could add during a custom upsell after sequence on your checkout.
    attr_accessor :paypal_maximum_upsell_revenue

    # The URl to return the customers browser to after they have completed the PayPal process.
    attr_accessor :paypal_return_url

    # The desired secure host name to perform the handoff on.  This should match the desired StoreFront.
    attr_accessor :secure_host_name

    # The UltraCart Analytics cookie value.  Populate this if you're handing off from a different domain than the checkout.
    attr_accessor :ucacid

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cart' => :'cart',
        :'error_parameter_name' => :'error_parameter_name',
        :'error_return_url' => :'error_return_url',
        :'operation' => :'operation',
        :'paypal_maximum_upsell_revenue' => :'paypal_maximum_upsell_revenue',
        :'paypal_return_url' => :'paypal_return_url',
        :'secure_host_name' => :'secure_host_name',
        :'ucacid' => :'ucacid'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'cart' => :'Cart',
        :'error_parameter_name' => :'String',
        :'error_return_url' => :'String',
        :'operation' => :'String',
        :'paypal_maximum_upsell_revenue' => :'Float',
        :'paypal_return_url' => :'String',
        :'secure_host_name' => :'String',
        :'ucacid' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'cart')
        self.cart = attributes[:'cart']
      end

      if attributes.has_key?(:'error_parameter_name')
        self.error_parameter_name = attributes[:'error_parameter_name']
      end

      if attributes.has_key?(:'error_return_url')
        self.error_return_url = attributes[:'error_return_url']
      end

      if attributes.has_key?(:'operation')
        self.operation = attributes[:'operation']
      end

      if attributes.has_key?(:'paypal_maximum_upsell_revenue')
        self.paypal_maximum_upsell_revenue = attributes[:'paypal_maximum_upsell_revenue']
      end

      if attributes.has_key?(:'paypal_return_url')
        self.paypal_return_url = attributes[:'paypal_return_url']
      end

      if attributes.has_key?(:'secure_host_name')
        self.secure_host_name = attributes[:'secure_host_name']
      end

      if attributes.has_key?(:'ucacid')
        self.ucacid = attributes[:'ucacid']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      operation_validator = EnumAttributeValidator.new('String', ['checkout', 'payPal', 'payPalCredit', 'view', 'affirm', 'sezzle'])
      return false unless operation_validator.valid?(@operation)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] operation Object to be assigned
    def operation=(operation)
      validator = EnumAttributeValidator.new('String', ['checkout', 'payPal', 'payPalCredit', 'view', 'affirm', 'sezzle'])
      unless validator.valid?(operation)
        fail ArgumentError, 'invalid value for "operation", must be one of #{validator.allowable_values}.'
      end
      @operation = operation
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cart == o.cart &&
          error_parameter_name == o.error_parameter_name &&
          error_return_url == o.error_return_url &&
          operation == o.operation &&
          paypal_maximum_upsell_revenue == o.paypal_maximum_upsell_revenue &&
          paypal_return_url == o.paypal_return_url &&
          secure_host_name == o.secure_host_name &&
          ucacid == o.ucacid
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [cart, error_parameter_name, error_return_url, operation, paypal_maximum_upsell_revenue, paypal_return_url, secure_host_name, ucacid].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ultracart_client.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
