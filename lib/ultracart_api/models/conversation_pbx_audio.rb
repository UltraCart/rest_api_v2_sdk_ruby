=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

OpenAPI spec version: 2.0.0
Contact: support@ultracart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'date'

module UltracartClient
  class ConversationPbxAudio
    # Audio S3 Listing Key
    attr_accessor :audio_s3_listing_key

    # Conversation Pbx Audio UUID
    attr_accessor :conversation_pbx_audio_uuid

    # If true, this will be the default hold music
    attr_accessor :default_hold_music

    # Description of this audio
    attr_accessor :description

    # Filename
    attr_accessor :filename

    # Merchant Id
    attr_accessor :merchant_id

    # Mime Type
    attr_accessor :mime_type

    # User Id
    attr_accessor :user_id

    # Version
    attr_accessor :version

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'audio_s3_listing_key' => :'audio_s3_listing_key',
        :'conversation_pbx_audio_uuid' => :'conversation_pbx_audio_uuid',
        :'default_hold_music' => :'default_hold_music',
        :'description' => :'description',
        :'filename' => :'filename',
        :'merchant_id' => :'merchant_id',
        :'mime_type' => :'mime_type',
        :'user_id' => :'user_id',
        :'version' => :'version'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'audio_s3_listing_key' => :'String',
        :'conversation_pbx_audio_uuid' => :'String',
        :'default_hold_music' => :'BOOLEAN',
        :'description' => :'String',
        :'filename' => :'String',
        :'merchant_id' => :'String',
        :'mime_type' => :'String',
        :'user_id' => :'Integer',
        :'version' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'audio_s3_listing_key')
        self.audio_s3_listing_key = attributes[:'audio_s3_listing_key']
      end

      if attributes.has_key?(:'conversation_pbx_audio_uuid')
        self.conversation_pbx_audio_uuid = attributes[:'conversation_pbx_audio_uuid']
      end

      if attributes.has_key?(:'default_hold_music')
        self.default_hold_music = attributes[:'default_hold_music']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'filename')
        self.filename = attributes[:'filename']
      end

      if attributes.has_key?(:'merchant_id')
        self.merchant_id = attributes[:'merchant_id']
      end

      if attributes.has_key?(:'mime_type')
        self.mime_type = attributes[:'mime_type']
      end

      if attributes.has_key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.has_key?(:'version')
        self.version = attributes[:'version']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@audio_s3_listing_key.nil? && @audio_s3_listing_key.to_s.length > 250
        invalid_properties.push('invalid value for "audio_s3_listing_key", the character length must be smaller than or equal to 250.')
      end

      if !@conversation_pbx_audio_uuid.nil? && @conversation_pbx_audio_uuid.to_s.length > 50
        invalid_properties.push('invalid value for "conversation_pbx_audio_uuid", the character length must be smaller than or equal to 50.')
      end

      if !@description.nil? && @description.to_s.length > 100
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 100.')
      end

      if !@filename.nil? && @filename.to_s.length > 100
        invalid_properties.push('invalid value for "filename", the character length must be smaller than or equal to 100.')
      end

      if !@merchant_id.nil? && @merchant_id.to_s.length > 5
        invalid_properties.push('invalid value for "merchant_id", the character length must be smaller than or equal to 5.')
      end

      if !@mime_type.nil? && @mime_type.to_s.length > 100
        invalid_properties.push('invalid value for "mime_type", the character length must be smaller than or equal to 100.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@audio_s3_listing_key.nil? && @audio_s3_listing_key.to_s.length > 250
      return false if !@conversation_pbx_audio_uuid.nil? && @conversation_pbx_audio_uuid.to_s.length > 50
      return false if !@description.nil? && @description.to_s.length > 100
      return false if !@filename.nil? && @filename.to_s.length > 100
      return false if !@merchant_id.nil? && @merchant_id.to_s.length > 5
      return false if !@mime_type.nil? && @mime_type.to_s.length > 100
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] audio_s3_listing_key Value to be assigned
    def audio_s3_listing_key=(audio_s3_listing_key)
      if !audio_s3_listing_key.nil? && audio_s3_listing_key.to_s.length > 250
        fail ArgumentError, 'invalid value for "audio_s3_listing_key", the character length must be smaller than or equal to 250.'
      end

      @audio_s3_listing_key = audio_s3_listing_key
    end

    # Custom attribute writer method with validation
    # @param [Object] conversation_pbx_audio_uuid Value to be assigned
    def conversation_pbx_audio_uuid=(conversation_pbx_audio_uuid)
      if !conversation_pbx_audio_uuid.nil? && conversation_pbx_audio_uuid.to_s.length > 50
        fail ArgumentError, 'invalid value for "conversation_pbx_audio_uuid", the character length must be smaller than or equal to 50.'
      end

      @conversation_pbx_audio_uuid = conversation_pbx_audio_uuid
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 100
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 100.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] filename Value to be assigned
    def filename=(filename)
      if !filename.nil? && filename.to_s.length > 100
        fail ArgumentError, 'invalid value for "filename", the character length must be smaller than or equal to 100.'
      end

      @filename = filename
    end

    # Custom attribute writer method with validation
    # @param [Object] merchant_id Value to be assigned
    def merchant_id=(merchant_id)
      if !merchant_id.nil? && merchant_id.to_s.length > 5
        fail ArgumentError, 'invalid value for "merchant_id", the character length must be smaller than or equal to 5.'
      end

      @merchant_id = merchant_id
    end

    # Custom attribute writer method with validation
    # @param [Object] mime_type Value to be assigned
    def mime_type=(mime_type)
      if !mime_type.nil? && mime_type.to_s.length > 100
        fail ArgumentError, 'invalid value for "mime_type", the character length must be smaller than or equal to 100.'
      end

      @mime_type = mime_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          audio_s3_listing_key == o.audio_s3_listing_key &&
          conversation_pbx_audio_uuid == o.conversation_pbx_audio_uuid &&
          default_hold_music == o.default_hold_music &&
          description == o.description &&
          filename == o.filename &&
          merchant_id == o.merchant_id &&
          mime_type == o.mime_type &&
          user_id == o.user_id &&
          version == o.version
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [audio_s3_listing_key, conversation_pbx_audio_uuid, default_hold_music, description, filename, merchant_id, mime_type, user_id, version].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = UltracartClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
