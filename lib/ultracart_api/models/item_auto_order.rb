=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

The version of the OpenAPI document: 2.0.0
Contact: support@ultracart.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1-SNAPSHOT

=end

require 'date'
require 'time'

module UltracartClient
  class ItemAutoOrder
    # Amount to try and authorize for the future rebill
    attr_accessor :auth_future_amount

    # Amount to try and test authorize
    attr_accessor :auth_test_amount

    # If true, the cost of the cancel item will be the remaining balance of the minimum rebill or lifetime value
    attr_accessor :auto_order_cancel_charge_minimum_balance

    # Item id to attempt charging the customer for if they cancel
    attr_accessor :auto_order_cancel_item_id

    # Item object identifier to attempt charging the customer for if they cancel
    attr_accessor :auto_order_cancel_item_oid

    # The minimum life time value that must be paid in order to not be charged the cancellation item.
    attr_accessor :auto_order_cancel_minimum_life_time_value

    # The minimum rebill value that must be paid in order to not be charged the cancellation item.
    attr_accessor :auto_order_cancel_minimum_rebill_value

    # List of downgrade items presented to customer service representatives
    attr_accessor :auto_order_downgrade_items

    # True if the rebill processing of this item is paused
    attr_accessor :auto_order_paused

    # Minimum number of months before expiration for the card.  Overrides the account level setting if higher.  Set to zero to disable.
    attr_accessor :auto_order_prohibit_expiring_cards

    # The user selectable schedules that are available
    attr_accessor :auto_order_schedules

    # List of upgrade items presented to customer service representatives
    attr_accessor :auto_order_upgrade_items

    # True if this item uses a fixed upsell step schedule
    attr_accessor :auto_order_upsell

    # Do not send the easy cancel email to the customer
    attr_accessor :auto_order_upsell_no_easy_cancel

    # Limit the purchase of this item to one per customer
    attr_accessor :auto_order_upsell_one_per_customer

    # True if this item can be automatically ordered by the customer
    attr_accessor :auto_orderable

    # True if other auto orders for this customer should be canceled when this item is ordered
    attr_accessor :cancel_other_auto_orders

    # True if the customer should be given free shipping
    attr_accessor :free_shipping_auto_order

    # True if other auto orders for this customer should refunded if this item is refunded.
    attr_accessor :refund_other_auto_orders

    # The rebill steps if this auto order is an upsell
    attr_accessor :steps

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'auth_future_amount' => :'auth_future_amount',
        :'auth_test_amount' => :'auth_test_amount',
        :'auto_order_cancel_charge_minimum_balance' => :'auto_order_cancel_charge_minimum_balance',
        :'auto_order_cancel_item_id' => :'auto_order_cancel_item_id',
        :'auto_order_cancel_item_oid' => :'auto_order_cancel_item_oid',
        :'auto_order_cancel_minimum_life_time_value' => :'auto_order_cancel_minimum_life_time_value',
        :'auto_order_cancel_minimum_rebill_value' => :'auto_order_cancel_minimum_rebill_value',
        :'auto_order_downgrade_items' => :'auto_order_downgrade_items',
        :'auto_order_paused' => :'auto_order_paused',
        :'auto_order_prohibit_expiring_cards' => :'auto_order_prohibit_expiring_cards',
        :'auto_order_schedules' => :'auto_order_schedules',
        :'auto_order_upgrade_items' => :'auto_order_upgrade_items',
        :'auto_order_upsell' => :'auto_order_upsell',
        :'auto_order_upsell_no_easy_cancel' => :'auto_order_upsell_no_easy_cancel',
        :'auto_order_upsell_one_per_customer' => :'auto_order_upsell_one_per_customer',
        :'auto_orderable' => :'auto_orderable',
        :'cancel_other_auto_orders' => :'cancel_other_auto_orders',
        :'free_shipping_auto_order' => :'free_shipping_auto_order',
        :'refund_other_auto_orders' => :'refund_other_auto_orders',
        :'steps' => :'steps'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'auth_future_amount' => :'Float',
        :'auth_test_amount' => :'Float',
        :'auto_order_cancel_charge_minimum_balance' => :'Boolean',
        :'auto_order_cancel_item_id' => :'String',
        :'auto_order_cancel_item_oid' => :'Integer',
        :'auto_order_cancel_minimum_life_time_value' => :'Float',
        :'auto_order_cancel_minimum_rebill_value' => :'Float',
        :'auto_order_downgrade_items' => :'Array<String>',
        :'auto_order_paused' => :'Boolean',
        :'auto_order_prohibit_expiring_cards' => :'Integer',
        :'auto_order_schedules' => :'Array<String>',
        :'auto_order_upgrade_items' => :'Array<String>',
        :'auto_order_upsell' => :'Boolean',
        :'auto_order_upsell_no_easy_cancel' => :'Boolean',
        :'auto_order_upsell_one_per_customer' => :'Boolean',
        :'auto_orderable' => :'Boolean',
        :'cancel_other_auto_orders' => :'Boolean',
        :'free_shipping_auto_order' => :'Boolean',
        :'refund_other_auto_orders' => :'Boolean',
        :'steps' => :'Array<ItemAutoOrderStep>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `UltracartClient::ItemAutoOrder` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `UltracartClient::ItemAutoOrder`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'auth_future_amount')
        self.auth_future_amount = attributes[:'auth_future_amount']
      end

      if attributes.key?(:'auth_test_amount')
        self.auth_test_amount = attributes[:'auth_test_amount']
      end

      if attributes.key?(:'auto_order_cancel_charge_minimum_balance')
        self.auto_order_cancel_charge_minimum_balance = attributes[:'auto_order_cancel_charge_minimum_balance']
      end

      if attributes.key?(:'auto_order_cancel_item_id')
        self.auto_order_cancel_item_id = attributes[:'auto_order_cancel_item_id']
      end

      if attributes.key?(:'auto_order_cancel_item_oid')
        self.auto_order_cancel_item_oid = attributes[:'auto_order_cancel_item_oid']
      end

      if attributes.key?(:'auto_order_cancel_minimum_life_time_value')
        self.auto_order_cancel_minimum_life_time_value = attributes[:'auto_order_cancel_minimum_life_time_value']
      end

      if attributes.key?(:'auto_order_cancel_minimum_rebill_value')
        self.auto_order_cancel_minimum_rebill_value = attributes[:'auto_order_cancel_minimum_rebill_value']
      end

      if attributes.key?(:'auto_order_downgrade_items')
        if (value = attributes[:'auto_order_downgrade_items']).is_a?(Array)
          self.auto_order_downgrade_items = value
        end
      end

      if attributes.key?(:'auto_order_paused')
        self.auto_order_paused = attributes[:'auto_order_paused']
      end

      if attributes.key?(:'auto_order_prohibit_expiring_cards')
        self.auto_order_prohibit_expiring_cards = attributes[:'auto_order_prohibit_expiring_cards']
      end

      if attributes.key?(:'auto_order_schedules')
        if (value = attributes[:'auto_order_schedules']).is_a?(Array)
          self.auto_order_schedules = value
        end
      end

      if attributes.key?(:'auto_order_upgrade_items')
        if (value = attributes[:'auto_order_upgrade_items']).is_a?(Array)
          self.auto_order_upgrade_items = value
        end
      end

      if attributes.key?(:'auto_order_upsell')
        self.auto_order_upsell = attributes[:'auto_order_upsell']
      end

      if attributes.key?(:'auto_order_upsell_no_easy_cancel')
        self.auto_order_upsell_no_easy_cancel = attributes[:'auto_order_upsell_no_easy_cancel']
      end

      if attributes.key?(:'auto_order_upsell_one_per_customer')
        self.auto_order_upsell_one_per_customer = attributes[:'auto_order_upsell_one_per_customer']
      end

      if attributes.key?(:'auto_orderable')
        self.auto_orderable = attributes[:'auto_orderable']
      end

      if attributes.key?(:'cancel_other_auto_orders')
        self.cancel_other_auto_orders = attributes[:'cancel_other_auto_orders']
      end

      if attributes.key?(:'free_shipping_auto_order')
        self.free_shipping_auto_order = attributes[:'free_shipping_auto_order']
      end

      if attributes.key?(:'refund_other_auto_orders')
        self.refund_other_auto_orders = attributes[:'refund_other_auto_orders']
      end

      if attributes.key?(:'steps')
        if (value = attributes[:'steps']).is_a?(Array)
          self.steps = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@auto_order_cancel_item_id.nil? && @auto_order_cancel_item_id.to_s.length > 20
        invalid_properties.push('invalid value for "auto_order_cancel_item_id", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@auto_order_cancel_item_id.nil? && @auto_order_cancel_item_id.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] auto_order_cancel_item_id Value to be assigned
    def auto_order_cancel_item_id=(auto_order_cancel_item_id)
      if !auto_order_cancel_item_id.nil? && auto_order_cancel_item_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "auto_order_cancel_item_id", the character length must be smaller than or equal to 20.'
      end

      @auto_order_cancel_item_id = auto_order_cancel_item_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          auth_future_amount == o.auth_future_amount &&
          auth_test_amount == o.auth_test_amount &&
          auto_order_cancel_charge_minimum_balance == o.auto_order_cancel_charge_minimum_balance &&
          auto_order_cancel_item_id == o.auto_order_cancel_item_id &&
          auto_order_cancel_item_oid == o.auto_order_cancel_item_oid &&
          auto_order_cancel_minimum_life_time_value == o.auto_order_cancel_minimum_life_time_value &&
          auto_order_cancel_minimum_rebill_value == o.auto_order_cancel_minimum_rebill_value &&
          auto_order_downgrade_items == o.auto_order_downgrade_items &&
          auto_order_paused == o.auto_order_paused &&
          auto_order_prohibit_expiring_cards == o.auto_order_prohibit_expiring_cards &&
          auto_order_schedules == o.auto_order_schedules &&
          auto_order_upgrade_items == o.auto_order_upgrade_items &&
          auto_order_upsell == o.auto_order_upsell &&
          auto_order_upsell_no_easy_cancel == o.auto_order_upsell_no_easy_cancel &&
          auto_order_upsell_one_per_customer == o.auto_order_upsell_one_per_customer &&
          auto_orderable == o.auto_orderable &&
          cancel_other_auto_orders == o.cancel_other_auto_orders &&
          free_shipping_auto_order == o.free_shipping_auto_order &&
          refund_other_auto_orders == o.refund_other_auto_orders &&
          steps == o.steps
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [auth_future_amount, auth_test_amount, auto_order_cancel_charge_minimum_balance, auto_order_cancel_item_id, auto_order_cancel_item_oid, auto_order_cancel_minimum_life_time_value, auto_order_cancel_minimum_rebill_value, auto_order_downgrade_items, auto_order_paused, auto_order_prohibit_expiring_cards, auto_order_schedules, auto_order_upgrade_items, auto_order_upsell, auto_order_upsell_no_easy_cancel, auto_order_upsell_one_per_customer, auto_orderable, cancel_other_auto_orders, free_shipping_auto_order, refund_other_auto_orders, steps].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = UltracartClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
