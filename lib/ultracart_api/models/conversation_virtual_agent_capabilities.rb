=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

OpenAPI spec version: 2.0.0
Contact: support@ultracart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'date'

module UltracartClient
  class ConversationVirtualAgentCapabilities
    attr_accessor :cancel_subscription

    attr_accessor :delay_subscription

    attr_accessor :lookup_order_information

    attr_accessor :lookup_subscription_information

    attr_accessor :open_support_ticket

    # Channel to use to open the support ticket
    attr_accessor :open_support_ticket_channel

    # Email to send support ticket to
    attr_accessor :open_support_ticket_channel_email

    # Department ID to open a Zoho Desk ticket for
    attr_accessor :open_support_ticket_zoho_desk_department_id

    attr_accessor :pause_subscription

    attr_accessor :resume_subscription

    attr_accessor :transfer_chat_to_live_agent

    attr_accessor :update_subscription_credit_card

    # True if Zoho Desk is connected to UltraCart
    attr_accessor :zoho_desk_available

    # Array of Zoho Desk Department if zoho desk is connected to UltraCart
    attr_accessor :zoho_desk_departments

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cancel_subscription' => :'cancel_subscription',
        :'delay_subscription' => :'delay_subscription',
        :'lookup_order_information' => :'lookup_order_information',
        :'lookup_subscription_information' => :'lookup_subscription_information',
        :'open_support_ticket' => :'open_support_ticket',
        :'open_support_ticket_channel' => :'open_support_ticket_channel',
        :'open_support_ticket_channel_email' => :'open_support_ticket_channel_email',
        :'open_support_ticket_zoho_desk_department_id' => :'open_support_ticket_zoho_desk_department_id',
        :'pause_subscription' => :'pause_subscription',
        :'resume_subscription' => :'resume_subscription',
        :'transfer_chat_to_live_agent' => :'transfer_chat_to_live_agent',
        :'update_subscription_credit_card' => :'update_subscription_credit_card',
        :'zoho_desk_available' => :'zoho_desk_available',
        :'zoho_desk_departments' => :'zoho_desk_departments'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'cancel_subscription' => :'BOOLEAN',
        :'delay_subscription' => :'BOOLEAN',
        :'lookup_order_information' => :'BOOLEAN',
        :'lookup_subscription_information' => :'BOOLEAN',
        :'open_support_ticket' => :'BOOLEAN',
        :'open_support_ticket_channel' => :'String',
        :'open_support_ticket_channel_email' => :'String',
        :'open_support_ticket_zoho_desk_department_id' => :'String',
        :'pause_subscription' => :'BOOLEAN',
        :'resume_subscription' => :'BOOLEAN',
        :'transfer_chat_to_live_agent' => :'BOOLEAN',
        :'update_subscription_credit_card' => :'BOOLEAN',
        :'zoho_desk_available' => :'BOOLEAN',
        :'zoho_desk_departments' => :'Array<ConversationVirtualAgentCapabilityZohoDeskDepartment>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'cancel_subscription')
        self.cancel_subscription = attributes[:'cancel_subscription']
      end

      if attributes.has_key?(:'delay_subscription')
        self.delay_subscription = attributes[:'delay_subscription']
      end

      if attributes.has_key?(:'lookup_order_information')
        self.lookup_order_information = attributes[:'lookup_order_information']
      end

      if attributes.has_key?(:'lookup_subscription_information')
        self.lookup_subscription_information = attributes[:'lookup_subscription_information']
      end

      if attributes.has_key?(:'open_support_ticket')
        self.open_support_ticket = attributes[:'open_support_ticket']
      end

      if attributes.has_key?(:'open_support_ticket_channel')
        self.open_support_ticket_channel = attributes[:'open_support_ticket_channel']
      end

      if attributes.has_key?(:'open_support_ticket_channel_email')
        self.open_support_ticket_channel_email = attributes[:'open_support_ticket_channel_email']
      end

      if attributes.has_key?(:'open_support_ticket_zoho_desk_department_id')
        self.open_support_ticket_zoho_desk_department_id = attributes[:'open_support_ticket_zoho_desk_department_id']
      end

      if attributes.has_key?(:'pause_subscription')
        self.pause_subscription = attributes[:'pause_subscription']
      end

      if attributes.has_key?(:'resume_subscription')
        self.resume_subscription = attributes[:'resume_subscription']
      end

      if attributes.has_key?(:'transfer_chat_to_live_agent')
        self.transfer_chat_to_live_agent = attributes[:'transfer_chat_to_live_agent']
      end

      if attributes.has_key?(:'update_subscription_credit_card')
        self.update_subscription_credit_card = attributes[:'update_subscription_credit_card']
      end

      if attributes.has_key?(:'zoho_desk_available')
        self.zoho_desk_available = attributes[:'zoho_desk_available']
      end

      if attributes.has_key?(:'zoho_desk_departments')
        if (value = attributes[:'zoho_desk_departments']).is_a?(Array)
          self.zoho_desk_departments = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      open_support_ticket_channel_validator = EnumAttributeValidator.new('String', ['none', 'email', 'ultracart_task', 'zoho_desk_ticket'])
      return false unless open_support_ticket_channel_validator.valid?(@open_support_ticket_channel)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] open_support_ticket_channel Object to be assigned
    def open_support_ticket_channel=(open_support_ticket_channel)
      validator = EnumAttributeValidator.new('String', ['none', 'email', 'ultracart_task', 'zoho_desk_ticket'])
      unless validator.valid?(open_support_ticket_channel)
        fail ArgumentError, 'invalid value for "open_support_ticket_channel", must be one of #{validator.allowable_values}.'
      end
      @open_support_ticket_channel = open_support_ticket_channel
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cancel_subscription == o.cancel_subscription &&
          delay_subscription == o.delay_subscription &&
          lookup_order_information == o.lookup_order_information &&
          lookup_subscription_information == o.lookup_subscription_information &&
          open_support_ticket == o.open_support_ticket &&
          open_support_ticket_channel == o.open_support_ticket_channel &&
          open_support_ticket_channel_email == o.open_support_ticket_channel_email &&
          open_support_ticket_zoho_desk_department_id == o.open_support_ticket_zoho_desk_department_id &&
          pause_subscription == o.pause_subscription &&
          resume_subscription == o.resume_subscription &&
          transfer_chat_to_live_agent == o.transfer_chat_to_live_agent &&
          update_subscription_credit_card == o.update_subscription_credit_card &&
          zoho_desk_available == o.zoho_desk_available &&
          zoho_desk_departments == o.zoho_desk_departments
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [cancel_subscription, delay_subscription, lookup_order_information, lookup_subscription_information, open_support_ticket, open_support_ticket_channel, open_support_ticket_channel_email, open_support_ticket_zoho_desk_department_id, pause_subscription, resume_subscription, transfer_chat_to_live_agent, update_subscription_credit_card, zoho_desk_available, zoho_desk_departments].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = UltracartClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
