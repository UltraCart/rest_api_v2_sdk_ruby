=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

The version of the OpenAPI document: 2.0.0
Contact: support@ultracart.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1-SNAPSHOT

=end

require 'date'
require 'time'

module UltracartClient
  class EmailThirdPartyProvider
    # URL to the settings screen to connect.  Null if the provider is already connected.
    attr_accessor :connect_url

    # list_count
    attr_accessor :list_count

    # lists
    attr_accessor :lists

    # logo_url
    attr_accessor :logo_url

    # name
    attr_accessor :name

    # True if this provider can support adding tags
    attr_accessor :supports_add_tags

    # True if this provider can support list subscribe
    attr_accessor :supports_list_subscribe

    # True if this provider can support list unsubscribe
    attr_accessor :supports_list_unsubscribe

    # True if this provider can support remove tags
    attr_accessor :supports_remove_tags

    # tag_count
    attr_accessor :tag_count

    # tags
    attr_accessor :tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'connect_url' => :'connect_url',
        :'list_count' => :'list_count',
        :'lists' => :'lists',
        :'logo_url' => :'logo_url',
        :'name' => :'name',
        :'supports_add_tags' => :'supports_add_tags',
        :'supports_list_subscribe' => :'supports_list_subscribe',
        :'supports_list_unsubscribe' => :'supports_list_unsubscribe',
        :'supports_remove_tags' => :'supports_remove_tags',
        :'tag_count' => :'tag_count',
        :'tags' => :'tags'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'connect_url' => :'String',
        :'list_count' => :'Integer',
        :'lists' => :'Array<EmailThirdPartyList>',
        :'logo_url' => :'String',
        :'name' => :'String',
        :'supports_add_tags' => :'Boolean',
        :'supports_list_subscribe' => :'Boolean',
        :'supports_list_unsubscribe' => :'Boolean',
        :'supports_remove_tags' => :'Boolean',
        :'tag_count' => :'Integer',
        :'tags' => :'Array<EmailThirdPartyTag>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `UltracartClient::EmailThirdPartyProvider` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `UltracartClient::EmailThirdPartyProvider`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'connect_url')
        self.connect_url = attributes[:'connect_url']
      end

      if attributes.key?(:'list_count')
        self.list_count = attributes[:'list_count']
      end

      if attributes.key?(:'lists')
        if (value = attributes[:'lists']).is_a?(Array)
          self.lists = value
        end
      end

      if attributes.key?(:'logo_url')
        self.logo_url = attributes[:'logo_url']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'supports_add_tags')
        self.supports_add_tags = attributes[:'supports_add_tags']
      end

      if attributes.key?(:'supports_list_subscribe')
        self.supports_list_subscribe = attributes[:'supports_list_subscribe']
      end

      if attributes.key?(:'supports_list_unsubscribe')
        self.supports_list_unsubscribe = attributes[:'supports_list_unsubscribe']
      end

      if attributes.key?(:'supports_remove_tags')
        self.supports_remove_tags = attributes[:'supports_remove_tags']
      end

      if attributes.key?(:'tag_count')
        self.tag_count = attributes[:'tag_count']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          connect_url == o.connect_url &&
          list_count == o.list_count &&
          lists == o.lists &&
          logo_url == o.logo_url &&
          name == o.name &&
          supports_add_tags == o.supports_add_tags &&
          supports_list_subscribe == o.supports_list_subscribe &&
          supports_list_unsubscribe == o.supports_list_unsubscribe &&
          supports_remove_tags == o.supports_remove_tags &&
          tag_count == o.tag_count &&
          tags == o.tags
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [connect_url, list_count, lists, logo_url, name, supports_add_tags, supports_list_subscribe, supports_list_unsubscribe, supports_remove_tags, tag_count, tags].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = UltracartClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
