=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

OpenAPI spec version: 2.0.0
Contact: support@ultracart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'date'

module UltracartClient
  class ConversationMessage
    attr_accessor :author_conversation_participant_arn

    attr_accessor :author_conversation_participant_name

    attr_accessor :body

    attr_accessor :client_message_id

    attr_accessor :conversation_message_uuid

    # Delay message transmission until date/time
    attr_accessor :delay_until_dts

    attr_accessor :language_iso_code

    attr_accessor :media_urls

    attr_accessor :merchant_id

    # Message date/time
    attr_accessor :message_dts

    # Message epoch milliseconds
    attr_accessor :message_epoch

    attr_accessor :translations

    attr_accessor :transport_statuses

    # Message type
    attr_accessor :type

    attr_accessor :upload_keys

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'author_conversation_participant_arn' => :'author_conversation_participant_arn',
        :'author_conversation_participant_name' => :'author_conversation_participant_name',
        :'body' => :'body',
        :'client_message_id' => :'client_message_id',
        :'conversation_message_uuid' => :'conversation_message_uuid',
        :'delay_until_dts' => :'delay_until_dts',
        :'language_iso_code' => :'language_iso_code',
        :'media_urls' => :'media_urls',
        :'merchant_id' => :'merchant_id',
        :'message_dts' => :'message_dts',
        :'message_epoch' => :'message_epoch',
        :'translations' => :'translations',
        :'transport_statuses' => :'transport_statuses',
        :'type' => :'type',
        :'upload_keys' => :'upload_keys'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'author_conversation_participant_arn' => :'String',
        :'author_conversation_participant_name' => :'String',
        :'body' => :'String',
        :'client_message_id' => :'String',
        :'conversation_message_uuid' => :'String',
        :'delay_until_dts' => :'String',
        :'language_iso_code' => :'String',
        :'media_urls' => :'Array<String>',
        :'merchant_id' => :'String',
        :'message_dts' => :'String',
        :'message_epoch' => :'Integer',
        :'translations' => :'Array<ConversationMessageTranslation>',
        :'transport_statuses' => :'Array<ConversationMessageTransportStatus>',
        :'type' => :'String',
        :'upload_keys' => :'Array<String>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'author_conversation_participant_arn')
        self.author_conversation_participant_arn = attributes[:'author_conversation_participant_arn']
      end

      if attributes.has_key?(:'author_conversation_participant_name')
        self.author_conversation_participant_name = attributes[:'author_conversation_participant_name']
      end

      if attributes.has_key?(:'body')
        self.body = attributes[:'body']
      end

      if attributes.has_key?(:'client_message_id')
        self.client_message_id = attributes[:'client_message_id']
      end

      if attributes.has_key?(:'conversation_message_uuid')
        self.conversation_message_uuid = attributes[:'conversation_message_uuid']
      end

      if attributes.has_key?(:'delay_until_dts')
        self.delay_until_dts = attributes[:'delay_until_dts']
      end

      if attributes.has_key?(:'language_iso_code')
        self.language_iso_code = attributes[:'language_iso_code']
      end

      if attributes.has_key?(:'media_urls')
        if (value = attributes[:'media_urls']).is_a?(Array)
          self.media_urls = value
        end
      end

      if attributes.has_key?(:'merchant_id')
        self.merchant_id = attributes[:'merchant_id']
      end

      if attributes.has_key?(:'message_dts')
        self.message_dts = attributes[:'message_dts']
      end

      if attributes.has_key?(:'message_epoch')
        self.message_epoch = attributes[:'message_epoch']
      end

      if attributes.has_key?(:'translations')
        if (value = attributes[:'translations']).is_a?(Array)
          self.translations = value
        end
      end

      if attributes.has_key?(:'transport_statuses')
        if (value = attributes[:'transport_statuses']).is_a?(Array)
          self.transport_statuses = value
        end
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'upload_keys')
        if (value = attributes[:'upload_keys']).is_a?(Array)
          self.upload_keys = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      type_validator = EnumAttributeValidator.new('String', ['message', 'notice'])
      return false unless type_validator.valid?(@type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ['message', 'notice'])
      unless validator.valid?(type)
        fail ArgumentError, 'invalid value for "type", must be one of #{validator.allowable_values}.'
      end
      @type = type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          author_conversation_participant_arn == o.author_conversation_participant_arn &&
          author_conversation_participant_name == o.author_conversation_participant_name &&
          body == o.body &&
          client_message_id == o.client_message_id &&
          conversation_message_uuid == o.conversation_message_uuid &&
          delay_until_dts == o.delay_until_dts &&
          language_iso_code == o.language_iso_code &&
          media_urls == o.media_urls &&
          merchant_id == o.merchant_id &&
          message_dts == o.message_dts &&
          message_epoch == o.message_epoch &&
          translations == o.translations &&
          transport_statuses == o.transport_statuses &&
          type == o.type &&
          upload_keys == o.upload_keys
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [author_conversation_participant_arn, author_conversation_participant_name, body, client_message_id, conversation_message_uuid, delay_until_dts, language_iso_code, media_urls, merchant_id, message_dts, message_epoch, translations, transport_statuses, type, upload_keys].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = UltracartClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
