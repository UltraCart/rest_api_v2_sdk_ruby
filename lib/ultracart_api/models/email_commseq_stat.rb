=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

OpenAPI spec version: 2.0.0
Contact: support@ultracart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'date'

module ultracart_client
  class EmailCommseqStat
    # Count of clicked emails
    attr_accessor :click_count

    # Count of clicked emails, formatted
    attr_accessor :click_count_formatted

    # Count of conversion
    attr_accessor :conversion_count

    # Count of conversions, formatted
    attr_accessor :conversion_count_formatted

    # Count of delivered emails
    attr_accessor :delivered_count

    # Count of delivered emails, formatted
    attr_accessor :delivered_count_formatted

    # UUID associated with the communication sequence
    attr_accessor :email_communication_sequence_uuid

    # Count of customers that finished the sequence
    attr_accessor :finished_count

    # Count of customers that finished the sequence, formatted
    attr_accessor :finished_count_formatted

    # Count of customers in progress
    attr_accessor :in_progress_count

    # Count of customers in progress, formatted
    attr_accessor :in_progress_count_formatted

    # Count of emails kicked
    attr_accessor :kickbox_count

    # Count of emails kicked, formatted
    attr_accessor :kickbox_count_formatted

    # Merchant ID
    attr_accessor :merchant_id

    # Count of opened emails
    attr_accessor :open_count

    # Count of opened emails, formatted
    attr_accessor :open_count_formatted

    # Count of orders
    attr_accessor :order_count

    # Count of orders, formatted
    attr_accessor :order_count_formatted

    # Count of emails permanently bounced
    attr_accessor :permanent_bounce_count

    # Count of emails permanently bounced, formatted
    attr_accessor :permanent_bounce_count_formatted

    # Profit
    attr_accessor :profit

    # Profit, formatted
    attr_accessor :profit_formatted

    # Revenue
    attr_accessor :revenue

    # Revenue, formatted
    attr_accessor :revenue_formatted

    # Count of emails sent
    attr_accessor :send_count

    # Count of emails sent, formatted
    attr_accessor :send_count_formatted

    # Count of skipped emails
    attr_accessor :skipped_count

    # Count of skipped emails, formatted
    attr_accessor :skipped_count_formatted

    # Count of emails classified as spam
    attr_accessor :spam_count

    # Count of emails classified as spam, formatted
    attr_accessor :spam_count_formatted

    # Count of customers that started the sequence
    attr_accessor :started_count

    # Count of customers that started the sequence, formatted
    attr_accessor :started_count_formatted

    # Storefront oid
    attr_accessor :storefront_oid

    # Count of unsubscribes caused
    attr_accessor :unsubscribe_count

    # Count of unsubscribes caused, formatted
    attr_accessor :unsubscribe_count_formatted

    # Count of views
    attr_accessor :view_count

    # Count of views, formatted
    attr_accessor :view_count_formatted

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'click_count' => :'click_count',
        :'click_count_formatted' => :'click_count_formatted',
        :'conversion_count' => :'conversion_count',
        :'conversion_count_formatted' => :'conversion_count_formatted',
        :'delivered_count' => :'delivered_count',
        :'delivered_count_formatted' => :'delivered_count_formatted',
        :'email_communication_sequence_uuid' => :'email_communication_sequence_uuid',
        :'finished_count' => :'finished_count',
        :'finished_count_formatted' => :'finished_count_formatted',
        :'in_progress_count' => :'in_progress_count',
        :'in_progress_count_formatted' => :'in_progress_count_formatted',
        :'kickbox_count' => :'kickbox_count',
        :'kickbox_count_formatted' => :'kickbox_count_formatted',
        :'merchant_id' => :'merchant_id',
        :'open_count' => :'open_count',
        :'open_count_formatted' => :'open_count_formatted',
        :'order_count' => :'order_count',
        :'order_count_formatted' => :'order_count_formatted',
        :'permanent_bounce_count' => :'permanent_bounce_count',
        :'permanent_bounce_count_formatted' => :'permanent_bounce_count_formatted',
        :'profit' => :'profit',
        :'profit_formatted' => :'profit_formatted',
        :'revenue' => :'revenue',
        :'revenue_formatted' => :'revenue_formatted',
        :'send_count' => :'send_count',
        :'send_count_formatted' => :'send_count_formatted',
        :'skipped_count' => :'skipped_count',
        :'skipped_count_formatted' => :'skipped_count_formatted',
        :'spam_count' => :'spam_count',
        :'spam_count_formatted' => :'spam_count_formatted',
        :'started_count' => :'started_count',
        :'started_count_formatted' => :'started_count_formatted',
        :'storefront_oid' => :'storefront_oid',
        :'unsubscribe_count' => :'unsubscribe_count',
        :'unsubscribe_count_formatted' => :'unsubscribe_count_formatted',
        :'view_count' => :'view_count',
        :'view_count_formatted' => :'view_count_formatted'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'click_count' => :'Integer',
        :'click_count_formatted' => :'String',
        :'conversion_count' => :'Integer',
        :'conversion_count_formatted' => :'String',
        :'delivered_count' => :'Integer',
        :'delivered_count_formatted' => :'String',
        :'email_communication_sequence_uuid' => :'String',
        :'finished_count' => :'Integer',
        :'finished_count_formatted' => :'String',
        :'in_progress_count' => :'Integer',
        :'in_progress_count_formatted' => :'String',
        :'kickbox_count' => :'Integer',
        :'kickbox_count_formatted' => :'String',
        :'merchant_id' => :'String',
        :'open_count' => :'Integer',
        :'open_count_formatted' => :'String',
        :'order_count' => :'Integer',
        :'order_count_formatted' => :'String',
        :'permanent_bounce_count' => :'Integer',
        :'permanent_bounce_count_formatted' => :'String',
        :'profit' => :'Float',
        :'profit_formatted' => :'String',
        :'revenue' => :'Float',
        :'revenue_formatted' => :'String',
        :'send_count' => :'Integer',
        :'send_count_formatted' => :'String',
        :'skipped_count' => :'Integer',
        :'skipped_count_formatted' => :'String',
        :'spam_count' => :'Integer',
        :'spam_count_formatted' => :'String',
        :'started_count' => :'Integer',
        :'started_count_formatted' => :'String',
        :'storefront_oid' => :'Integer',
        :'unsubscribe_count' => :'Integer',
        :'unsubscribe_count_formatted' => :'String',
        :'view_count' => :'Integer',
        :'view_count_formatted' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'click_count')
        self.click_count = attributes[:'click_count']
      end

      if attributes.has_key?(:'click_count_formatted')
        self.click_count_formatted = attributes[:'click_count_formatted']
      end

      if attributes.has_key?(:'conversion_count')
        self.conversion_count = attributes[:'conversion_count']
      end

      if attributes.has_key?(:'conversion_count_formatted')
        self.conversion_count_formatted = attributes[:'conversion_count_formatted']
      end

      if attributes.has_key?(:'delivered_count')
        self.delivered_count = attributes[:'delivered_count']
      end

      if attributes.has_key?(:'delivered_count_formatted')
        self.delivered_count_formatted = attributes[:'delivered_count_formatted']
      end

      if attributes.has_key?(:'email_communication_sequence_uuid')
        self.email_communication_sequence_uuid = attributes[:'email_communication_sequence_uuid']
      end

      if attributes.has_key?(:'finished_count')
        self.finished_count = attributes[:'finished_count']
      end

      if attributes.has_key?(:'finished_count_formatted')
        self.finished_count_formatted = attributes[:'finished_count_formatted']
      end

      if attributes.has_key?(:'in_progress_count')
        self.in_progress_count = attributes[:'in_progress_count']
      end

      if attributes.has_key?(:'in_progress_count_formatted')
        self.in_progress_count_formatted = attributes[:'in_progress_count_formatted']
      end

      if attributes.has_key?(:'kickbox_count')
        self.kickbox_count = attributes[:'kickbox_count']
      end

      if attributes.has_key?(:'kickbox_count_formatted')
        self.kickbox_count_formatted = attributes[:'kickbox_count_formatted']
      end

      if attributes.has_key?(:'merchant_id')
        self.merchant_id = attributes[:'merchant_id']
      end

      if attributes.has_key?(:'open_count')
        self.open_count = attributes[:'open_count']
      end

      if attributes.has_key?(:'open_count_formatted')
        self.open_count_formatted = attributes[:'open_count_formatted']
      end

      if attributes.has_key?(:'order_count')
        self.order_count = attributes[:'order_count']
      end

      if attributes.has_key?(:'order_count_formatted')
        self.order_count_formatted = attributes[:'order_count_formatted']
      end

      if attributes.has_key?(:'permanent_bounce_count')
        self.permanent_bounce_count = attributes[:'permanent_bounce_count']
      end

      if attributes.has_key?(:'permanent_bounce_count_formatted')
        self.permanent_bounce_count_formatted = attributes[:'permanent_bounce_count_formatted']
      end

      if attributes.has_key?(:'profit')
        self.profit = attributes[:'profit']
      end

      if attributes.has_key?(:'profit_formatted')
        self.profit_formatted = attributes[:'profit_formatted']
      end

      if attributes.has_key?(:'revenue')
        self.revenue = attributes[:'revenue']
      end

      if attributes.has_key?(:'revenue_formatted')
        self.revenue_formatted = attributes[:'revenue_formatted']
      end

      if attributes.has_key?(:'send_count')
        self.send_count = attributes[:'send_count']
      end

      if attributes.has_key?(:'send_count_formatted')
        self.send_count_formatted = attributes[:'send_count_formatted']
      end

      if attributes.has_key?(:'skipped_count')
        self.skipped_count = attributes[:'skipped_count']
      end

      if attributes.has_key?(:'skipped_count_formatted')
        self.skipped_count_formatted = attributes[:'skipped_count_formatted']
      end

      if attributes.has_key?(:'spam_count')
        self.spam_count = attributes[:'spam_count']
      end

      if attributes.has_key?(:'spam_count_formatted')
        self.spam_count_formatted = attributes[:'spam_count_formatted']
      end

      if attributes.has_key?(:'started_count')
        self.started_count = attributes[:'started_count']
      end

      if attributes.has_key?(:'started_count_formatted')
        self.started_count_formatted = attributes[:'started_count_formatted']
      end

      if attributes.has_key?(:'storefront_oid')
        self.storefront_oid = attributes[:'storefront_oid']
      end

      if attributes.has_key?(:'unsubscribe_count')
        self.unsubscribe_count = attributes[:'unsubscribe_count']
      end

      if attributes.has_key?(:'unsubscribe_count_formatted')
        self.unsubscribe_count_formatted = attributes[:'unsubscribe_count_formatted']
      end

      if attributes.has_key?(:'view_count')
        self.view_count = attributes[:'view_count']
      end

      if attributes.has_key?(:'view_count_formatted')
        self.view_count_formatted = attributes[:'view_count_formatted']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          click_count == o.click_count &&
          click_count_formatted == o.click_count_formatted &&
          conversion_count == o.conversion_count &&
          conversion_count_formatted == o.conversion_count_formatted &&
          delivered_count == o.delivered_count &&
          delivered_count_formatted == o.delivered_count_formatted &&
          email_communication_sequence_uuid == o.email_communication_sequence_uuid &&
          finished_count == o.finished_count &&
          finished_count_formatted == o.finished_count_formatted &&
          in_progress_count == o.in_progress_count &&
          in_progress_count_formatted == o.in_progress_count_formatted &&
          kickbox_count == o.kickbox_count &&
          kickbox_count_formatted == o.kickbox_count_formatted &&
          merchant_id == o.merchant_id &&
          open_count == o.open_count &&
          open_count_formatted == o.open_count_formatted &&
          order_count == o.order_count &&
          order_count_formatted == o.order_count_formatted &&
          permanent_bounce_count == o.permanent_bounce_count &&
          permanent_bounce_count_formatted == o.permanent_bounce_count_formatted &&
          profit == o.profit &&
          profit_formatted == o.profit_formatted &&
          revenue == o.revenue &&
          revenue_formatted == o.revenue_formatted &&
          send_count == o.send_count &&
          send_count_formatted == o.send_count_formatted &&
          skipped_count == o.skipped_count &&
          skipped_count_formatted == o.skipped_count_formatted &&
          spam_count == o.spam_count &&
          spam_count_formatted == o.spam_count_formatted &&
          started_count == o.started_count &&
          started_count_formatted == o.started_count_formatted &&
          storefront_oid == o.storefront_oid &&
          unsubscribe_count == o.unsubscribe_count &&
          unsubscribe_count_formatted == o.unsubscribe_count_formatted &&
          view_count == o.view_count &&
          view_count_formatted == o.view_count_formatted
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [click_count, click_count_formatted, conversion_count, conversion_count_formatted, delivered_count, delivered_count_formatted, email_communication_sequence_uuid, finished_count, finished_count_formatted, in_progress_count, in_progress_count_formatted, kickbox_count, kickbox_count_formatted, merchant_id, open_count, open_count_formatted, order_count, order_count_formatted, permanent_bounce_count, permanent_bounce_count_formatted, profit, profit_formatted, revenue, revenue_formatted, send_count, send_count_formatted, skipped_count, skipped_count_formatted, spam_count, spam_count_formatted, started_count, started_count_formatted, storefront_oid, unsubscribe_count, unsubscribe_count_formatted, view_count, view_count_formatted].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ultracart_client.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
