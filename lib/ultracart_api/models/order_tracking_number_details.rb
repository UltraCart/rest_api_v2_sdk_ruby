=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

The version of the OpenAPI document: 2.0.0
Contact: support@ultracart.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1-SNAPSHOT

=end

require 'date'
require 'time'

module UltracartClient
  class OrderTrackingNumberDetails
    attr_accessor :actual_delivery_date

    attr_accessor :actual_delivery_date_formatted

    attr_accessor :details

    attr_accessor :easypost_tracker_id

    attr_accessor :expected_delivery_date

    attr_accessor :expected_delivery_date_formatted

    attr_accessor :map_url

    attr_accessor :order_placed_date

    attr_accessor :order_placed_date_formatted

    attr_accessor :payment_processed_date

    attr_accessor :payment_processed_date_formatted

    attr_accessor :shipped_date

    attr_accessor :shipped_date_formatted

    attr_accessor :shipping_method

    attr_accessor :status

    attr_accessor :status_description

    attr_accessor :tracking_number

    attr_accessor :tracking_url

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'actual_delivery_date' => :'actual_delivery_date',
        :'actual_delivery_date_formatted' => :'actual_delivery_date_formatted',
        :'details' => :'details',
        :'easypost_tracker_id' => :'easypost_tracker_id',
        :'expected_delivery_date' => :'expected_delivery_date',
        :'expected_delivery_date_formatted' => :'expected_delivery_date_formatted',
        :'map_url' => :'map_url',
        :'order_placed_date' => :'order_placed_date',
        :'order_placed_date_formatted' => :'order_placed_date_formatted',
        :'payment_processed_date' => :'payment_processed_date',
        :'payment_processed_date_formatted' => :'payment_processed_date_formatted',
        :'shipped_date' => :'shipped_date',
        :'shipped_date_formatted' => :'shipped_date_formatted',
        :'shipping_method' => :'shipping_method',
        :'status' => :'status',
        :'status_description' => :'status_description',
        :'tracking_number' => :'tracking_number',
        :'tracking_url' => :'tracking_url'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'actual_delivery_date' => :'String',
        :'actual_delivery_date_formatted' => :'String',
        :'details' => :'Array<OrderTrackingNumberDetail>',
        :'easypost_tracker_id' => :'String',
        :'expected_delivery_date' => :'String',
        :'expected_delivery_date_formatted' => :'String',
        :'map_url' => :'String',
        :'order_placed_date' => :'String',
        :'order_placed_date_formatted' => :'String',
        :'payment_processed_date' => :'String',
        :'payment_processed_date_formatted' => :'String',
        :'shipped_date' => :'String',
        :'shipped_date_formatted' => :'String',
        :'shipping_method' => :'String',
        :'status' => :'String',
        :'status_description' => :'String',
        :'tracking_number' => :'String',
        :'tracking_url' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `UltracartClient::OrderTrackingNumberDetails` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `UltracartClient::OrderTrackingNumberDetails`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'actual_delivery_date')
        self.actual_delivery_date = attributes[:'actual_delivery_date']
      end

      if attributes.key?(:'actual_delivery_date_formatted')
        self.actual_delivery_date_formatted = attributes[:'actual_delivery_date_formatted']
      end

      if attributes.key?(:'details')
        if (value = attributes[:'details']).is_a?(Array)
          self.details = value
        end
      end

      if attributes.key?(:'easypost_tracker_id')
        self.easypost_tracker_id = attributes[:'easypost_tracker_id']
      end

      if attributes.key?(:'expected_delivery_date')
        self.expected_delivery_date = attributes[:'expected_delivery_date']
      end

      if attributes.key?(:'expected_delivery_date_formatted')
        self.expected_delivery_date_formatted = attributes[:'expected_delivery_date_formatted']
      end

      if attributes.key?(:'map_url')
        self.map_url = attributes[:'map_url']
      end

      if attributes.key?(:'order_placed_date')
        self.order_placed_date = attributes[:'order_placed_date']
      end

      if attributes.key?(:'order_placed_date_formatted')
        self.order_placed_date_formatted = attributes[:'order_placed_date_formatted']
      end

      if attributes.key?(:'payment_processed_date')
        self.payment_processed_date = attributes[:'payment_processed_date']
      end

      if attributes.key?(:'payment_processed_date_formatted')
        self.payment_processed_date_formatted = attributes[:'payment_processed_date_formatted']
      end

      if attributes.key?(:'shipped_date')
        self.shipped_date = attributes[:'shipped_date']
      end

      if attributes.key?(:'shipped_date_formatted')
        self.shipped_date_formatted = attributes[:'shipped_date_formatted']
      end

      if attributes.key?(:'shipping_method')
        self.shipping_method = attributes[:'shipping_method']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'status_description')
        self.status_description = attributes[:'status_description']
      end

      if attributes.key?(:'tracking_number')
        self.tracking_number = attributes[:'tracking_number']
      end

      if attributes.key?(:'tracking_url')
        self.tracking_url = attributes[:'tracking_url']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          actual_delivery_date == o.actual_delivery_date &&
          actual_delivery_date_formatted == o.actual_delivery_date_formatted &&
          details == o.details &&
          easypost_tracker_id == o.easypost_tracker_id &&
          expected_delivery_date == o.expected_delivery_date &&
          expected_delivery_date_formatted == o.expected_delivery_date_formatted &&
          map_url == o.map_url &&
          order_placed_date == o.order_placed_date &&
          order_placed_date_formatted == o.order_placed_date_formatted &&
          payment_processed_date == o.payment_processed_date &&
          payment_processed_date_formatted == o.payment_processed_date_formatted &&
          shipped_date == o.shipped_date &&
          shipped_date_formatted == o.shipped_date_formatted &&
          shipping_method == o.shipping_method &&
          status == o.status &&
          status_description == o.status_description &&
          tracking_number == o.tracking_number &&
          tracking_url == o.tracking_url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [actual_delivery_date, actual_delivery_date_formatted, details, easypost_tracker_id, expected_delivery_date, expected_delivery_date_formatted, map_url, order_placed_date, order_placed_date_formatted, payment_processed_date, payment_processed_date_formatted, shipped_date, shipped_date_formatted, shipping_method, status, status_description, tracking_number, tracking_url].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = UltracartClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
