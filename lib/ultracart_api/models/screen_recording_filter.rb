=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

The version of the OpenAPI document: 2.0.0
Contact: support@ultracart.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1-SNAPSHOT

=end

require 'date'
require 'time'

module UltracartClient
  class ScreenRecordingFilter
    attr_accessor :affiliate_email

    attr_accessor :affiliate_id

    attr_accessor :communications_campaign_name

    attr_accessor :communications_campaign_name_filter

    attr_accessor :communications_email_subject

    attr_accessor :communications_email_subject_filter

    attr_accessor :communications_flow_name

    attr_accessor :communications_flow_name_filter

    attr_accessor :email

    attr_accessor :email_domain

    attr_accessor :email_domain_filter

    attr_accessor :email_identified

    attr_accessor :end_timestamp

    attr_accessor :esp_customer_uuid

    attr_accessor :favorite

    attr_accessor :geolocation

    attr_accessor :geolocation_country

    attr_accessor :geolocation_country_filter

    attr_accessor :geolocation_state

    attr_accessor :geolocation_state_filter

    attr_accessor :language_iso_code

    attr_accessor :language_iso_code_filter

    attr_accessor :last_x_days

    attr_accessor :max_filter_values

    attr_accessor :order_id

    attr_accessor :page_view_count

    attr_accessor :page_views

    attr_accessor :placed_order

    attr_accessor :preferred_language

    attr_accessor :preferred_language_filter

    attr_accessor :referrer_domain

    attr_accessor :referrer_domain_filter

    attr_accessor :screen_recording_uuids

    attr_accessor :screen_sizes

    attr_accessor :skip_filter_values

    attr_accessor :skip_histogram

    attr_accessor :skip_hits

    attr_accessor :start_timestamp

    attr_accessor :tags

    attr_accessor :time_on_site

    attr_accessor :time_on_site_max_filter

    attr_accessor :time_on_site_min_filter

    attr_accessor :url_filter

    attr_accessor :user_agent_device_name

    attr_accessor :user_agent_device_name_filter

    attr_accessor :user_agent_device_os_name_filter

    attr_accessor :user_agent_device_os_version_filter

    attr_accessor :user_agent_name

    attr_accessor :user_agent_name_filter

    attr_accessor :user_agent_original

    attr_accessor :user_agent_original_filter

    attr_accessor :user_agent_os_name

    attr_accessor :user_agent_os_version

    attr_accessor :user_ip

    attr_accessor :utm_campaign

    attr_accessor :utm_campaign_filter

    attr_accessor :utm_source

    attr_accessor :utm_source_filter

    attr_accessor :visitor_number

    attr_accessor :watched

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'affiliate_email' => :'affiliate_email',
        :'affiliate_id' => :'affiliate_id',
        :'communications_campaign_name' => :'communications_campaign_name',
        :'communications_campaign_name_filter' => :'communications_campaign_name_filter',
        :'communications_email_subject' => :'communications_email_subject',
        :'communications_email_subject_filter' => :'communications_email_subject_filter',
        :'communications_flow_name' => :'communications_flow_name',
        :'communications_flow_name_filter' => :'communications_flow_name_filter',
        :'email' => :'email',
        :'email_domain' => :'email_domain',
        :'email_domain_filter' => :'email_domain_filter',
        :'email_identified' => :'email_identified',
        :'end_timestamp' => :'end_timestamp',
        :'esp_customer_uuid' => :'esp_customer_uuid',
        :'favorite' => :'favorite',
        :'geolocation' => :'geolocation',
        :'geolocation_country' => :'geolocation_country',
        :'geolocation_country_filter' => :'geolocation_country_filter',
        :'geolocation_state' => :'geolocation_state',
        :'geolocation_state_filter' => :'geolocation_state_filter',
        :'language_iso_code' => :'language_iso_code',
        :'language_iso_code_filter' => :'language_iso_code_filter',
        :'last_x_days' => :'last_x_days',
        :'max_filter_values' => :'max_filter_values',
        :'order_id' => :'order_id',
        :'page_view_count' => :'page_view_count',
        :'page_views' => :'page_views',
        :'placed_order' => :'placed_order',
        :'preferred_language' => :'preferred_language',
        :'preferred_language_filter' => :'preferred_language_filter',
        :'referrer_domain' => :'referrer_domain',
        :'referrer_domain_filter' => :'referrer_domain_filter',
        :'screen_recording_uuids' => :'screen_recording_uuids',
        :'screen_sizes' => :'screen_sizes',
        :'skip_filter_values' => :'skip_filter_values',
        :'skip_histogram' => :'skip_histogram',
        :'skip_hits' => :'skip_hits',
        :'start_timestamp' => :'start_timestamp',
        :'tags' => :'tags',
        :'time_on_site' => :'time_on_site',
        :'time_on_site_max_filter' => :'time_on_site_max_filter',
        :'time_on_site_min_filter' => :'time_on_site_min_filter',
        :'url_filter' => :'url_filter',
        :'user_agent_device_name' => :'user_agent_device_name',
        :'user_agent_device_name_filter' => :'user_agent_device_name_filter',
        :'user_agent_device_os_name_filter' => :'user_agent_device_os_name_filter',
        :'user_agent_device_os_version_filter' => :'user_agent_device_os_version_filter',
        :'user_agent_name' => :'user_agent_name',
        :'user_agent_name_filter' => :'user_agent_name_filter',
        :'user_agent_original' => :'user_agent_original',
        :'user_agent_original_filter' => :'user_agent_original_filter',
        :'user_agent_os_name' => :'user_agent_os_name',
        :'user_agent_os_version' => :'user_agent_os_version',
        :'user_ip' => :'user_ip',
        :'utm_campaign' => :'utm_campaign',
        :'utm_campaign_filter' => :'utm_campaign_filter',
        :'utm_source' => :'utm_source',
        :'utm_source_filter' => :'utm_source_filter',
        :'visitor_number' => :'visitor_number',
        :'watched' => :'watched'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'affiliate_email' => :'String',
        :'affiliate_id' => :'Integer',
        :'communications_campaign_name' => :'String',
        :'communications_campaign_name_filter' => :'Boolean',
        :'communications_email_subject' => :'String',
        :'communications_email_subject_filter' => :'Boolean',
        :'communications_flow_name' => :'String',
        :'communications_flow_name_filter' => :'Boolean',
        :'email' => :'ScreenRecordingFilterStringSearch',
        :'email_domain' => :'String',
        :'email_domain_filter' => :'Boolean',
        :'email_identified' => :'Boolean',
        :'end_timestamp' => :'ScreenRecordingFilterRangeDate',
        :'esp_customer_uuid' => :'String',
        :'favorite' => :'Boolean',
        :'geolocation' => :'ScreenRecordingFilterGeoDistance',
        :'geolocation_country' => :'ScreenRecordingFilterStringSearch',
        :'geolocation_country_filter' => :'Boolean',
        :'geolocation_state' => :'ScreenRecordingFilterStringSearch',
        :'geolocation_state_filter' => :'Boolean',
        :'language_iso_code' => :'ScreenRecordingFilterStringSearch',
        :'language_iso_code_filter' => :'Boolean',
        :'last_x_days' => :'Integer',
        :'max_filter_values' => :'Integer',
        :'order_id' => :'ScreenRecordingFilterStringSearch',
        :'page_view_count' => :'ScreenRecordingFilterRangeInteger',
        :'page_views' => :'Array<ScreenRecordingFilterPageView>',
        :'placed_order' => :'Boolean',
        :'preferred_language' => :'ScreenRecordingFilterStringSearch',
        :'preferred_language_filter' => :'Boolean',
        :'referrer_domain' => :'String',
        :'referrer_domain_filter' => :'Boolean',
        :'screen_recording_uuids' => :'Array<String>',
        :'screen_sizes' => :'Array<String>',
        :'skip_filter_values' => :'Boolean',
        :'skip_histogram' => :'Boolean',
        :'skip_hits' => :'Boolean',
        :'start_timestamp' => :'ScreenRecordingFilterRangeDate',
        :'tags' => :'Array<String>',
        :'time_on_site' => :'ScreenRecordingFilterRangeInteger',
        :'time_on_site_max_filter' => :'Boolean',
        :'time_on_site_min_filter' => :'Boolean',
        :'url_filter' => :'Boolean',
        :'user_agent_device_name' => :'String',
        :'user_agent_device_name_filter' => :'Boolean',
        :'user_agent_device_os_name_filter' => :'Boolean',
        :'user_agent_device_os_version_filter' => :'Boolean',
        :'user_agent_name' => :'String',
        :'user_agent_name_filter' => :'Boolean',
        :'user_agent_original' => :'ScreenRecordingFilterStringSearch',
        :'user_agent_original_filter' => :'Boolean',
        :'user_agent_os_name' => :'String',
        :'user_agent_os_version' => :'String',
        :'user_ip' => :'ScreenRecordingFilterIpSearch',
        :'utm_campaign' => :'String',
        :'utm_campaign_filter' => :'Boolean',
        :'utm_source' => :'String',
        :'utm_source_filter' => :'Boolean',
        :'visitor_number' => :'Integer',
        :'watched' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `UltracartClient::ScreenRecordingFilter` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `UltracartClient::ScreenRecordingFilter`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'affiliate_email')
        self.affiliate_email = attributes[:'affiliate_email']
      end

      if attributes.key?(:'affiliate_id')
        self.affiliate_id = attributes[:'affiliate_id']
      end

      if attributes.key?(:'communications_campaign_name')
        self.communications_campaign_name = attributes[:'communications_campaign_name']
      end

      if attributes.key?(:'communications_campaign_name_filter')
        self.communications_campaign_name_filter = attributes[:'communications_campaign_name_filter']
      end

      if attributes.key?(:'communications_email_subject')
        self.communications_email_subject = attributes[:'communications_email_subject']
      end

      if attributes.key?(:'communications_email_subject_filter')
        self.communications_email_subject_filter = attributes[:'communications_email_subject_filter']
      end

      if attributes.key?(:'communications_flow_name')
        self.communications_flow_name = attributes[:'communications_flow_name']
      end

      if attributes.key?(:'communications_flow_name_filter')
        self.communications_flow_name_filter = attributes[:'communications_flow_name_filter']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'email_domain')
        self.email_domain = attributes[:'email_domain']
      end

      if attributes.key?(:'email_domain_filter')
        self.email_domain_filter = attributes[:'email_domain_filter']
      end

      if attributes.key?(:'email_identified')
        self.email_identified = attributes[:'email_identified']
      end

      if attributes.key?(:'end_timestamp')
        self.end_timestamp = attributes[:'end_timestamp']
      end

      if attributes.key?(:'esp_customer_uuid')
        self.esp_customer_uuid = attributes[:'esp_customer_uuid']
      end

      if attributes.key?(:'favorite')
        self.favorite = attributes[:'favorite']
      end

      if attributes.key?(:'geolocation')
        self.geolocation = attributes[:'geolocation']
      end

      if attributes.key?(:'geolocation_country')
        self.geolocation_country = attributes[:'geolocation_country']
      end

      if attributes.key?(:'geolocation_country_filter')
        self.geolocation_country_filter = attributes[:'geolocation_country_filter']
      end

      if attributes.key?(:'geolocation_state')
        self.geolocation_state = attributes[:'geolocation_state']
      end

      if attributes.key?(:'geolocation_state_filter')
        self.geolocation_state_filter = attributes[:'geolocation_state_filter']
      end

      if attributes.key?(:'language_iso_code')
        self.language_iso_code = attributes[:'language_iso_code']
      end

      if attributes.key?(:'language_iso_code_filter')
        self.language_iso_code_filter = attributes[:'language_iso_code_filter']
      end

      if attributes.key?(:'last_x_days')
        self.last_x_days = attributes[:'last_x_days']
      end

      if attributes.key?(:'max_filter_values')
        self.max_filter_values = attributes[:'max_filter_values']
      end

      if attributes.key?(:'order_id')
        self.order_id = attributes[:'order_id']
      end

      if attributes.key?(:'page_view_count')
        self.page_view_count = attributes[:'page_view_count']
      end

      if attributes.key?(:'page_views')
        if (value = attributes[:'page_views']).is_a?(Array)
          self.page_views = value
        end
      end

      if attributes.key?(:'placed_order')
        self.placed_order = attributes[:'placed_order']
      end

      if attributes.key?(:'preferred_language')
        self.preferred_language = attributes[:'preferred_language']
      end

      if attributes.key?(:'preferred_language_filter')
        self.preferred_language_filter = attributes[:'preferred_language_filter']
      end

      if attributes.key?(:'referrer_domain')
        self.referrer_domain = attributes[:'referrer_domain']
      end

      if attributes.key?(:'referrer_domain_filter')
        self.referrer_domain_filter = attributes[:'referrer_domain_filter']
      end

      if attributes.key?(:'screen_recording_uuids')
        if (value = attributes[:'screen_recording_uuids']).is_a?(Array)
          self.screen_recording_uuids = value
        end
      end

      if attributes.key?(:'screen_sizes')
        if (value = attributes[:'screen_sizes']).is_a?(Array)
          self.screen_sizes = value
        end
      end

      if attributes.key?(:'skip_filter_values')
        self.skip_filter_values = attributes[:'skip_filter_values']
      end

      if attributes.key?(:'skip_histogram')
        self.skip_histogram = attributes[:'skip_histogram']
      end

      if attributes.key?(:'skip_hits')
        self.skip_hits = attributes[:'skip_hits']
      end

      if attributes.key?(:'start_timestamp')
        self.start_timestamp = attributes[:'start_timestamp']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'time_on_site')
        self.time_on_site = attributes[:'time_on_site']
      end

      if attributes.key?(:'time_on_site_max_filter')
        self.time_on_site_max_filter = attributes[:'time_on_site_max_filter']
      end

      if attributes.key?(:'time_on_site_min_filter')
        self.time_on_site_min_filter = attributes[:'time_on_site_min_filter']
      end

      if attributes.key?(:'url_filter')
        self.url_filter = attributes[:'url_filter']
      end

      if attributes.key?(:'user_agent_device_name')
        self.user_agent_device_name = attributes[:'user_agent_device_name']
      end

      if attributes.key?(:'user_agent_device_name_filter')
        self.user_agent_device_name_filter = attributes[:'user_agent_device_name_filter']
      end

      if attributes.key?(:'user_agent_device_os_name_filter')
        self.user_agent_device_os_name_filter = attributes[:'user_agent_device_os_name_filter']
      end

      if attributes.key?(:'user_agent_device_os_version_filter')
        self.user_agent_device_os_version_filter = attributes[:'user_agent_device_os_version_filter']
      end

      if attributes.key?(:'user_agent_name')
        self.user_agent_name = attributes[:'user_agent_name']
      end

      if attributes.key?(:'user_agent_name_filter')
        self.user_agent_name_filter = attributes[:'user_agent_name_filter']
      end

      if attributes.key?(:'user_agent_original')
        self.user_agent_original = attributes[:'user_agent_original']
      end

      if attributes.key?(:'user_agent_original_filter')
        self.user_agent_original_filter = attributes[:'user_agent_original_filter']
      end

      if attributes.key?(:'user_agent_os_name')
        self.user_agent_os_name = attributes[:'user_agent_os_name']
      end

      if attributes.key?(:'user_agent_os_version')
        self.user_agent_os_version = attributes[:'user_agent_os_version']
      end

      if attributes.key?(:'user_ip')
        self.user_ip = attributes[:'user_ip']
      end

      if attributes.key?(:'utm_campaign')
        self.utm_campaign = attributes[:'utm_campaign']
      end

      if attributes.key?(:'utm_campaign_filter')
        self.utm_campaign_filter = attributes[:'utm_campaign_filter']
      end

      if attributes.key?(:'utm_source')
        self.utm_source = attributes[:'utm_source']
      end

      if attributes.key?(:'utm_source_filter')
        self.utm_source_filter = attributes[:'utm_source_filter']
      end

      if attributes.key?(:'visitor_number')
        self.visitor_number = attributes[:'visitor_number']
      end

      if attributes.key?(:'watched')
        self.watched = attributes[:'watched']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          affiliate_email == o.affiliate_email &&
          affiliate_id == o.affiliate_id &&
          communications_campaign_name == o.communications_campaign_name &&
          communications_campaign_name_filter == o.communications_campaign_name_filter &&
          communications_email_subject == o.communications_email_subject &&
          communications_email_subject_filter == o.communications_email_subject_filter &&
          communications_flow_name == o.communications_flow_name &&
          communications_flow_name_filter == o.communications_flow_name_filter &&
          email == o.email &&
          email_domain == o.email_domain &&
          email_domain_filter == o.email_domain_filter &&
          email_identified == o.email_identified &&
          end_timestamp == o.end_timestamp &&
          esp_customer_uuid == o.esp_customer_uuid &&
          favorite == o.favorite &&
          geolocation == o.geolocation &&
          geolocation_country == o.geolocation_country &&
          geolocation_country_filter == o.geolocation_country_filter &&
          geolocation_state == o.geolocation_state &&
          geolocation_state_filter == o.geolocation_state_filter &&
          language_iso_code == o.language_iso_code &&
          language_iso_code_filter == o.language_iso_code_filter &&
          last_x_days == o.last_x_days &&
          max_filter_values == o.max_filter_values &&
          order_id == o.order_id &&
          page_view_count == o.page_view_count &&
          page_views == o.page_views &&
          placed_order == o.placed_order &&
          preferred_language == o.preferred_language &&
          preferred_language_filter == o.preferred_language_filter &&
          referrer_domain == o.referrer_domain &&
          referrer_domain_filter == o.referrer_domain_filter &&
          screen_recording_uuids == o.screen_recording_uuids &&
          screen_sizes == o.screen_sizes &&
          skip_filter_values == o.skip_filter_values &&
          skip_histogram == o.skip_histogram &&
          skip_hits == o.skip_hits &&
          start_timestamp == o.start_timestamp &&
          tags == o.tags &&
          time_on_site == o.time_on_site &&
          time_on_site_max_filter == o.time_on_site_max_filter &&
          time_on_site_min_filter == o.time_on_site_min_filter &&
          url_filter == o.url_filter &&
          user_agent_device_name == o.user_agent_device_name &&
          user_agent_device_name_filter == o.user_agent_device_name_filter &&
          user_agent_device_os_name_filter == o.user_agent_device_os_name_filter &&
          user_agent_device_os_version_filter == o.user_agent_device_os_version_filter &&
          user_agent_name == o.user_agent_name &&
          user_agent_name_filter == o.user_agent_name_filter &&
          user_agent_original == o.user_agent_original &&
          user_agent_original_filter == o.user_agent_original_filter &&
          user_agent_os_name == o.user_agent_os_name &&
          user_agent_os_version == o.user_agent_os_version &&
          user_ip == o.user_ip &&
          utm_campaign == o.utm_campaign &&
          utm_campaign_filter == o.utm_campaign_filter &&
          utm_source == o.utm_source &&
          utm_source_filter == o.utm_source_filter &&
          visitor_number == o.visitor_number &&
          watched == o.watched
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [affiliate_email, affiliate_id, communications_campaign_name, communications_campaign_name_filter, communications_email_subject, communications_email_subject_filter, communications_flow_name, communications_flow_name_filter, email, email_domain, email_domain_filter, email_identified, end_timestamp, esp_customer_uuid, favorite, geolocation, geolocation_country, geolocation_country_filter, geolocation_state, geolocation_state_filter, language_iso_code, language_iso_code_filter, last_x_days, max_filter_values, order_id, page_view_count, page_views, placed_order, preferred_language, preferred_language_filter, referrer_domain, referrer_domain_filter, screen_recording_uuids, screen_sizes, skip_filter_values, skip_histogram, skip_hits, start_timestamp, tags, time_on_site, time_on_site_max_filter, time_on_site_min_filter, url_filter, user_agent_device_name, user_agent_device_name_filter, user_agent_device_os_name_filter, user_agent_device_os_version_filter, user_agent_name, user_agent_name_filter, user_agent_original, user_agent_original_filter, user_agent_os_name, user_agent_os_version, user_ip, utm_campaign, utm_campaign_filter, utm_source, utm_source_filter, visitor_number, watched].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = UltracartClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
