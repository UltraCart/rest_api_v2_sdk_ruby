=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

OpenAPI spec version: 2.0.0
Contact: support@ultracart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'date'

module UltracartClient
  class OrderEdiDocument
    # Direction the document flowed
    attr_accessor :direction

    # Date/time the document was created/received
    attr_accessor :doc_dts

    attr_accessor :document

    attr_accessor :document_type_description

    attr_accessor :document_type_number

    attr_accessor :external_id

    attr_accessor :functional_acknowledgement

    attr_accessor :functional_acknowledgement_dts

    attr_accessor :functional_acknowledgement_pending

    attr_accessor :group_control_number

    attr_accessor :internal_id

    attr_accessor :merchant_id

    attr_accessor :order_id

    attr_accessor :test_mode

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'direction' => :'direction',
        :'doc_dts' => :'doc_dts',
        :'document' => :'document',
        :'document_type_description' => :'document_type_description',
        :'document_type_number' => :'document_type_number',
        :'external_id' => :'external_id',
        :'functional_acknowledgement' => :'functional_acknowledgement',
        :'functional_acknowledgement_dts' => :'functional_acknowledgement_dts',
        :'functional_acknowledgement_pending' => :'functional_acknowledgement_pending',
        :'group_control_number' => :'group_control_number',
        :'internal_id' => :'internal_id',
        :'merchant_id' => :'merchant_id',
        :'order_id' => :'order_id',
        :'test_mode' => :'test_mode'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'direction' => :'String',
        :'doc_dts' => :'String',
        :'document' => :'String',
        :'document_type_description' => :'String',
        :'document_type_number' => :'Integer',
        :'external_id' => :'String',
        :'functional_acknowledgement' => :'String',
        :'functional_acknowledgement_dts' => :'String',
        :'functional_acknowledgement_pending' => :'BOOLEAN',
        :'group_control_number' => :'Integer',
        :'internal_id' => :'String',
        :'merchant_id' => :'String',
        :'order_id' => :'String',
        :'test_mode' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'direction')
        self.direction = attributes[:'direction']
      end

      if attributes.has_key?(:'doc_dts')
        self.doc_dts = attributes[:'doc_dts']
      end

      if attributes.has_key?(:'document')
        self.document = attributes[:'document']
      end

      if attributes.has_key?(:'document_type_description')
        self.document_type_description = attributes[:'document_type_description']
      end

      if attributes.has_key?(:'document_type_number')
        self.document_type_number = attributes[:'document_type_number']
      end

      if attributes.has_key?(:'external_id')
        self.external_id = attributes[:'external_id']
      end

      if attributes.has_key?(:'functional_acknowledgement')
        self.functional_acknowledgement = attributes[:'functional_acknowledgement']
      end

      if attributes.has_key?(:'functional_acknowledgement_dts')
        self.functional_acknowledgement_dts = attributes[:'functional_acknowledgement_dts']
      end

      if attributes.has_key?(:'functional_acknowledgement_pending')
        self.functional_acknowledgement_pending = attributes[:'functional_acknowledgement_pending']
      end

      if attributes.has_key?(:'group_control_number')
        self.group_control_number = attributes[:'group_control_number']
      end

      if attributes.has_key?(:'internal_id')
        self.internal_id = attributes[:'internal_id']
      end

      if attributes.has_key?(:'merchant_id')
        self.merchant_id = attributes[:'merchant_id']
      end

      if attributes.has_key?(:'order_id')
        self.order_id = attributes[:'order_id']
      end

      if attributes.has_key?(:'test_mode')
        self.test_mode = attributes[:'test_mode']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      direction_validator = EnumAttributeValidator.new('String', ['inbound', 'outbound'])
      return false unless direction_validator.valid?(@direction)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] direction Object to be assigned
    def direction=(direction)
      validator = EnumAttributeValidator.new('String', ['inbound', 'outbound'])
      unless validator.valid?(direction)
        fail ArgumentError, 'invalid value for "direction", must be one of #{validator.allowable_values}.'
      end
      @direction = direction
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          direction == o.direction &&
          doc_dts == o.doc_dts &&
          document == o.document &&
          document_type_description == o.document_type_description &&
          document_type_number == o.document_type_number &&
          external_id == o.external_id &&
          functional_acknowledgement == o.functional_acknowledgement &&
          functional_acknowledgement_dts == o.functional_acknowledgement_dts &&
          functional_acknowledgement_pending == o.functional_acknowledgement_pending &&
          group_control_number == o.group_control_number &&
          internal_id == o.internal_id &&
          merchant_id == o.merchant_id &&
          order_id == o.order_id &&
          test_mode == o.test_mode
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [direction, doc_dts, document, document_type_description, document_type_number, external_id, functional_acknowledgement, functional_acknowledgement_dts, functional_acknowledgement_pending, group_control_number, internal_id, merchant_id, order_id, test_mode].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = UltracartClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
