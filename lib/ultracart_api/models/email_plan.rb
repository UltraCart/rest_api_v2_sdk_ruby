=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

OpenAPI spec version: 2.0.0
Contact: support@ultracart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'date'

module ultracart_client
  class EmailPlan
    attr_accessor :additional_customers

    attr_accessor :additional_emails

    attr_accessor :allow_list_import

    attr_accessor :allow_tracking_emails

    attr_accessor :customer_tiers

    attr_accessor :initial_sending_limits

    attr_accessor :plan_customers

    attr_accessor :plan_emails

    attr_accessor :plan_name

    attr_accessor :plan_name_formatted

    attr_accessor :require_order_within_last_days

    attr_accessor :revenue_percent

    attr_accessor :spam_percent_limit

    attr_accessor :total_customers

    attr_accessor :total_emails

    attr_accessor :upgrade_to

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'additional_customers' => :'additional_customers',
        :'additional_emails' => :'additional_emails',
        :'allow_list_import' => :'allow_list_import',
        :'allow_tracking_emails' => :'allow_tracking_emails',
        :'customer_tiers' => :'customer_tiers',
        :'initial_sending_limits' => :'initial_sending_limits',
        :'plan_customers' => :'plan_customers',
        :'plan_emails' => :'plan_emails',
        :'plan_name' => :'plan_name',
        :'plan_name_formatted' => :'plan_name_formatted',
        :'require_order_within_last_days' => :'require_order_within_last_days',
        :'revenue_percent' => :'revenue_percent',
        :'spam_percent_limit' => :'spam_percent_limit',
        :'total_customers' => :'total_customers',
        :'total_emails' => :'total_emails',
        :'upgrade_to' => :'upgrade_to'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'additional_customers' => :'Integer',
        :'additional_emails' => :'Integer',
        :'allow_list_import' => :'BOOLEAN',
        :'allow_tracking_emails' => :'BOOLEAN',
        :'customer_tiers' => :'Array<EmailPlanAdditional>',
        :'initial_sending_limits' => :'Integer',
        :'plan_customers' => :'Integer',
        :'plan_emails' => :'Integer',
        :'plan_name' => :'String',
        :'plan_name_formatted' => :'String',
        :'require_order_within_last_days' => :'Integer',
        :'revenue_percent' => :'Integer',
        :'spam_percent_limit' => :'Integer',
        :'total_customers' => :'Integer',
        :'total_emails' => :'Integer',
        :'upgrade_to' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'additional_customers')
        self.additional_customers = attributes[:'additional_customers']
      end

      if attributes.has_key?(:'additional_emails')
        self.additional_emails = attributes[:'additional_emails']
      end

      if attributes.has_key?(:'allow_list_import')
        self.allow_list_import = attributes[:'allow_list_import']
      end

      if attributes.has_key?(:'allow_tracking_emails')
        self.allow_tracking_emails = attributes[:'allow_tracking_emails']
      end

      if attributes.has_key?(:'customer_tiers')
        if (value = attributes[:'customer_tiers']).is_a?(Array)
          self.customer_tiers = value
        end
      end

      if attributes.has_key?(:'initial_sending_limits')
        self.initial_sending_limits = attributes[:'initial_sending_limits']
      end

      if attributes.has_key?(:'plan_customers')
        self.plan_customers = attributes[:'plan_customers']
      end

      if attributes.has_key?(:'plan_emails')
        self.plan_emails = attributes[:'plan_emails']
      end

      if attributes.has_key?(:'plan_name')
        self.plan_name = attributes[:'plan_name']
      end

      if attributes.has_key?(:'plan_name_formatted')
        self.plan_name_formatted = attributes[:'plan_name_formatted']
      end

      if attributes.has_key?(:'require_order_within_last_days')
        self.require_order_within_last_days = attributes[:'require_order_within_last_days']
      end

      if attributes.has_key?(:'revenue_percent')
        self.revenue_percent = attributes[:'revenue_percent']
      end

      if attributes.has_key?(:'spam_percent_limit')
        self.spam_percent_limit = attributes[:'spam_percent_limit']
      end

      if attributes.has_key?(:'total_customers')
        self.total_customers = attributes[:'total_customers']
      end

      if attributes.has_key?(:'total_emails')
        self.total_emails = attributes[:'total_emails']
      end

      if attributes.has_key?(:'upgrade_to')
        self.upgrade_to = attributes[:'upgrade_to']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          additional_customers == o.additional_customers &&
          additional_emails == o.additional_emails &&
          allow_list_import == o.allow_list_import &&
          allow_tracking_emails == o.allow_tracking_emails &&
          customer_tiers == o.customer_tiers &&
          initial_sending_limits == o.initial_sending_limits &&
          plan_customers == o.plan_customers &&
          plan_emails == o.plan_emails &&
          plan_name == o.plan_name &&
          plan_name_formatted == o.plan_name_formatted &&
          require_order_within_last_days == o.require_order_within_last_days &&
          revenue_percent == o.revenue_percent &&
          spam_percent_limit == o.spam_percent_limit &&
          total_customers == o.total_customers &&
          total_emails == o.total_emails &&
          upgrade_to == o.upgrade_to
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [additional_customers, additional_emails, allow_list_import, allow_tracking_emails, customer_tiers, initial_sending_limits, plan_customers, plan_emails, plan_name, plan_name_formatted, require_order_within_last_days, revenue_percent, spam_percent_limit, total_customers, total_emails, upgrade_to].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ultracart_client.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
