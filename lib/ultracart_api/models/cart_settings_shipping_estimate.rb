=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

The version of the OpenAPI document: 2.0.0
Contact: support@ultracart.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1-SNAPSHOT

=end

require 'date'
require 'time'

module UltracartClient
  class CartSettingsShippingEstimate
    # True if this method allows the customer to use their own shipper account number
    attr_accessor :allow_3rd_party_billing

    # Comment to display to the customer about this method
    attr_accessor :comment

    attr_accessor :cost

    attr_accessor :cost_before_discount

    # True if this is the default method
    attr_accessor :default_method

    attr_accessor :discount

    # True if this method is discounted because of a coupon
    attr_accessor :discounted

    # The name to display to the customer
    attr_accessor :display_name

    # Date of the estimated delivery (or range)
    attr_accessor :estimated_delivery

    # True if a lift gate option for this method should be offered to the customer
    attr_accessor :lift_gate_option

    # Shipping method name
    attr_accessor :name

    # True if this shipping method requires customers to physically pickup product themselves
    attr_accessor :pickup

    attr_accessor :tax

    attr_accessor :total_tax

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'allow_3rd_party_billing' => :'allow_3rd_party_billing',
        :'comment' => :'comment',
        :'cost' => :'cost',
        :'cost_before_discount' => :'cost_before_discount',
        :'default_method' => :'default_method',
        :'discount' => :'discount',
        :'discounted' => :'discounted',
        :'display_name' => :'display_name',
        :'estimated_delivery' => :'estimated_delivery',
        :'lift_gate_option' => :'lift_gate_option',
        :'name' => :'name',
        :'pickup' => :'pickup',
        :'tax' => :'tax',
        :'total_tax' => :'total_tax'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'allow_3rd_party_billing' => :'Boolean',
        :'comment' => :'String',
        :'cost' => :'Currency',
        :'cost_before_discount' => :'Currency',
        :'default_method' => :'Boolean',
        :'discount' => :'Currency',
        :'discounted' => :'Boolean',
        :'display_name' => :'String',
        :'estimated_delivery' => :'String',
        :'lift_gate_option' => :'Boolean',
        :'name' => :'String',
        :'pickup' => :'Boolean',
        :'tax' => :'Currency',
        :'total_tax' => :'Currency'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `UltracartClient::CartSettingsShippingEstimate` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `UltracartClient::CartSettingsShippingEstimate`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'allow_3rd_party_billing')
        self.allow_3rd_party_billing = attributes[:'allow_3rd_party_billing']
      end

      if attributes.key?(:'comment')
        self.comment = attributes[:'comment']
      end

      if attributes.key?(:'cost')
        self.cost = attributes[:'cost']
      end

      if attributes.key?(:'cost_before_discount')
        self.cost_before_discount = attributes[:'cost_before_discount']
      end

      if attributes.key?(:'default_method')
        self.default_method = attributes[:'default_method']
      end

      if attributes.key?(:'discount')
        self.discount = attributes[:'discount']
      end

      if attributes.key?(:'discounted')
        self.discounted = attributes[:'discounted']
      end

      if attributes.key?(:'display_name')
        self.display_name = attributes[:'display_name']
      end

      if attributes.key?(:'estimated_delivery')
        self.estimated_delivery = attributes[:'estimated_delivery']
      end

      if attributes.key?(:'lift_gate_option')
        self.lift_gate_option = attributes[:'lift_gate_option']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'pickup')
        self.pickup = attributes[:'pickup']
      end

      if attributes.key?(:'tax')
        self.tax = attributes[:'tax']
      end

      if attributes.key?(:'total_tax')
        self.total_tax = attributes[:'total_tax']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          allow_3rd_party_billing == o.allow_3rd_party_billing &&
          comment == o.comment &&
          cost == o.cost &&
          cost_before_discount == o.cost_before_discount &&
          default_method == o.default_method &&
          discount == o.discount &&
          discounted == o.discounted &&
          display_name == o.display_name &&
          estimated_delivery == o.estimated_delivery &&
          lift_gate_option == o.lift_gate_option &&
          name == o.name &&
          pickup == o.pickup &&
          tax == o.tax &&
          total_tax == o.total_tax
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [allow_3rd_party_billing, comment, cost, cost_before_discount, default_method, discount, discounted, display_name, estimated_delivery, lift_gate_option, name, pickup, tax, total_tax].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = UltracartClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
