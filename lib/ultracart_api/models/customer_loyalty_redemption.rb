=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

The version of the OpenAPI document: 2.0.0
Contact: support@ultracart.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1-SNAPSHOT

=end

require 'date'
require 'time'

module UltracartClient
  class CustomerLoyaltyRedemption
    # Coupon code
    attr_accessor :coupon_code

    # Coupon code OID
    attr_accessor :coupon_code_oid

    # Coupon used
    attr_accessor :coupon_used

    # Description for customer
    attr_accessor :description_for_customer

    # Expiration date
    attr_accessor :expiration_dts

    # Gift certificate code
    attr_accessor :gift_certificate_code

    # Gift certificate oid
    attr_accessor :gift_certificate_oid

    # Loyalty ledger OID
    attr_accessor :loyalty_ledger_oid

    # Loyalty points
    attr_accessor :loyalty_points

    # Loyalty redemption OID
    attr_accessor :loyalty_redemption_oid

    # Order id
    attr_accessor :order_id

    # Redemption date
    attr_accessor :redemption_dts

    # Remaining balance
    attr_accessor :remaining_balance

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'coupon_code' => :'coupon_code',
        :'coupon_code_oid' => :'coupon_code_oid',
        :'coupon_used' => :'coupon_used',
        :'description_for_customer' => :'description_for_customer',
        :'expiration_dts' => :'expiration_dts',
        :'gift_certificate_code' => :'gift_certificate_code',
        :'gift_certificate_oid' => :'gift_certificate_oid',
        :'loyalty_ledger_oid' => :'loyalty_ledger_oid',
        :'loyalty_points' => :'loyalty_points',
        :'loyalty_redemption_oid' => :'loyalty_redemption_oid',
        :'order_id' => :'order_id',
        :'redemption_dts' => :'redemption_dts',
        :'remaining_balance' => :'remaining_balance'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'coupon_code' => :'String',
        :'coupon_code_oid' => :'Integer',
        :'coupon_used' => :'Boolean',
        :'description_for_customer' => :'String',
        :'expiration_dts' => :'String',
        :'gift_certificate_code' => :'String',
        :'gift_certificate_oid' => :'Integer',
        :'loyalty_ledger_oid' => :'Integer',
        :'loyalty_points' => :'Integer',
        :'loyalty_redemption_oid' => :'Integer',
        :'order_id' => :'String',
        :'redemption_dts' => :'String',
        :'remaining_balance' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `UltracartClient::CustomerLoyaltyRedemption` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `UltracartClient::CustomerLoyaltyRedemption`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'coupon_code')
        self.coupon_code = attributes[:'coupon_code']
      end

      if attributes.key?(:'coupon_code_oid')
        self.coupon_code_oid = attributes[:'coupon_code_oid']
      end

      if attributes.key?(:'coupon_used')
        self.coupon_used = attributes[:'coupon_used']
      end

      if attributes.key?(:'description_for_customer')
        self.description_for_customer = attributes[:'description_for_customer']
      end

      if attributes.key?(:'expiration_dts')
        self.expiration_dts = attributes[:'expiration_dts']
      end

      if attributes.key?(:'gift_certificate_code')
        self.gift_certificate_code = attributes[:'gift_certificate_code']
      end

      if attributes.key?(:'gift_certificate_oid')
        self.gift_certificate_oid = attributes[:'gift_certificate_oid']
      end

      if attributes.key?(:'loyalty_ledger_oid')
        self.loyalty_ledger_oid = attributes[:'loyalty_ledger_oid']
      end

      if attributes.key?(:'loyalty_points')
        self.loyalty_points = attributes[:'loyalty_points']
      end

      if attributes.key?(:'loyalty_redemption_oid')
        self.loyalty_redemption_oid = attributes[:'loyalty_redemption_oid']
      end

      if attributes.key?(:'order_id')
        self.order_id = attributes[:'order_id']
      end

      if attributes.key?(:'redemption_dts')
        self.redemption_dts = attributes[:'redemption_dts']
      end

      if attributes.key?(:'remaining_balance')
        self.remaining_balance = attributes[:'remaining_balance']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          coupon_code == o.coupon_code &&
          coupon_code_oid == o.coupon_code_oid &&
          coupon_used == o.coupon_used &&
          description_for_customer == o.description_for_customer &&
          expiration_dts == o.expiration_dts &&
          gift_certificate_code == o.gift_certificate_code &&
          gift_certificate_oid == o.gift_certificate_oid &&
          loyalty_ledger_oid == o.loyalty_ledger_oid &&
          loyalty_points == o.loyalty_points &&
          loyalty_redemption_oid == o.loyalty_redemption_oid &&
          order_id == o.order_id &&
          redemption_dts == o.redemption_dts &&
          remaining_balance == o.remaining_balance
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [coupon_code, coupon_code_oid, coupon_used, description_for_customer, expiration_dts, gift_certificate_code, gift_certificate_oid, loyalty_ledger_oid, loyalty_points, loyalty_redemption_oid, order_id, redemption_dts, remaining_balance].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = UltracartClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
