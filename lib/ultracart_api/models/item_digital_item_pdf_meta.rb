=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

OpenAPI spec version: 2.0.0
Contact: support@ultracart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'date'

module UltracartClient
  class ItemDigitalItemPdfMeta
    # Assembly allowed
    attr_accessor :assembly_allowed

    # Copy/Paste is allowed
    attr_accessor :copy_allowed

    # A custom footer for each pdf page
    attr_accessor :custom_footer

    # A custom header for each pdf page
    attr_accessor :custom_header

    # Degraded printing allowed
    attr_accessor :degraded_printing_allowed

    # Fillin is allowed
    attr_accessor :fillin_allowed

    # Modifying annotations is allowed
    attr_accessor :modify_annotations_allowed

    # Modifying contents is allowed
    attr_accessor :modify_contents_allowed

    # Printing is allowed
    attr_accessor :printing_allowed

    # Screen readers are allowed
    attr_accessor :screen_readers_allowed

    # PDF is tagged
    attr_accessor :tagged

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'assembly_allowed' => :'assembly_allowed',
        :'copy_allowed' => :'copy_allowed',
        :'custom_footer' => :'custom_footer',
        :'custom_header' => :'custom_header',
        :'degraded_printing_allowed' => :'degraded_printing_allowed',
        :'fillin_allowed' => :'fillin_allowed',
        :'modify_annotations_allowed' => :'modify_annotations_allowed',
        :'modify_contents_allowed' => :'modify_contents_allowed',
        :'printing_allowed' => :'printing_allowed',
        :'screen_readers_allowed' => :'screen_readers_allowed',
        :'tagged' => :'tagged'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'assembly_allowed' => :'BOOLEAN',
        :'copy_allowed' => :'BOOLEAN',
        :'custom_footer' => :'String',
        :'custom_header' => :'String',
        :'degraded_printing_allowed' => :'BOOLEAN',
        :'fillin_allowed' => :'BOOLEAN',
        :'modify_annotations_allowed' => :'BOOLEAN',
        :'modify_contents_allowed' => :'BOOLEAN',
        :'printing_allowed' => :'BOOLEAN',
        :'screen_readers_allowed' => :'BOOLEAN',
        :'tagged' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'assembly_allowed')
        self.assembly_allowed = attributes[:'assembly_allowed']
      end

      if attributes.has_key?(:'copy_allowed')
        self.copy_allowed = attributes[:'copy_allowed']
      end

      if attributes.has_key?(:'custom_footer')
        self.custom_footer = attributes[:'custom_footer']
      end

      if attributes.has_key?(:'custom_header')
        self.custom_header = attributes[:'custom_header']
      end

      if attributes.has_key?(:'degraded_printing_allowed')
        self.degraded_printing_allowed = attributes[:'degraded_printing_allowed']
      end

      if attributes.has_key?(:'fillin_allowed')
        self.fillin_allowed = attributes[:'fillin_allowed']
      end

      if attributes.has_key?(:'modify_annotations_allowed')
        self.modify_annotations_allowed = attributes[:'modify_annotations_allowed']
      end

      if attributes.has_key?(:'modify_contents_allowed')
        self.modify_contents_allowed = attributes[:'modify_contents_allowed']
      end

      if attributes.has_key?(:'printing_allowed')
        self.printing_allowed = attributes[:'printing_allowed']
      end

      if attributes.has_key?(:'screen_readers_allowed')
        self.screen_readers_allowed = attributes[:'screen_readers_allowed']
      end

      if attributes.has_key?(:'tagged')
        self.tagged = attributes[:'tagged']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@custom_footer.nil? && @custom_footer.to_s.length > 8000
        invalid_properties.push('invalid value for "custom_footer", the character length must be smaller than or equal to 8000.')
      end

      if !@custom_header.nil? && @custom_header.to_s.length > 8000
        invalid_properties.push('invalid value for "custom_header", the character length must be smaller than or equal to 8000.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@custom_footer.nil? && @custom_footer.to_s.length > 8000
      return false if !@custom_header.nil? && @custom_header.to_s.length > 8000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_footer Value to be assigned
    def custom_footer=(custom_footer)
      if !custom_footer.nil? && custom_footer.to_s.length > 8000
        fail ArgumentError, 'invalid value for "custom_footer", the character length must be smaller than or equal to 8000.'
      end

      @custom_footer = custom_footer
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_header Value to be assigned
    def custom_header=(custom_header)
      if !custom_header.nil? && custom_header.to_s.length > 8000
        fail ArgumentError, 'invalid value for "custom_header", the character length must be smaller than or equal to 8000.'
      end

      @custom_header = custom_header
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          assembly_allowed == o.assembly_allowed &&
          copy_allowed == o.copy_allowed &&
          custom_footer == o.custom_footer &&
          custom_header == o.custom_header &&
          degraded_printing_allowed == o.degraded_printing_allowed &&
          fillin_allowed == o.fillin_allowed &&
          modify_annotations_allowed == o.modify_annotations_allowed &&
          modify_contents_allowed == o.modify_contents_allowed &&
          printing_allowed == o.printing_allowed &&
          screen_readers_allowed == o.screen_readers_allowed &&
          tagged == o.tagged
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [assembly_allowed, copy_allowed, custom_footer, custom_header, degraded_printing_allowed, fillin_allowed, modify_annotations_allowed, modify_contents_allowed, printing_allowed, screen_readers_allowed, tagged].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = UltracartClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
