=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

The version of the OpenAPI document: 2.0.0
Contact: support@ultracart.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1-SNAPSHOT

=end

require 'date'
require 'time'

module UltracartClient
  class CartKitComponentOption
    attr_accessor :cost_if_specified

    attr_accessor :cost_per_letter

    attr_accessor :cost_per_line

    # True if the default answer is ignored
    attr_accessor :ignore_if_default

    # Kit component item id
    attr_accessor :item_id

    # Unique identifier for the kit component item
    attr_accessor :item_oid

    # Display label for the option
    attr_accessor :label

    # Name of the option
    attr_accessor :name

    # Charge the fee a single time instead of multiplying by the quantity
    attr_accessor :one_time_fee

    # Unique identifier for the option
    attr_accessor :option_oid

    # True if the customer is required to select a value
    attr_accessor :required

    # The value of the option specified by the customer
    attr_accessor :selected_value

    # Type of option
    attr_accessor :type

    # Values that the customer can select from for radio or select type options
    attr_accessor :values

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cost_if_specified' => :'cost_if_specified',
        :'cost_per_letter' => :'cost_per_letter',
        :'cost_per_line' => :'cost_per_line',
        :'ignore_if_default' => :'ignore_if_default',
        :'item_id' => :'item_id',
        :'item_oid' => :'item_oid',
        :'label' => :'label',
        :'name' => :'name',
        :'one_time_fee' => :'one_time_fee',
        :'option_oid' => :'option_oid',
        :'required' => :'required',
        :'selected_value' => :'selected_value',
        :'type' => :'type',
        :'values' => :'values'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'cost_if_specified' => :'Currency',
        :'cost_per_letter' => :'Currency',
        :'cost_per_line' => :'Currency',
        :'ignore_if_default' => :'Boolean',
        :'item_id' => :'String',
        :'item_oid' => :'Integer',
        :'label' => :'String',
        :'name' => :'String',
        :'one_time_fee' => :'Boolean',
        :'option_oid' => :'Integer',
        :'required' => :'Boolean',
        :'selected_value' => :'String',
        :'type' => :'String',
        :'values' => :'Array<CartItemOptionValue>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `UltracartClient::CartKitComponentOption` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `UltracartClient::CartKitComponentOption`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'cost_if_specified')
        self.cost_if_specified = attributes[:'cost_if_specified']
      end

      if attributes.key?(:'cost_per_letter')
        self.cost_per_letter = attributes[:'cost_per_letter']
      end

      if attributes.key?(:'cost_per_line')
        self.cost_per_line = attributes[:'cost_per_line']
      end

      if attributes.key?(:'ignore_if_default')
        self.ignore_if_default = attributes[:'ignore_if_default']
      end

      if attributes.key?(:'item_id')
        self.item_id = attributes[:'item_id']
      end

      if attributes.key?(:'item_oid')
        self.item_oid = attributes[:'item_oid']
      end

      if attributes.key?(:'label')
        self.label = attributes[:'label']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'one_time_fee')
        self.one_time_fee = attributes[:'one_time_fee']
      end

      if attributes.key?(:'option_oid')
        self.option_oid = attributes[:'option_oid']
      end

      if attributes.key?(:'required')
        self.required = attributes[:'required']
      end

      if attributes.key?(:'selected_value')
        self.selected_value = attributes[:'selected_value']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'values')
        if (value = attributes[:'values']).is_a?(Array)
          self.values = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@selected_value.nil? && @selected_value.to_s.length > 1024
        invalid_properties.push('invalid value for "selected_value", the character length must be smaller than or equal to 1024.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@selected_value.nil? && @selected_value.to_s.length > 1024
      type_validator = EnumAttributeValidator.new('String', ["single", "multiline", "dropdown", "hidden", "radio", "fixed"])
      return false unless type_validator.valid?(@type)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] selected_value Value to be assigned
    def selected_value=(selected_value)
      if !selected_value.nil? && selected_value.to_s.length > 1024
        fail ArgumentError, 'invalid value for "selected_value", the character length must be smaller than or equal to 1024.'
      end

      @selected_value = selected_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["single", "multiline", "dropdown", "hidden", "radio", "fixed"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cost_if_specified == o.cost_if_specified &&
          cost_per_letter == o.cost_per_letter &&
          cost_per_line == o.cost_per_line &&
          ignore_if_default == o.ignore_if_default &&
          item_id == o.item_id &&
          item_oid == o.item_oid &&
          label == o.label &&
          name == o.name &&
          one_time_fee == o.one_time_fee &&
          option_oid == o.option_oid &&
          required == o.required &&
          selected_value == o.selected_value &&
          type == o.type &&
          values == o.values
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [cost_if_specified, cost_per_letter, cost_per_line, ignore_if_default, item_id, item_oid, label, name, one_time_fee, option_oid, required, selected_value, type, values].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = UltracartClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
