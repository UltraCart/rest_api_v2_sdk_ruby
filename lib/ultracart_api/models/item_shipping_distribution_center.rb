=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

The version of the OpenAPI document: 2.0.0
Contact: support@ultracart.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1-SNAPSHOT

=end

require 'date'
require 'time'

module UltracartClient
  class ItemShippingDistributionCenter
    # Allocated to placed orders
    attr_accessor :allocated_to_placed_orders

    # Allocated to shopping carts
    attr_accessor :allocated_to_shopping_carts

    # Available to allocate
    attr_accessor :available_to_allocate

    # Cost of goods sold override at the distribution center level
    attr_accessor :cogs

    # Desired inventory level
    attr_accessor :desired_inventory_level

    # Distribution center code
    attr_accessor :distribution_center_code

    # Distribution center object identifier
    attr_accessor :distribution_center_oid

    # Estimated time of arrival
    attr_accessor :eta

    # True if this distribution center handles this item
    attr_accessor :handles

    # Inventory level
    attr_accessor :inventory_level

    # Maximum back-order
    attr_accessor :maximum_backorder

    # Reorder inventory level (triggers notification)
    attr_accessor :reorder_inventory_level

    # SKU
    attr_accessor :sku

    # Stock picking location
    attr_accessor :stock_picking_location

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'allocated_to_placed_orders' => :'allocated_to_placed_orders',
        :'allocated_to_shopping_carts' => :'allocated_to_shopping_carts',
        :'available_to_allocate' => :'available_to_allocate',
        :'cogs' => :'cogs',
        :'desired_inventory_level' => :'desired_inventory_level',
        :'distribution_center_code' => :'distribution_center_code',
        :'distribution_center_oid' => :'distribution_center_oid',
        :'eta' => :'eta',
        :'handles' => :'handles',
        :'inventory_level' => :'inventory_level',
        :'maximum_backorder' => :'maximum_backorder',
        :'reorder_inventory_level' => :'reorder_inventory_level',
        :'sku' => :'sku',
        :'stock_picking_location' => :'stock_picking_location'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'allocated_to_placed_orders' => :'Float',
        :'allocated_to_shopping_carts' => :'Float',
        :'available_to_allocate' => :'Float',
        :'cogs' => :'Float',
        :'desired_inventory_level' => :'Float',
        :'distribution_center_code' => :'String',
        :'distribution_center_oid' => :'Integer',
        :'eta' => :'String',
        :'handles' => :'Boolean',
        :'inventory_level' => :'Float',
        :'maximum_backorder' => :'Integer',
        :'reorder_inventory_level' => :'Float',
        :'sku' => :'String',
        :'stock_picking_location' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `UltracartClient::ItemShippingDistributionCenter` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `UltracartClient::ItemShippingDistributionCenter`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'allocated_to_placed_orders')
        self.allocated_to_placed_orders = attributes[:'allocated_to_placed_orders']
      end

      if attributes.key?(:'allocated_to_shopping_carts')
        self.allocated_to_shopping_carts = attributes[:'allocated_to_shopping_carts']
      end

      if attributes.key?(:'available_to_allocate')
        self.available_to_allocate = attributes[:'available_to_allocate']
      end

      if attributes.key?(:'cogs')
        self.cogs = attributes[:'cogs']
      end

      if attributes.key?(:'desired_inventory_level')
        self.desired_inventory_level = attributes[:'desired_inventory_level']
      end

      if attributes.key?(:'distribution_center_code')
        self.distribution_center_code = attributes[:'distribution_center_code']
      end

      if attributes.key?(:'distribution_center_oid')
        self.distribution_center_oid = attributes[:'distribution_center_oid']
      end

      if attributes.key?(:'eta')
        self.eta = attributes[:'eta']
      end

      if attributes.key?(:'handles')
        self.handles = attributes[:'handles']
      end

      if attributes.key?(:'inventory_level')
        self.inventory_level = attributes[:'inventory_level']
      end

      if attributes.key?(:'maximum_backorder')
        self.maximum_backorder = attributes[:'maximum_backorder']
      end

      if attributes.key?(:'reorder_inventory_level')
        self.reorder_inventory_level = attributes[:'reorder_inventory_level']
      end

      if attributes.key?(:'sku')
        self.sku = attributes[:'sku']
      end

      if attributes.key?(:'stock_picking_location')
        self.stock_picking_location = attributes[:'stock_picking_location']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@sku.nil? && @sku.to_s.length > 50
        invalid_properties.push('invalid value for "sku", the character length must be smaller than or equal to 50.')
      end

      if !@stock_picking_location.nil? && @stock_picking_location.to_s.length > 20
        invalid_properties.push('invalid value for "stock_picking_location", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@sku.nil? && @sku.to_s.length > 50
      return false if !@stock_picking_location.nil? && @stock_picking_location.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] sku Value to be assigned
    def sku=(sku)
      if !sku.nil? && sku.to_s.length > 50
        fail ArgumentError, 'invalid value for "sku", the character length must be smaller than or equal to 50.'
      end

      @sku = sku
    end

    # Custom attribute writer method with validation
    # @param [Object] stock_picking_location Value to be assigned
    def stock_picking_location=(stock_picking_location)
      if !stock_picking_location.nil? && stock_picking_location.to_s.length > 20
        fail ArgumentError, 'invalid value for "stock_picking_location", the character length must be smaller than or equal to 20.'
      end

      @stock_picking_location = stock_picking_location
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          allocated_to_placed_orders == o.allocated_to_placed_orders &&
          allocated_to_shopping_carts == o.allocated_to_shopping_carts &&
          available_to_allocate == o.available_to_allocate &&
          cogs == o.cogs &&
          desired_inventory_level == o.desired_inventory_level &&
          distribution_center_code == o.distribution_center_code &&
          distribution_center_oid == o.distribution_center_oid &&
          eta == o.eta &&
          handles == o.handles &&
          inventory_level == o.inventory_level &&
          maximum_backorder == o.maximum_backorder &&
          reorder_inventory_level == o.reorder_inventory_level &&
          sku == o.sku &&
          stock_picking_location == o.stock_picking_location
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [allocated_to_placed_orders, allocated_to_shopping_carts, available_to_allocate, cogs, desired_inventory_level, distribution_center_code, distribution_center_oid, eta, handles, inventory_level, maximum_backorder, reorder_inventory_level, sku, stock_picking_location].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = UltracartClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
