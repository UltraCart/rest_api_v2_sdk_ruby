=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

The version of the OpenAPI document: 2.0.0
Contact: support@ultracart.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1-SNAPSHOT

=end

require 'date'
require 'time'

module UltracartClient
  class ReportDataSetQuery
    # True if a date range filter is provided with comparison date ranges and two results should be returned for the query.
    attr_accessor :comparison_results

    # A unique identifier assigned to the data set query that is returned.
    attr_accessor :data_set_query_uuid

    attr_accessor :data_source

    attr_accessor :dimensions

    attr_accessor :filter

    # An identifier that can be used to help match up the returned data set
    attr_accessor :for_object_id

    # The type of object this data set is for
    attr_accessor :for_object_type

    attr_accessor :metrics

    # The columns to order by in the final result.  If not specified the dimensions will be used
    attr_accessor :order_by_columns

    # Result set page size.  The default value is 200 records.  Max is 10000.
    attr_accessor :page_size

    attr_accessor :selected_filters

    # True if the 15 minute cache should be skipped.
    attr_accessor :skip_cache

    # Any other data that needs to be returned with the response to help the UI
    attr_accessor :user_data

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'comparison_results' => :'comparison_results',
        :'data_set_query_uuid' => :'data_set_query_uuid',
        :'data_source' => :'data_source',
        :'dimensions' => :'dimensions',
        :'filter' => :'filter',
        :'for_object_id' => :'for_object_id',
        :'for_object_type' => :'for_object_type',
        :'metrics' => :'metrics',
        :'order_by_columns' => :'order_by_columns',
        :'page_size' => :'page_size',
        :'selected_filters' => :'selected_filters',
        :'skip_cache' => :'skip_cache',
        :'user_data' => :'user_data'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'comparison_results' => :'Boolean',
        :'data_set_query_uuid' => :'String',
        :'data_source' => :'ReportDataSource',
        :'dimensions' => :'Array<ReportPageVisualizationDimension>',
        :'filter' => :'ReportFilter',
        :'for_object_id' => :'String',
        :'for_object_type' => :'String',
        :'metrics' => :'Array<ReportPageVisualizationMetric>',
        :'order_by_columns' => :'Array<ReportDataSetQueryOrderByColumn>',
        :'page_size' => :'Integer',
        :'selected_filters' => :'Array<ReportFilter>',
        :'skip_cache' => :'Boolean',
        :'user_data' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `UltracartClient::ReportDataSetQuery` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `UltracartClient::ReportDataSetQuery`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'comparison_results')
        self.comparison_results = attributes[:'comparison_results']
      end

      if attributes.key?(:'data_set_query_uuid')
        self.data_set_query_uuid = attributes[:'data_set_query_uuid']
      end

      if attributes.key?(:'data_source')
        self.data_source = attributes[:'data_source']
      end

      if attributes.key?(:'dimensions')
        if (value = attributes[:'dimensions']).is_a?(Array)
          self.dimensions = value
        end
      end

      if attributes.key?(:'filter')
        self.filter = attributes[:'filter']
      end

      if attributes.key?(:'for_object_id')
        self.for_object_id = attributes[:'for_object_id']
      end

      if attributes.key?(:'for_object_type')
        self.for_object_type = attributes[:'for_object_type']
      end

      if attributes.key?(:'metrics')
        if (value = attributes[:'metrics']).is_a?(Array)
          self.metrics = value
        end
      end

      if attributes.key?(:'order_by_columns')
        if (value = attributes[:'order_by_columns']).is_a?(Array)
          self.order_by_columns = value
        end
      end

      if attributes.key?(:'page_size')
        self.page_size = attributes[:'page_size']
      end

      if attributes.key?(:'selected_filters')
        if (value = attributes[:'selected_filters']).is_a?(Array)
          self.selected_filters = value
        end
      end

      if attributes.key?(:'skip_cache')
        self.skip_cache = attributes[:'skip_cache']
      end

      if attributes.key?(:'user_data')
        self.user_data = attributes[:'user_data']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      for_object_type_validator = EnumAttributeValidator.new('String', ["schema", "filter", "visualization"])
      return false unless for_object_type_validator.valid?(@for_object_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] for_object_type Object to be assigned
    def for_object_type=(for_object_type)
      validator = EnumAttributeValidator.new('String', ["schema", "filter", "visualization"])
      unless validator.valid?(for_object_type)
        fail ArgumentError, "invalid value for \"for_object_type\", must be one of #{validator.allowable_values}."
      end
      @for_object_type = for_object_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          comparison_results == o.comparison_results &&
          data_set_query_uuid == o.data_set_query_uuid &&
          data_source == o.data_source &&
          dimensions == o.dimensions &&
          filter == o.filter &&
          for_object_id == o.for_object_id &&
          for_object_type == o.for_object_type &&
          metrics == o.metrics &&
          order_by_columns == o.order_by_columns &&
          page_size == o.page_size &&
          selected_filters == o.selected_filters &&
          skip_cache == o.skip_cache &&
          user_data == o.user_data
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [comparison_results, data_set_query_uuid, data_source, dimensions, filter, for_object_id, for_object_type, metrics, order_by_columns, page_size, selected_filters, skip_cache, user_data].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = UltracartClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
