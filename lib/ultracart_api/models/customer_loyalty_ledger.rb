=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

The version of the OpenAPI document: 2.0.0
Contact: support@ultracart.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1-SNAPSHOT

=end

require 'date'
require 'time'

module UltracartClient
  class CustomerLoyaltyLedger
    # Created By
    attr_accessor :created_by

    # Created date
    attr_accessor :created_dts

    # Description
    attr_accessor :description

    # Email
    attr_accessor :email

    # Item Id
    attr_accessor :item_id

    # Item Index
    attr_accessor :item_index

    # Ledger date
    attr_accessor :ledger_dts

    # Loyalty campaign oid
    attr_accessor :loyalty_campaign_oid

    # Loyalty ledger oid
    attr_accessor :loyalty_ledger_oid

    # Loyalty points
    attr_accessor :loyalty_points

    # Modified By
    attr_accessor :modified_by

    # Modified date
    attr_accessor :modified_dts

    # Order Id
    attr_accessor :order_id

    # Quantity
    attr_accessor :quantity

    # Vesting date
    attr_accessor :vesting_dts

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'created_by' => :'created_by',
        :'created_dts' => :'created_dts',
        :'description' => :'description',
        :'email' => :'email',
        :'item_id' => :'item_id',
        :'item_index' => :'item_index',
        :'ledger_dts' => :'ledger_dts',
        :'loyalty_campaign_oid' => :'loyalty_campaign_oid',
        :'loyalty_ledger_oid' => :'loyalty_ledger_oid',
        :'loyalty_points' => :'loyalty_points',
        :'modified_by' => :'modified_by',
        :'modified_dts' => :'modified_dts',
        :'order_id' => :'order_id',
        :'quantity' => :'quantity',
        :'vesting_dts' => :'vesting_dts'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'created_by' => :'String',
        :'created_dts' => :'String',
        :'description' => :'String',
        :'email' => :'String',
        :'item_id' => :'String',
        :'item_index' => :'Integer',
        :'ledger_dts' => :'String',
        :'loyalty_campaign_oid' => :'Integer',
        :'loyalty_ledger_oid' => :'Integer',
        :'loyalty_points' => :'Integer',
        :'modified_by' => :'String',
        :'modified_dts' => :'String',
        :'order_id' => :'String',
        :'quantity' => :'Integer',
        :'vesting_dts' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `UltracartClient::CustomerLoyaltyLedger` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `UltracartClient::CustomerLoyaltyLedger`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.key?(:'created_dts')
        self.created_dts = attributes[:'created_dts']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'item_id')
        self.item_id = attributes[:'item_id']
      end

      if attributes.key?(:'item_index')
        self.item_index = attributes[:'item_index']
      end

      if attributes.key?(:'ledger_dts')
        self.ledger_dts = attributes[:'ledger_dts']
      end

      if attributes.key?(:'loyalty_campaign_oid')
        self.loyalty_campaign_oid = attributes[:'loyalty_campaign_oid']
      end

      if attributes.key?(:'loyalty_ledger_oid')
        self.loyalty_ledger_oid = attributes[:'loyalty_ledger_oid']
      end

      if attributes.key?(:'loyalty_points')
        self.loyalty_points = attributes[:'loyalty_points']
      end

      if attributes.key?(:'modified_by')
        self.modified_by = attributes[:'modified_by']
      end

      if attributes.key?(:'modified_dts')
        self.modified_dts = attributes[:'modified_dts']
      end

      if attributes.key?(:'order_id')
        self.order_id = attributes[:'order_id']
      end

      if attributes.key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.key?(:'vesting_dts')
        self.vesting_dts = attributes[:'vesting_dts']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          created_by == o.created_by &&
          created_dts == o.created_dts &&
          description == o.description &&
          email == o.email &&
          item_id == o.item_id &&
          item_index == o.item_index &&
          ledger_dts == o.ledger_dts &&
          loyalty_campaign_oid == o.loyalty_campaign_oid &&
          loyalty_ledger_oid == o.loyalty_ledger_oid &&
          loyalty_points == o.loyalty_points &&
          modified_by == o.modified_by &&
          modified_dts == o.modified_dts &&
          order_id == o.order_id &&
          quantity == o.quantity &&
          vesting_dts == o.vesting_dts
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [created_by, created_dts, description, email, item_id, item_index, ledger_dts, loyalty_campaign_oid, loyalty_ledger_oid, loyalty_points, modified_by, modified_dts, order_id, quantity, vesting_dts].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = UltracartClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
