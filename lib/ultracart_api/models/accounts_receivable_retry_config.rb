=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

OpenAPI spec version: 2.0.0
Contact: support@ultracart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'date'

module UltracartClient
  class AccountsReceivableRetryConfig
    # True if the retry should run daily.  False puts the retry service into an inactive state for this merchant.
    attr_accessor :active

    # True if this account has linked accounts that it can process.
    attr_accessor :allow_process_linked_accounts

    # If true also cancel the auto order if the order is rejected at the end
    attr_accessor :cancel_auto_order

    # The current service plan that the account is on.
    attr_accessor :current_service_plan

    # A list of days and what actions should take place on those days after an order reaches accounts receivable
    attr_accessor :daily_activity_list

    # If not null, this account is managed by the specified parent merchant id.
    attr_accessor :managed_by_linked_account_merchant_id

    # UltraCart merchant ID
    attr_accessor :merchant_id

    # A list of email addresses to receive summary notifications from the retry service.
    attr_accessor :notify_emails

    # If true, email addresses are notified of rejections.
    attr_accessor :notify_rejections

    # If true, email addresses are notified of successful charges.
    attr_accessor :notify_successes

    # If true, all linked accounts are also processed using the same rules.
    attr_accessor :process_linked_accounts

    # The percentage rate charged for the service.
    attr_accessor :processing_percentage

    # If true, the order is rejected the day after the last configured activity day
    attr_accessor :reject_at_end

    # True if the account is currently in trial mode.  Set to false to exit trial mode.
    attr_accessor :trial_mode

    # The date when trial mode expires.  If this date is reached without exiting trial mode, the service will de-activate.
    attr_accessor :trial_mode_expiration_dts

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'active' => :'active',
        :'allow_process_linked_accounts' => :'allow_process_linked_accounts',
        :'cancel_auto_order' => :'cancel_auto_order',
        :'current_service_plan' => :'current_service_plan',
        :'daily_activity_list' => :'daily_activity_list',
        :'managed_by_linked_account_merchant_id' => :'managed_by_linked_account_merchant_id',
        :'merchant_id' => :'merchant_id',
        :'notify_emails' => :'notify_emails',
        :'notify_rejections' => :'notify_rejections',
        :'notify_successes' => :'notify_successes',
        :'process_linked_accounts' => :'process_linked_accounts',
        :'processing_percentage' => :'processing_percentage',
        :'reject_at_end' => :'reject_at_end',
        :'trial_mode' => :'trial_mode',
        :'trial_mode_expiration_dts' => :'trial_mode_expiration_dts'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'active' => :'BOOLEAN',
        :'allow_process_linked_accounts' => :'BOOLEAN',
        :'cancel_auto_order' => :'BOOLEAN',
        :'current_service_plan' => :'String',
        :'daily_activity_list' => :'Array<AccountsReceivableRetryDayActivity>',
        :'managed_by_linked_account_merchant_id' => :'BOOLEAN',
        :'merchant_id' => :'String',
        :'notify_emails' => :'Array<String>',
        :'notify_rejections' => :'BOOLEAN',
        :'notify_successes' => :'BOOLEAN',
        :'process_linked_accounts' => :'BOOLEAN',
        :'processing_percentage' => :'String',
        :'reject_at_end' => :'BOOLEAN',
        :'trial_mode' => :'BOOLEAN',
        :'trial_mode_expiration_dts' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'active')
        self.active = attributes[:'active']
      end

      if attributes.has_key?(:'allow_process_linked_accounts')
        self.allow_process_linked_accounts = attributes[:'allow_process_linked_accounts']
      end

      if attributes.has_key?(:'cancel_auto_order')
        self.cancel_auto_order = attributes[:'cancel_auto_order']
      end

      if attributes.has_key?(:'current_service_plan')
        self.current_service_plan = attributes[:'current_service_plan']
      end

      if attributes.has_key?(:'daily_activity_list')
        if (value = attributes[:'daily_activity_list']).is_a?(Array)
          self.daily_activity_list = value
        end
      end

      if attributes.has_key?(:'managed_by_linked_account_merchant_id')
        self.managed_by_linked_account_merchant_id = attributes[:'managed_by_linked_account_merchant_id']
      end

      if attributes.has_key?(:'merchant_id')
        self.merchant_id = attributes[:'merchant_id']
      end

      if attributes.has_key?(:'notify_emails')
        if (value = attributes[:'notify_emails']).is_a?(Array)
          self.notify_emails = value
        end
      end

      if attributes.has_key?(:'notify_rejections')
        self.notify_rejections = attributes[:'notify_rejections']
      end

      if attributes.has_key?(:'notify_successes')
        self.notify_successes = attributes[:'notify_successes']
      end

      if attributes.has_key?(:'process_linked_accounts')
        self.process_linked_accounts = attributes[:'process_linked_accounts']
      end

      if attributes.has_key?(:'processing_percentage')
        self.processing_percentage = attributes[:'processing_percentage']
      end

      if attributes.has_key?(:'reject_at_end')
        self.reject_at_end = attributes[:'reject_at_end']
      end

      if attributes.has_key?(:'trial_mode')
        self.trial_mode = attributes[:'trial_mode']
      end

      if attributes.has_key?(:'trial_mode_expiration_dts')
        self.trial_mode_expiration_dts = attributes[:'trial_mode_expiration_dts']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          active == o.active &&
          allow_process_linked_accounts == o.allow_process_linked_accounts &&
          cancel_auto_order == o.cancel_auto_order &&
          current_service_plan == o.current_service_plan &&
          daily_activity_list == o.daily_activity_list &&
          managed_by_linked_account_merchant_id == o.managed_by_linked_account_merchant_id &&
          merchant_id == o.merchant_id &&
          notify_emails == o.notify_emails &&
          notify_rejections == o.notify_rejections &&
          notify_successes == o.notify_successes &&
          process_linked_accounts == o.process_linked_accounts &&
          processing_percentage == o.processing_percentage &&
          reject_at_end == o.reject_at_end &&
          trial_mode == o.trial_mode &&
          trial_mode_expiration_dts == o.trial_mode_expiration_dts
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [active, allow_process_linked_accounts, cancel_auto_order, current_service_plan, daily_activity_list, managed_by_linked_account_merchant_id, merchant_id, notify_emails, notify_rejections, notify_successes, process_linked_accounts, processing_percentage, reject_at_end, trial_mode, trial_mode_expiration_dts].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = UltracartClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
