=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

OpenAPI spec version: 2.0.0
Contact: support@ultracart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'date'

module UltracartClient
  class EmailPostcardTracking
    attr_accessor :commseq_postcard_uuid

    attr_accessor :commseq_step_uuid

    attr_accessor :commseq_uuid

    # Conversion date time.
    attr_accessor :conversion_dts

    attr_accessor :cost

    attr_accessor :customer_uuid

    # Delivered date time.
    attr_accessor :delivered_dts

    attr_accessor :from_address_line1

    attr_accessor :from_address_line2

    attr_accessor :from_city

    attr_accessor :from_name

    attr_accessor :from_state

    attr_accessor :from_zip

    # Mailed date time.
    attr_accessor :mailed_dts

    attr_accessor :order_id

    attr_accessor :postcard_tracking_uuid

    attr_accessor :status

    # Submit date time.
    attr_accessor :submit_dts

    attr_accessor :to_address_line1

    attr_accessor :to_address_line2

    attr_accessor :to_city

    attr_accessor :to_name

    attr_accessor :to_state

    attr_accessor :to_zip

    attr_accessor :tracking_description

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'commseq_postcard_uuid' => :'commseq_postcard_uuid',
        :'commseq_step_uuid' => :'commseq_step_uuid',
        :'commseq_uuid' => :'commseq_uuid',
        :'conversion_dts' => :'conversion_dts',
        :'cost' => :'cost',
        :'customer_uuid' => :'customer_uuid',
        :'delivered_dts' => :'delivered_dts',
        :'from_address_line1' => :'from_address_line1',
        :'from_address_line2' => :'from_address_line2',
        :'from_city' => :'from_city',
        :'from_name' => :'from_name',
        :'from_state' => :'from_state',
        :'from_zip' => :'from_zip',
        :'mailed_dts' => :'mailed_dts',
        :'order_id' => :'order_id',
        :'postcard_tracking_uuid' => :'postcard_tracking_uuid',
        :'status' => :'status',
        :'submit_dts' => :'submit_dts',
        :'to_address_line1' => :'to_address_line1',
        :'to_address_line2' => :'to_address_line2',
        :'to_city' => :'to_city',
        :'to_name' => :'to_name',
        :'to_state' => :'to_state',
        :'to_zip' => :'to_zip',
        :'tracking_description' => :'tracking_description'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'commseq_postcard_uuid' => :'String',
        :'commseq_step_uuid' => :'String',
        :'commseq_uuid' => :'String',
        :'conversion_dts' => :'String',
        :'cost' => :'Float',
        :'customer_uuid' => :'String',
        :'delivered_dts' => :'String',
        :'from_address_line1' => :'String',
        :'from_address_line2' => :'String',
        :'from_city' => :'String',
        :'from_name' => :'String',
        :'from_state' => :'String',
        :'from_zip' => :'String',
        :'mailed_dts' => :'String',
        :'order_id' => :'String',
        :'postcard_tracking_uuid' => :'String',
        :'status' => :'String',
        :'submit_dts' => :'String',
        :'to_address_line1' => :'String',
        :'to_address_line2' => :'String',
        :'to_city' => :'String',
        :'to_name' => :'String',
        :'to_state' => :'String',
        :'to_zip' => :'String',
        :'tracking_description' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'commseq_postcard_uuid')
        self.commseq_postcard_uuid = attributes[:'commseq_postcard_uuid']
      end

      if attributes.has_key?(:'commseq_step_uuid')
        self.commseq_step_uuid = attributes[:'commseq_step_uuid']
      end

      if attributes.has_key?(:'commseq_uuid')
        self.commseq_uuid = attributes[:'commseq_uuid']
      end

      if attributes.has_key?(:'conversion_dts')
        self.conversion_dts = attributes[:'conversion_dts']
      end

      if attributes.has_key?(:'cost')
        self.cost = attributes[:'cost']
      end

      if attributes.has_key?(:'customer_uuid')
        self.customer_uuid = attributes[:'customer_uuid']
      end

      if attributes.has_key?(:'delivered_dts')
        self.delivered_dts = attributes[:'delivered_dts']
      end

      if attributes.has_key?(:'from_address_line1')
        self.from_address_line1 = attributes[:'from_address_line1']
      end

      if attributes.has_key?(:'from_address_line2')
        self.from_address_line2 = attributes[:'from_address_line2']
      end

      if attributes.has_key?(:'from_city')
        self.from_city = attributes[:'from_city']
      end

      if attributes.has_key?(:'from_name')
        self.from_name = attributes[:'from_name']
      end

      if attributes.has_key?(:'from_state')
        self.from_state = attributes[:'from_state']
      end

      if attributes.has_key?(:'from_zip')
        self.from_zip = attributes[:'from_zip']
      end

      if attributes.has_key?(:'mailed_dts')
        self.mailed_dts = attributes[:'mailed_dts']
      end

      if attributes.has_key?(:'order_id')
        self.order_id = attributes[:'order_id']
      end

      if attributes.has_key?(:'postcard_tracking_uuid')
        self.postcard_tracking_uuid = attributes[:'postcard_tracking_uuid']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'submit_dts')
        self.submit_dts = attributes[:'submit_dts']
      end

      if attributes.has_key?(:'to_address_line1')
        self.to_address_line1 = attributes[:'to_address_line1']
      end

      if attributes.has_key?(:'to_address_line2')
        self.to_address_line2 = attributes[:'to_address_line2']
      end

      if attributes.has_key?(:'to_city')
        self.to_city = attributes[:'to_city']
      end

      if attributes.has_key?(:'to_name')
        self.to_name = attributes[:'to_name']
      end

      if attributes.has_key?(:'to_state')
        self.to_state = attributes[:'to_state']
      end

      if attributes.has_key?(:'to_zip')
        self.to_zip = attributes[:'to_zip']
      end

      if attributes.has_key?(:'tracking_description')
        self.tracking_description = attributes[:'tracking_description']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          commseq_postcard_uuid == o.commseq_postcard_uuid &&
          commseq_step_uuid == o.commseq_step_uuid &&
          commseq_uuid == o.commseq_uuid &&
          conversion_dts == o.conversion_dts &&
          cost == o.cost &&
          customer_uuid == o.customer_uuid &&
          delivered_dts == o.delivered_dts &&
          from_address_line1 == o.from_address_line1 &&
          from_address_line2 == o.from_address_line2 &&
          from_city == o.from_city &&
          from_name == o.from_name &&
          from_state == o.from_state &&
          from_zip == o.from_zip &&
          mailed_dts == o.mailed_dts &&
          order_id == o.order_id &&
          postcard_tracking_uuid == o.postcard_tracking_uuid &&
          status == o.status &&
          submit_dts == o.submit_dts &&
          to_address_line1 == o.to_address_line1 &&
          to_address_line2 == o.to_address_line2 &&
          to_city == o.to_city &&
          to_name == o.to_name &&
          to_state == o.to_state &&
          to_zip == o.to_zip &&
          tracking_description == o.tracking_description
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [commseq_postcard_uuid, commseq_step_uuid, commseq_uuid, conversion_dts, cost, customer_uuid, delivered_dts, from_address_line1, from_address_line2, from_city, from_name, from_state, from_zip, mailed_dts, order_id, postcard_tracking_uuid, status, submit_dts, to_address_line1, to_address_line2, to_city, to_name, to_state, to_zip, tracking_description].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = UltracartClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
