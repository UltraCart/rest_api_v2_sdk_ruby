=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

OpenAPI spec version: 2.0.0
Contact: support@ultracart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'date'

module UltracartClient
  class ConversationPbxMenu
    # If true, the customer is allowed to input direct extensions within this menu
    attr_accessor :allow_direct_extensions

    # Conversation Pbx Menu UUID
    attr_accessor :conversation_pbx_menu_uuid

    # The default action for this menu
    attr_accessor :default_action

    # The default action target for this menu
    attr_accessor :default_action_target

    # Action mappings for this menu
    attr_accessor :mappings

    # Merchant Id
    attr_accessor :merchant_id

    # Menu name
    attr_accessor :name

    # An optional audio clip that plays when a customer enters this menu
    attr_accessor :play_audio_uuid

    # An optional saying that plays when a customer enters this menu
    attr_accessor :say

    # The idle seconds before this menu times out
    attr_accessor :timeout

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'allow_direct_extensions' => :'allow_direct_extensions',
        :'conversation_pbx_menu_uuid' => :'conversation_pbx_menu_uuid',
        :'default_action' => :'default_action',
        :'default_action_target' => :'default_action_target',
        :'mappings' => :'mappings',
        :'merchant_id' => :'merchant_id',
        :'name' => :'name',
        :'play_audio_uuid' => :'play_audio_uuid',
        :'say' => :'say',
        :'timeout' => :'timeout'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'allow_direct_extensions' => :'BOOLEAN',
        :'conversation_pbx_menu_uuid' => :'String',
        :'default_action' => :'String',
        :'default_action_target' => :'String',
        :'mappings' => :'Array<ConversationPbxMenuMapping>',
        :'merchant_id' => :'String',
        :'name' => :'String',
        :'play_audio_uuid' => :'String',
        :'say' => :'String',
        :'timeout' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'allow_direct_extensions')
        self.allow_direct_extensions = attributes[:'allow_direct_extensions']
      end

      if attributes.has_key?(:'conversation_pbx_menu_uuid')
        self.conversation_pbx_menu_uuid = attributes[:'conversation_pbx_menu_uuid']
      end

      if attributes.has_key?(:'default_action')
        self.default_action = attributes[:'default_action']
      end

      if attributes.has_key?(:'default_action_target')
        self.default_action_target = attributes[:'default_action_target']
      end

      if attributes.has_key?(:'mappings')
        if (value = attributes[:'mappings']).is_a?(Array)
          self.mappings = value
        end
      end

      if attributes.has_key?(:'merchant_id')
        self.merchant_id = attributes[:'merchant_id']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'play_audio_uuid')
        self.play_audio_uuid = attributes[:'play_audio_uuid']
      end

      if attributes.has_key?(:'say')
        self.say = attributes[:'say']
      end

      if attributes.has_key?(:'timeout')
        self.timeout = attributes[:'timeout']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@conversation_pbx_menu_uuid.nil? && @conversation_pbx_menu_uuid.to_s.length > 50
        invalid_properties.push('invalid value for "conversation_pbx_menu_uuid", the character length must be smaller than or equal to 50.')
      end

      if !@default_action.nil? && @default_action.to_s.length > 30
        invalid_properties.push('invalid value for "default_action", the character length must be smaller than or equal to 30.')
      end

      if !@default_action_target.nil? && @default_action_target.to_s.length > 50
        invalid_properties.push('invalid value for "default_action_target", the character length must be smaller than or equal to 50.')
      end

      if !@merchant_id.nil? && @merchant_id.to_s.length > 5
        invalid_properties.push('invalid value for "merchant_id", the character length must be smaller than or equal to 5.')
      end

      if !@name.nil? && @name.to_s.length > 50
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 50.')
      end

      if !@play_audio_uuid.nil? && @play_audio_uuid.to_s.length > 50
        invalid_properties.push('invalid value for "play_audio_uuid", the character length must be smaller than or equal to 50.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@conversation_pbx_menu_uuid.nil? && @conversation_pbx_menu_uuid.to_s.length > 50
      return false if !@default_action.nil? && @default_action.to_s.length > 30
      return false if !@default_action_target.nil? && @default_action_target.to_s.length > 50
      return false if !@merchant_id.nil? && @merchant_id.to_s.length > 5
      return false if !@name.nil? && @name.to_s.length > 50
      return false if !@play_audio_uuid.nil? && @play_audio_uuid.to_s.length > 50
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] conversation_pbx_menu_uuid Value to be assigned
    def conversation_pbx_menu_uuid=(conversation_pbx_menu_uuid)
      if !conversation_pbx_menu_uuid.nil? && conversation_pbx_menu_uuid.to_s.length > 50
        fail ArgumentError, 'invalid value for "conversation_pbx_menu_uuid", the character length must be smaller than or equal to 50.'
      end

      @conversation_pbx_menu_uuid = conversation_pbx_menu_uuid
    end

    # Custom attribute writer method with validation
    # @param [Object] default_action Value to be assigned
    def default_action=(default_action)
      if !default_action.nil? && default_action.to_s.length > 30
        fail ArgumentError, 'invalid value for "default_action", the character length must be smaller than or equal to 30.'
      end

      @default_action = default_action
    end

    # Custom attribute writer method with validation
    # @param [Object] default_action_target Value to be assigned
    def default_action_target=(default_action_target)
      if !default_action_target.nil? && default_action_target.to_s.length > 50
        fail ArgumentError, 'invalid value for "default_action_target", the character length must be smaller than or equal to 50.'
      end

      @default_action_target = default_action_target
    end

    # Custom attribute writer method with validation
    # @param [Object] merchant_id Value to be assigned
    def merchant_id=(merchant_id)
      if !merchant_id.nil? && merchant_id.to_s.length > 5
        fail ArgumentError, 'invalid value for "merchant_id", the character length must be smaller than or equal to 5.'
      end

      @merchant_id = merchant_id
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if !name.nil? && name.to_s.length > 50
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 50.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] play_audio_uuid Value to be assigned
    def play_audio_uuid=(play_audio_uuid)
      if !play_audio_uuid.nil? && play_audio_uuid.to_s.length > 50
        fail ArgumentError, 'invalid value for "play_audio_uuid", the character length must be smaller than or equal to 50.'
      end

      @play_audio_uuid = play_audio_uuid
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          allow_direct_extensions == o.allow_direct_extensions &&
          conversation_pbx_menu_uuid == o.conversation_pbx_menu_uuid &&
          default_action == o.default_action &&
          default_action_target == o.default_action_target &&
          mappings == o.mappings &&
          merchant_id == o.merchant_id &&
          name == o.name &&
          play_audio_uuid == o.play_audio_uuid &&
          say == o.say &&
          timeout == o.timeout
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [allow_direct_extensions, conversation_pbx_menu_uuid, default_action, default_action_target, mappings, merchant_id, name, play_audio_uuid, say, timeout].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = UltracartClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
