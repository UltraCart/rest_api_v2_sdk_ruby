=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

OpenAPI spec version: 2.0.0
Contact: support@ultracart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'date'

module UltracartClient
  class EmailCommseqEmail
    # Deleted
    attr_accessor :deleted

    # Edited by user
    attr_accessor :edited_by_user

    # Email communication sequence email uuid
    attr_accessor :email_communication_sequence_email_uuid

    # Email commseq UUID
    attr_accessor :email_communication_sequence_uuid

    # Email container cjson
    attr_accessor :email_container_cjson

    # Timestamp the last time the container was modified.
    attr_accessor :email_container_cjson_last_modified_dts

    # Email template virtual path
    attr_accessor :email_template_vm_path

    # Filter profile equation json
    attr_accessor :filter_profile_equation_json

    # Individually render
    attr_accessor :individually_render

    # If this item was ever added to the Code Library, this is the oid for that library item, or 0 if never added before.  This value is used to determine if a library item should be inserted or updated.
    attr_accessor :library_item_oid

    # True if email links should contain magic link tokens to log the customer in automatically
    attr_accessor :magic_link

    # Merchant ID
    attr_accessor :merchant_id

    # True if the content of this email is pending review by UltraCart
    attr_accessor :pending_review

    # Preview text
    attr_accessor :preview_text

    # True if the content of this email was rejected during review by UltraCart
    attr_accessor :rejected

    # True if the content of this email is requires review by UltraCart
    attr_accessor :requires_review

    # URL to screenshot in large form factor full page
    attr_accessor :screenshot_large_full_url

    # URL to screenshot in large form factor viewport
    attr_accessor :screenshot_large_viewport_url

    # URL to screenshot in small form factor full page
    attr_accessor :screenshot_small_full_url

    # URL to screenshot in small form factor viewport
    attr_accessor :screenshot_small_viewport_url

    # Smart sending
    attr_accessor :smart_sending

    # Storefront oid
    attr_accessor :storefront_oid

    # Subject
    attr_accessor :subject

    # True if the email was suspended for too high of a spam rate.
    attr_accessor :suspended_for_spam

    # Transactional email
    attr_accessor :transactional_email

    # Version
    attr_accessor :version

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'deleted' => :'deleted',
        :'edited_by_user' => :'edited_by_user',
        :'email_communication_sequence_email_uuid' => :'email_communication_sequence_email_uuid',
        :'email_communication_sequence_uuid' => :'email_communication_sequence_uuid',
        :'email_container_cjson' => :'email_container_cjson',
        :'email_container_cjson_last_modified_dts' => :'email_container_cjson_last_modified_dts',
        :'email_template_vm_path' => :'email_template_vm_path',
        :'filter_profile_equation_json' => :'filter_profile_equation_json',
        :'individually_render' => :'individually_render',
        :'library_item_oid' => :'library_item_oid',
        :'magic_link' => :'magic_link',
        :'merchant_id' => :'merchant_id',
        :'pending_review' => :'pending_review',
        :'preview_text' => :'preview_text',
        :'rejected' => :'rejected',
        :'requires_review' => :'requires_review',
        :'screenshot_large_full_url' => :'screenshot_large_full_url',
        :'screenshot_large_viewport_url' => :'screenshot_large_viewport_url',
        :'screenshot_small_full_url' => :'screenshot_small_full_url',
        :'screenshot_small_viewport_url' => :'screenshot_small_viewport_url',
        :'smart_sending' => :'smart_sending',
        :'storefront_oid' => :'storefront_oid',
        :'subject' => :'subject',
        :'suspended_for_spam' => :'suspended_for_spam',
        :'transactional_email' => :'transactional_email',
        :'version' => :'version'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'deleted' => :'BOOLEAN',
        :'edited_by_user' => :'String',
        :'email_communication_sequence_email_uuid' => :'String',
        :'email_communication_sequence_uuid' => :'String',
        :'email_container_cjson' => :'String',
        :'email_container_cjson_last_modified_dts' => :'String',
        :'email_template_vm_path' => :'String',
        :'filter_profile_equation_json' => :'String',
        :'individually_render' => :'BOOLEAN',
        :'library_item_oid' => :'Integer',
        :'magic_link' => :'BOOLEAN',
        :'merchant_id' => :'String',
        :'pending_review' => :'BOOLEAN',
        :'preview_text' => :'String',
        :'rejected' => :'BOOLEAN',
        :'requires_review' => :'BOOLEAN',
        :'screenshot_large_full_url' => :'String',
        :'screenshot_large_viewport_url' => :'String',
        :'screenshot_small_full_url' => :'String',
        :'screenshot_small_viewport_url' => :'String',
        :'smart_sending' => :'BOOLEAN',
        :'storefront_oid' => :'Integer',
        :'subject' => :'String',
        :'suspended_for_spam' => :'BOOLEAN',
        :'transactional_email' => :'BOOLEAN',
        :'version' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'deleted')
        self.deleted = attributes[:'deleted']
      end

      if attributes.has_key?(:'edited_by_user')
        self.edited_by_user = attributes[:'edited_by_user']
      end

      if attributes.has_key?(:'email_communication_sequence_email_uuid')
        self.email_communication_sequence_email_uuid = attributes[:'email_communication_sequence_email_uuid']
      end

      if attributes.has_key?(:'email_communication_sequence_uuid')
        self.email_communication_sequence_uuid = attributes[:'email_communication_sequence_uuid']
      end

      if attributes.has_key?(:'email_container_cjson')
        self.email_container_cjson = attributes[:'email_container_cjson']
      end

      if attributes.has_key?(:'email_container_cjson_last_modified_dts')
        self.email_container_cjson_last_modified_dts = attributes[:'email_container_cjson_last_modified_dts']
      end

      if attributes.has_key?(:'email_template_vm_path')
        self.email_template_vm_path = attributes[:'email_template_vm_path']
      end

      if attributes.has_key?(:'filter_profile_equation_json')
        self.filter_profile_equation_json = attributes[:'filter_profile_equation_json']
      end

      if attributes.has_key?(:'individually_render')
        self.individually_render = attributes[:'individually_render']
      end

      if attributes.has_key?(:'library_item_oid')
        self.library_item_oid = attributes[:'library_item_oid']
      end

      if attributes.has_key?(:'magic_link')
        self.magic_link = attributes[:'magic_link']
      end

      if attributes.has_key?(:'merchant_id')
        self.merchant_id = attributes[:'merchant_id']
      end

      if attributes.has_key?(:'pending_review')
        self.pending_review = attributes[:'pending_review']
      end

      if attributes.has_key?(:'preview_text')
        self.preview_text = attributes[:'preview_text']
      end

      if attributes.has_key?(:'rejected')
        self.rejected = attributes[:'rejected']
      end

      if attributes.has_key?(:'requires_review')
        self.requires_review = attributes[:'requires_review']
      end

      if attributes.has_key?(:'screenshot_large_full_url')
        self.screenshot_large_full_url = attributes[:'screenshot_large_full_url']
      end

      if attributes.has_key?(:'screenshot_large_viewport_url')
        self.screenshot_large_viewport_url = attributes[:'screenshot_large_viewport_url']
      end

      if attributes.has_key?(:'screenshot_small_full_url')
        self.screenshot_small_full_url = attributes[:'screenshot_small_full_url']
      end

      if attributes.has_key?(:'screenshot_small_viewport_url')
        self.screenshot_small_viewport_url = attributes[:'screenshot_small_viewport_url']
      end

      if attributes.has_key?(:'smart_sending')
        self.smart_sending = attributes[:'smart_sending']
      end

      if attributes.has_key?(:'storefront_oid')
        self.storefront_oid = attributes[:'storefront_oid']
      end

      if attributes.has_key?(:'subject')
        self.subject = attributes[:'subject']
      end

      if attributes.has_key?(:'suspended_for_spam')
        self.suspended_for_spam = attributes[:'suspended_for_spam']
      end

      if attributes.has_key?(:'transactional_email')
        self.transactional_email = attributes[:'transactional_email']
      end

      if attributes.has_key?(:'version')
        self.version = attributes[:'version']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          deleted == o.deleted &&
          edited_by_user == o.edited_by_user &&
          email_communication_sequence_email_uuid == o.email_communication_sequence_email_uuid &&
          email_communication_sequence_uuid == o.email_communication_sequence_uuid &&
          email_container_cjson == o.email_container_cjson &&
          email_container_cjson_last_modified_dts == o.email_container_cjson_last_modified_dts &&
          email_template_vm_path == o.email_template_vm_path &&
          filter_profile_equation_json == o.filter_profile_equation_json &&
          individually_render == o.individually_render &&
          library_item_oid == o.library_item_oid &&
          magic_link == o.magic_link &&
          merchant_id == o.merchant_id &&
          pending_review == o.pending_review &&
          preview_text == o.preview_text &&
          rejected == o.rejected &&
          requires_review == o.requires_review &&
          screenshot_large_full_url == o.screenshot_large_full_url &&
          screenshot_large_viewport_url == o.screenshot_large_viewport_url &&
          screenshot_small_full_url == o.screenshot_small_full_url &&
          screenshot_small_viewport_url == o.screenshot_small_viewport_url &&
          smart_sending == o.smart_sending &&
          storefront_oid == o.storefront_oid &&
          subject == o.subject &&
          suspended_for_spam == o.suspended_for_spam &&
          transactional_email == o.transactional_email &&
          version == o.version
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [deleted, edited_by_user, email_communication_sequence_email_uuid, email_communication_sequence_uuid, email_container_cjson, email_container_cjson_last_modified_dts, email_template_vm_path, filter_profile_equation_json, individually_render, library_item_oid, magic_link, merchant_id, pending_review, preview_text, rejected, requires_review, screenshot_large_full_url, screenshot_large_viewport_url, screenshot_small_full_url, screenshot_small_viewport_url, smart_sending, storefront_oid, subject, suspended_for_spam, transactional_email, version].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = UltracartClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
