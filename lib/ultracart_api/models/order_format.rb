=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

The version of the OpenAPI document: 2.0.0
Contact: support@ultracart.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1-SNAPSHOT

=end

require 'date'
require 'time'

module UltracartClient
  class OrderFormat
    # The context to generate the order view for.
    attr_accessor :context

    # True to not link the email address to the order search
    attr_accessor :dont_link_email_to_search

    # True to make the email address a clickable mailto link
    attr_accessor :email_as_link

    # Specify a distribution center oid to filter the items displayed to that particular distribution center.
    attr_accessor :filter_distribution_center_oid

    # The container oid to filter items to.
    attr_accessor :filter_to_items_in_container_oid

    # The desired format.
    attr_accessor :format

    # True to ide the bill to address
    attr_accessor :hide_bill_to_address

    # True to hide price information
    attr_accessor :hide_price_information

    # True to link file attachments for download
    attr_accessor :link_file_attachments

    # True to show contact information
    attr_accessor :show_contact_info

    # True to show the order in the merchant currency
    attr_accessor :show_in_merchant_currency

    # True to show internal information about the order
    attr_accessor :show_internal_information

    # True to show merchant notes
    attr_accessor :show_merchant_notes

    # True to show non-sensitive payment information
    attr_accessor :show_non_sensitive_payment_info

    # True to show payment information
    attr_accessor :show_payment_info

    # True to translate the order into the native language of the customer
    attr_accessor :translate

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'context' => :'context',
        :'dont_link_email_to_search' => :'dont_link_email_to_search',
        :'email_as_link' => :'email_as_link',
        :'filter_distribution_center_oid' => :'filter_distribution_center_oid',
        :'filter_to_items_in_container_oid' => :'filter_to_items_in_container_oid',
        :'format' => :'format',
        :'hide_bill_to_address' => :'hide_bill_to_address',
        :'hide_price_information' => :'hide_price_information',
        :'link_file_attachments' => :'link_file_attachments',
        :'show_contact_info' => :'show_contact_info',
        :'show_in_merchant_currency' => :'show_in_merchant_currency',
        :'show_internal_information' => :'show_internal_information',
        :'show_merchant_notes' => :'show_merchant_notes',
        :'show_non_sensitive_payment_info' => :'show_non_sensitive_payment_info',
        :'show_payment_info' => :'show_payment_info',
        :'translate' => :'translate'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'context' => :'String',
        :'dont_link_email_to_search' => :'Boolean',
        :'email_as_link' => :'Boolean',
        :'filter_distribution_center_oid' => :'Integer',
        :'filter_to_items_in_container_oid' => :'Integer',
        :'format' => :'String',
        :'hide_bill_to_address' => :'Boolean',
        :'hide_price_information' => :'Boolean',
        :'link_file_attachments' => :'Boolean',
        :'show_contact_info' => :'Boolean',
        :'show_in_merchant_currency' => :'Boolean',
        :'show_internal_information' => :'Boolean',
        :'show_merchant_notes' => :'Boolean',
        :'show_non_sensitive_payment_info' => :'Boolean',
        :'show_payment_info' => :'Boolean',
        :'translate' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `UltracartClient::OrderFormat` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `UltracartClient::OrderFormat`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'context')
        self.context = attributes[:'context']
      end

      if attributes.key?(:'dont_link_email_to_search')
        self.dont_link_email_to_search = attributes[:'dont_link_email_to_search']
      end

      if attributes.key?(:'email_as_link')
        self.email_as_link = attributes[:'email_as_link']
      end

      if attributes.key?(:'filter_distribution_center_oid')
        self.filter_distribution_center_oid = attributes[:'filter_distribution_center_oid']
      end

      if attributes.key?(:'filter_to_items_in_container_oid')
        self.filter_to_items_in_container_oid = attributes[:'filter_to_items_in_container_oid']
      end

      if attributes.key?(:'format')
        self.format = attributes[:'format']
      end

      if attributes.key?(:'hide_bill_to_address')
        self.hide_bill_to_address = attributes[:'hide_bill_to_address']
      end

      if attributes.key?(:'hide_price_information')
        self.hide_price_information = attributes[:'hide_price_information']
      end

      if attributes.key?(:'link_file_attachments')
        self.link_file_attachments = attributes[:'link_file_attachments']
      end

      if attributes.key?(:'show_contact_info')
        self.show_contact_info = attributes[:'show_contact_info']
      end

      if attributes.key?(:'show_in_merchant_currency')
        self.show_in_merchant_currency = attributes[:'show_in_merchant_currency']
      end

      if attributes.key?(:'show_internal_information')
        self.show_internal_information = attributes[:'show_internal_information']
      end

      if attributes.key?(:'show_merchant_notes')
        self.show_merchant_notes = attributes[:'show_merchant_notes']
      end

      if attributes.key?(:'show_non_sensitive_payment_info')
        self.show_non_sensitive_payment_info = attributes[:'show_non_sensitive_payment_info']
      end

      if attributes.key?(:'show_payment_info')
        self.show_payment_info = attributes[:'show_payment_info']
      end

      if attributes.key?(:'translate')
        self.translate = attributes[:'translate']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      format_validator = EnumAttributeValidator.new('String', ["text", "div", "table", "email"])
      return false unless format_validator.valid?(@format)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] format Object to be assigned
    def format=(format)
      validator = EnumAttributeValidator.new('String', ["text", "div", "table", "email"])
      unless validator.valid?(format)
        fail ArgumentError, "invalid value for \"format\", must be one of #{validator.allowable_values}."
      end
      @format = format
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          context == o.context &&
          dont_link_email_to_search == o.dont_link_email_to_search &&
          email_as_link == o.email_as_link &&
          filter_distribution_center_oid == o.filter_distribution_center_oid &&
          filter_to_items_in_container_oid == o.filter_to_items_in_container_oid &&
          format == o.format &&
          hide_bill_to_address == o.hide_bill_to_address &&
          hide_price_information == o.hide_price_information &&
          link_file_attachments == o.link_file_attachments &&
          show_contact_info == o.show_contact_info &&
          show_in_merchant_currency == o.show_in_merchant_currency &&
          show_internal_information == o.show_internal_information &&
          show_merchant_notes == o.show_merchant_notes &&
          show_non_sensitive_payment_info == o.show_non_sensitive_payment_info &&
          show_payment_info == o.show_payment_info &&
          translate == o.translate
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [context, dont_link_email_to_search, email_as_link, filter_distribution_center_oid, filter_to_items_in_container_oid, format, hide_bill_to_address, hide_price_information, link_file_attachments, show_contact_info, show_in_merchant_currency, show_internal_information, show_merchant_notes, show_non_sensitive_payment_info, show_payment_info, translate].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = UltracartClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
