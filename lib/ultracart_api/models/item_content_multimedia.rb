=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

The version of the OpenAPI document: 2.0.0
Contact: support@ultracart.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1-SNAPSHOT

=end

require 'date'
require 'time'

module UltracartClient
  class ItemContentMultimedia
    # URL where the image can be downloaded from the cloud
    attr_accessor :cloud_url

    # Expiration date of the cloud URL
    attr_accessor :cloud_url_expiration

    # Code assigned to the file
    attr_accessor :code

    # Description
    attr_accessor :description

    # True to exclude from multimedia gallery
    attr_accessor :exclude_from_gallery

    # File name
    attr_accessor :file_name

    # Height of the image
    attr_accessor :height

    # Item multimedia object identifier
    attr_accessor :merchant_item_multimedia_oid

    # True if the multimedia is an orphan of the active StoreFront themes
    attr_accessor :orphan

    # True if the object is a place holder that can be populated
    attr_accessor :placeholder

    # Temporary multimedia object identifier assigned if uploading new multimedia
    attr_accessor :temp_multimedia_oid

    # Thumbnails of this image
    attr_accessor :thumbnails

    # Type of file
    attr_accessor :type

    # URL to download file (on new multimedia record this can be a URL for UltraCart to fetch)
    attr_accessor :url

    # Width of the image
    attr_accessor :width

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cloud_url' => :'cloud_url',
        :'cloud_url_expiration' => :'cloud_url_expiration',
        :'code' => :'code',
        :'description' => :'description',
        :'exclude_from_gallery' => :'exclude_from_gallery',
        :'file_name' => :'file_name',
        :'height' => :'height',
        :'merchant_item_multimedia_oid' => :'merchant_item_multimedia_oid',
        :'orphan' => :'orphan',
        :'placeholder' => :'placeholder',
        :'temp_multimedia_oid' => :'temp_multimedia_oid',
        :'thumbnails' => :'thumbnails',
        :'type' => :'type',
        :'url' => :'url',
        :'width' => :'width'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'cloud_url' => :'String',
        :'cloud_url_expiration' => :'String',
        :'code' => :'String',
        :'description' => :'String',
        :'exclude_from_gallery' => :'Boolean',
        :'file_name' => :'String',
        :'height' => :'Integer',
        :'merchant_item_multimedia_oid' => :'Integer',
        :'orphan' => :'Boolean',
        :'placeholder' => :'Boolean',
        :'temp_multimedia_oid' => :'Integer',
        :'thumbnails' => :'Array<ItemContentMultimediaThumbnail>',
        :'type' => :'String',
        :'url' => :'String',
        :'width' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `UltracartClient::ItemContentMultimedia` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `UltracartClient::ItemContentMultimedia`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'cloud_url')
        self.cloud_url = attributes[:'cloud_url']
      end

      if attributes.key?(:'cloud_url_expiration')
        self.cloud_url_expiration = attributes[:'cloud_url_expiration']
      end

      if attributes.key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'exclude_from_gallery')
        self.exclude_from_gallery = attributes[:'exclude_from_gallery']
      end

      if attributes.key?(:'file_name')
        self.file_name = attributes[:'file_name']
      end

      if attributes.key?(:'height')
        self.height = attributes[:'height']
      end

      if attributes.key?(:'merchant_item_multimedia_oid')
        self.merchant_item_multimedia_oid = attributes[:'merchant_item_multimedia_oid']
      end

      if attributes.key?(:'orphan')
        self.orphan = attributes[:'orphan']
      end

      if attributes.key?(:'placeholder')
        self.placeholder = attributes[:'placeholder']
      end

      if attributes.key?(:'temp_multimedia_oid')
        self.temp_multimedia_oid = attributes[:'temp_multimedia_oid']
      end

      if attributes.key?(:'thumbnails')
        if (value = attributes[:'thumbnails']).is_a?(Array)
          self.thumbnails = value
        end
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'width')
        self.width = attributes[:'width']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@code.nil? && @code.to_s.length > 20
        invalid_properties.push('invalid value for "code", the character length must be smaller than or equal to 20.')
      end

      if !@description.nil? && @description.to_s.length > 50000
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 50000.')
      end

      if !@file_name.nil? && @file_name.to_s.length > 75
        invalid_properties.push('invalid value for "file_name", the character length must be smaller than or equal to 75.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@code.nil? && @code.to_s.length > 20
      return false if !@description.nil? && @description.to_s.length > 50000
      return false if !@file_name.nil? && @file_name.to_s.length > 75
      type_validator = EnumAttributeValidator.new('String', ["Image", "PDF", "Text", "Unknown", "Video"])
      return false unless type_validator.valid?(@type)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] code Value to be assigned
    def code=(code)
      if !code.nil? && code.to_s.length > 20
        fail ArgumentError, 'invalid value for "code", the character length must be smaller than or equal to 20.'
      end

      @code = code
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 50000
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 50000.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] file_name Value to be assigned
    def file_name=(file_name)
      if !file_name.nil? && file_name.to_s.length > 75
        fail ArgumentError, 'invalid value for "file_name", the character length must be smaller than or equal to 75.'
      end

      @file_name = file_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["Image", "PDF", "Text", "Unknown", "Video"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cloud_url == o.cloud_url &&
          cloud_url_expiration == o.cloud_url_expiration &&
          code == o.code &&
          description == o.description &&
          exclude_from_gallery == o.exclude_from_gallery &&
          file_name == o.file_name &&
          height == o.height &&
          merchant_item_multimedia_oid == o.merchant_item_multimedia_oid &&
          orphan == o.orphan &&
          placeholder == o.placeholder &&
          temp_multimedia_oid == o.temp_multimedia_oid &&
          thumbnails == o.thumbnails &&
          type == o.type &&
          url == o.url &&
          width == o.width
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [cloud_url, cloud_url_expiration, code, description, exclude_from_gallery, file_name, height, merchant_item_multimedia_oid, orphan, placeholder, temp_multimedia_oid, thumbnails, type, url, width].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = UltracartClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
