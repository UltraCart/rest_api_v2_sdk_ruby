=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

OpenAPI spec version: 2.0.0
Contact: support@ultracart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'date'

module UltracartClient
  class ItemAutoOrderStep
    # If the schedule is arbitrary, then this is the number of days
    attr_accessor :arbitrary_schedule_days

    # Arbitrary unit cost used to override the regular item cost
    attr_accessor :arbitrary_unit_cost

    # Arbitrary unit costs schedules for more advanced discounting by rebill attempt
    attr_accessor :arbitrary_unit_cost_schedules

    # Grand-father pricing configuration if the rebill schedule has changed over time
    attr_accessor :grandfather_pricing

    # Managed by (defaults to UltraCart)
    attr_accessor :managed_by

    # Number of days to pause
    attr_accessor :pause_days

    # Wait for this step to happen until the specified date
    attr_accessor :pause_until_date

    # If set, a pre-shipment notice is sent to the customer this many days in advance
    attr_accessor :preshipment_notice_days

    # Item id to rebill
    attr_accessor :recurring_merchant_item_id

    # Item object identifier to rebill
    attr_accessor :recurring_merchant_item_oid

    # Number of times to rebill.  Last step can be null for infinite
    attr_accessor :repeat_count

    # Frequency of the rebill
    attr_accessor :schedule

    # Email list name to subscribe the customer to when the rebill occurs
    attr_accessor :subscribe_email_list_name

    # Email list identifier to subscribe the customer to when this rebill occurs
    attr_accessor :subscribe_email_list_oid

    # Type of step (item, kit only, loop or pause)
    attr_accessor :type

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'arbitrary_schedule_days' => :'arbitrary_schedule_days',
        :'arbitrary_unit_cost' => :'arbitrary_unit_cost',
        :'arbitrary_unit_cost_schedules' => :'arbitrary_unit_cost_schedules',
        :'grandfather_pricing' => :'grandfather_pricing',
        :'managed_by' => :'managed_by',
        :'pause_days' => :'pause_days',
        :'pause_until_date' => :'pause_until_date',
        :'preshipment_notice_days' => :'preshipment_notice_days',
        :'recurring_merchant_item_id' => :'recurring_merchant_item_id',
        :'recurring_merchant_item_oid' => :'recurring_merchant_item_oid',
        :'repeat_count' => :'repeat_count',
        :'schedule' => :'schedule',
        :'subscribe_email_list_name' => :'subscribe_email_list_name',
        :'subscribe_email_list_oid' => :'subscribe_email_list_oid',
        :'type' => :'type'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'arbitrary_schedule_days' => :'Integer',
        :'arbitrary_unit_cost' => :'Float',
        :'arbitrary_unit_cost_schedules' => :'Array<ItemAutoOrderStepArbitraryUnitCostSchedule>',
        :'grandfather_pricing' => :'Array<ItemAutoOrderStepGrandfatherPricing>',
        :'managed_by' => :'String',
        :'pause_days' => :'Integer',
        :'pause_until_date' => :'String',
        :'preshipment_notice_days' => :'Integer',
        :'recurring_merchant_item_id' => :'String',
        :'recurring_merchant_item_oid' => :'Integer',
        :'repeat_count' => :'Integer',
        :'schedule' => :'String',
        :'subscribe_email_list_name' => :'String',
        :'subscribe_email_list_oid' => :'Integer',
        :'type' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'arbitrary_schedule_days')
        self.arbitrary_schedule_days = attributes[:'arbitrary_schedule_days']
      end

      if attributes.has_key?(:'arbitrary_unit_cost')
        self.arbitrary_unit_cost = attributes[:'arbitrary_unit_cost']
      end

      if attributes.has_key?(:'arbitrary_unit_cost_schedules')
        if (value = attributes[:'arbitrary_unit_cost_schedules']).is_a?(Array)
          self.arbitrary_unit_cost_schedules = value
        end
      end

      if attributes.has_key?(:'grandfather_pricing')
        if (value = attributes[:'grandfather_pricing']).is_a?(Array)
          self.grandfather_pricing = value
        end
      end

      if attributes.has_key?(:'managed_by')
        self.managed_by = attributes[:'managed_by']
      end

      if attributes.has_key?(:'pause_days')
        self.pause_days = attributes[:'pause_days']
      end

      if attributes.has_key?(:'pause_until_date')
        self.pause_until_date = attributes[:'pause_until_date']
      end

      if attributes.has_key?(:'preshipment_notice_days')
        self.preshipment_notice_days = attributes[:'preshipment_notice_days']
      end

      if attributes.has_key?(:'recurring_merchant_item_id')
        self.recurring_merchant_item_id = attributes[:'recurring_merchant_item_id']
      end

      if attributes.has_key?(:'recurring_merchant_item_oid')
        self.recurring_merchant_item_oid = attributes[:'recurring_merchant_item_oid']
      end

      if attributes.has_key?(:'repeat_count')
        self.repeat_count = attributes[:'repeat_count']
      end

      if attributes.has_key?(:'schedule')
        self.schedule = attributes[:'schedule']
      end

      if attributes.has_key?(:'subscribe_email_list_name')
        self.subscribe_email_list_name = attributes[:'subscribe_email_list_name']
      end

      if attributes.has_key?(:'subscribe_email_list_oid')
        self.subscribe_email_list_oid = attributes[:'subscribe_email_list_oid']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@recurring_merchant_item_id.nil? && @recurring_merchant_item_id.to_s.length > 20
        invalid_properties.push('invalid value for "recurring_merchant_item_id", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@recurring_merchant_item_id.nil? && @recurring_merchant_item_id.to_s.length > 20
      type_validator = EnumAttributeValidator.new('String', ['item', 'pause', 'loop', 'kit only'])
      return false unless type_validator.valid?(@type)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] recurring_merchant_item_id Value to be assigned
    def recurring_merchant_item_id=(recurring_merchant_item_id)
      if !recurring_merchant_item_id.nil? && recurring_merchant_item_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "recurring_merchant_item_id", the character length must be smaller than or equal to 20.'
      end

      @recurring_merchant_item_id = recurring_merchant_item_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ['item', 'pause', 'loop', 'kit only'])
      unless validator.valid?(type)
        fail ArgumentError, 'invalid value for "type", must be one of #{validator.allowable_values}.'
      end
      @type = type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          arbitrary_schedule_days == o.arbitrary_schedule_days &&
          arbitrary_unit_cost == o.arbitrary_unit_cost &&
          arbitrary_unit_cost_schedules == o.arbitrary_unit_cost_schedules &&
          grandfather_pricing == o.grandfather_pricing &&
          managed_by == o.managed_by &&
          pause_days == o.pause_days &&
          pause_until_date == o.pause_until_date &&
          preshipment_notice_days == o.preshipment_notice_days &&
          recurring_merchant_item_id == o.recurring_merchant_item_id &&
          recurring_merchant_item_oid == o.recurring_merchant_item_oid &&
          repeat_count == o.repeat_count &&
          schedule == o.schedule &&
          subscribe_email_list_name == o.subscribe_email_list_name &&
          subscribe_email_list_oid == o.subscribe_email_list_oid &&
          type == o.type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [arbitrary_schedule_days, arbitrary_unit_cost, arbitrary_unit_cost_schedules, grandfather_pricing, managed_by, pause_days, pause_until_date, preshipment_notice_days, recurring_merchant_item_id, recurring_merchant_item_oid, repeat_count, schedule, subscribe_email_list_name, subscribe_email_list_oid, type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = UltracartClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
