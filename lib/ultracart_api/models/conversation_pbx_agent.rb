=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

The version of the OpenAPI document: 2.0.0
Contact: support@ultracart.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1-SNAPSHOT

=end

require 'date'
require 'time'

module UltracartClient
  class ConversationPbxAgent
    # Cellphone number of agent in E.164 format
    attr_accessor :cellphone

    # Conversation Pbx Agent unique identifier
    attr_accessor :conversation_pbx_agent_uuid

    # Conversation Pbx Voicemail Mailbox UUID
    attr_accessor :conversation_pbx_voicemail_mailbox_uuid

    # Extension
    attr_accessor :extension

    # True if calls to this agent should be forwarded to their cellphone
    attr_accessor :forward_calls_to_cellphone

    # Full name
    attr_accessor :full_name

    # Agent login
    attr_accessor :login

    # Merchant Id
    attr_accessor :merchant_id

    # True if outgoing calls should be automatically recorded
    attr_accessor :record_outgoing_automatically

    # Twilio taskrouter worker Id
    attr_accessor :twilio_taskrouter_worker_id

    # Unavailable play audio UUID
    attr_accessor :unavailable_play_audio_uuid

    # Unavailable say
    attr_accessor :unavailable_say

    # Unavailable say voice
    attr_accessor :unavailable_say_voice

    # User Id
    attr_accessor :user_id

    # True if this agent has voicemail configured
    attr_accessor :voicemail

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cellphone' => :'cellphone',
        :'conversation_pbx_agent_uuid' => :'conversation_pbx_agent_uuid',
        :'conversation_pbx_voicemail_mailbox_uuid' => :'conversation_pbx_voicemail_mailbox_uuid',
        :'extension' => :'extension',
        :'forward_calls_to_cellphone' => :'forward_calls_to_cellphone',
        :'full_name' => :'full_name',
        :'login' => :'login',
        :'merchant_id' => :'merchant_id',
        :'record_outgoing_automatically' => :'record_outgoing_automatically',
        :'twilio_taskrouter_worker_id' => :'twilio_taskrouter_worker_id',
        :'unavailable_play_audio_uuid' => :'unavailable_play_audio_uuid',
        :'unavailable_say' => :'unavailable_say',
        :'unavailable_say_voice' => :'unavailable_say_voice',
        :'user_id' => :'user_id',
        :'voicemail' => :'voicemail'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'cellphone' => :'String',
        :'conversation_pbx_agent_uuid' => :'String',
        :'conversation_pbx_voicemail_mailbox_uuid' => :'String',
        :'extension' => :'Integer',
        :'forward_calls_to_cellphone' => :'Boolean',
        :'full_name' => :'String',
        :'login' => :'String',
        :'merchant_id' => :'String',
        :'record_outgoing_automatically' => :'Boolean',
        :'twilio_taskrouter_worker_id' => :'String',
        :'unavailable_play_audio_uuid' => :'String',
        :'unavailable_say' => :'String',
        :'unavailable_say_voice' => :'String',
        :'user_id' => :'Integer',
        :'voicemail' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `UltracartClient::ConversationPbxAgent` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `UltracartClient::ConversationPbxAgent`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'cellphone')
        self.cellphone = attributes[:'cellphone']
      end

      if attributes.key?(:'conversation_pbx_agent_uuid')
        self.conversation_pbx_agent_uuid = attributes[:'conversation_pbx_agent_uuid']
      end

      if attributes.key?(:'conversation_pbx_voicemail_mailbox_uuid')
        self.conversation_pbx_voicemail_mailbox_uuid = attributes[:'conversation_pbx_voicemail_mailbox_uuid']
      end

      if attributes.key?(:'extension')
        self.extension = attributes[:'extension']
      end

      if attributes.key?(:'forward_calls_to_cellphone')
        self.forward_calls_to_cellphone = attributes[:'forward_calls_to_cellphone']
      end

      if attributes.key?(:'full_name')
        self.full_name = attributes[:'full_name']
      end

      if attributes.key?(:'login')
        self.login = attributes[:'login']
      end

      if attributes.key?(:'merchant_id')
        self.merchant_id = attributes[:'merchant_id']
      end

      if attributes.key?(:'record_outgoing_automatically')
        self.record_outgoing_automatically = attributes[:'record_outgoing_automatically']
      end

      if attributes.key?(:'twilio_taskrouter_worker_id')
        self.twilio_taskrouter_worker_id = attributes[:'twilio_taskrouter_worker_id']
      end

      if attributes.key?(:'unavailable_play_audio_uuid')
        self.unavailable_play_audio_uuid = attributes[:'unavailable_play_audio_uuid']
      end

      if attributes.key?(:'unavailable_say')
        self.unavailable_say = attributes[:'unavailable_say']
      end

      if attributes.key?(:'unavailable_say_voice')
        self.unavailable_say_voice = attributes[:'unavailable_say_voice']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'voicemail')
        self.voicemail = attributes[:'voicemail']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@cellphone.nil? && @cellphone.to_s.length > 50
        invalid_properties.push('invalid value for "cellphone", the character length must be smaller than or equal to 50.')
      end

      if !@conversation_pbx_voicemail_mailbox_uuid.nil? && @conversation_pbx_voicemail_mailbox_uuid.to_s.length > 50
        invalid_properties.push('invalid value for "conversation_pbx_voicemail_mailbox_uuid", the character length must be smaller than or equal to 50.')
      end

      if !@merchant_id.nil? && @merchant_id.to_s.length > 5
        invalid_properties.push('invalid value for "merchant_id", the character length must be smaller than or equal to 5.')
      end

      if !@twilio_taskrouter_worker_id.nil? && @twilio_taskrouter_worker_id.to_s.length > 100
        invalid_properties.push('invalid value for "twilio_taskrouter_worker_id", the character length must be smaller than or equal to 100.')
      end

      if !@unavailable_play_audio_uuid.nil? && @unavailable_play_audio_uuid.to_s.length > 50
        invalid_properties.push('invalid value for "unavailable_play_audio_uuid", the character length must be smaller than or equal to 50.')
      end

      if !@unavailable_say_voice.nil? && @unavailable_say_voice.to_s.length > 50
        invalid_properties.push('invalid value for "unavailable_say_voice", the character length must be smaller than or equal to 50.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@cellphone.nil? && @cellphone.to_s.length > 50
      return false if !@conversation_pbx_voicemail_mailbox_uuid.nil? && @conversation_pbx_voicemail_mailbox_uuid.to_s.length > 50
      return false if !@merchant_id.nil? && @merchant_id.to_s.length > 5
      return false if !@twilio_taskrouter_worker_id.nil? && @twilio_taskrouter_worker_id.to_s.length > 100
      return false if !@unavailable_play_audio_uuid.nil? && @unavailable_play_audio_uuid.to_s.length > 50
      return false if !@unavailable_say_voice.nil? && @unavailable_say_voice.to_s.length > 50
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] cellphone Value to be assigned
    def cellphone=(cellphone)
      if !cellphone.nil? && cellphone.to_s.length > 50
        fail ArgumentError, 'invalid value for "cellphone", the character length must be smaller than or equal to 50.'
      end

      @cellphone = cellphone
    end

    # Custom attribute writer method with validation
    # @param [Object] conversation_pbx_voicemail_mailbox_uuid Value to be assigned
    def conversation_pbx_voicemail_mailbox_uuid=(conversation_pbx_voicemail_mailbox_uuid)
      if !conversation_pbx_voicemail_mailbox_uuid.nil? && conversation_pbx_voicemail_mailbox_uuid.to_s.length > 50
        fail ArgumentError, 'invalid value for "conversation_pbx_voicemail_mailbox_uuid", the character length must be smaller than or equal to 50.'
      end

      @conversation_pbx_voicemail_mailbox_uuid = conversation_pbx_voicemail_mailbox_uuid
    end

    # Custom attribute writer method with validation
    # @param [Object] merchant_id Value to be assigned
    def merchant_id=(merchant_id)
      if !merchant_id.nil? && merchant_id.to_s.length > 5
        fail ArgumentError, 'invalid value for "merchant_id", the character length must be smaller than or equal to 5.'
      end

      @merchant_id = merchant_id
    end

    # Custom attribute writer method with validation
    # @param [Object] twilio_taskrouter_worker_id Value to be assigned
    def twilio_taskrouter_worker_id=(twilio_taskrouter_worker_id)
      if !twilio_taskrouter_worker_id.nil? && twilio_taskrouter_worker_id.to_s.length > 100
        fail ArgumentError, 'invalid value for "twilio_taskrouter_worker_id", the character length must be smaller than or equal to 100.'
      end

      @twilio_taskrouter_worker_id = twilio_taskrouter_worker_id
    end

    # Custom attribute writer method with validation
    # @param [Object] unavailable_play_audio_uuid Value to be assigned
    def unavailable_play_audio_uuid=(unavailable_play_audio_uuid)
      if !unavailable_play_audio_uuid.nil? && unavailable_play_audio_uuid.to_s.length > 50
        fail ArgumentError, 'invalid value for "unavailable_play_audio_uuid", the character length must be smaller than or equal to 50.'
      end

      @unavailable_play_audio_uuid = unavailable_play_audio_uuid
    end

    # Custom attribute writer method with validation
    # @param [Object] unavailable_say_voice Value to be assigned
    def unavailable_say_voice=(unavailable_say_voice)
      if !unavailable_say_voice.nil? && unavailable_say_voice.to_s.length > 50
        fail ArgumentError, 'invalid value for "unavailable_say_voice", the character length must be smaller than or equal to 50.'
      end

      @unavailable_say_voice = unavailable_say_voice
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cellphone == o.cellphone &&
          conversation_pbx_agent_uuid == o.conversation_pbx_agent_uuid &&
          conversation_pbx_voicemail_mailbox_uuid == o.conversation_pbx_voicemail_mailbox_uuid &&
          extension == o.extension &&
          forward_calls_to_cellphone == o.forward_calls_to_cellphone &&
          full_name == o.full_name &&
          login == o.login &&
          merchant_id == o.merchant_id &&
          record_outgoing_automatically == o.record_outgoing_automatically &&
          twilio_taskrouter_worker_id == o.twilio_taskrouter_worker_id &&
          unavailable_play_audio_uuid == o.unavailable_play_audio_uuid &&
          unavailable_say == o.unavailable_say &&
          unavailable_say_voice == o.unavailable_say_voice &&
          user_id == o.user_id &&
          voicemail == o.voicemail
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [cellphone, conversation_pbx_agent_uuid, conversation_pbx_voicemail_mailbox_uuid, extension, forward_calls_to_cellphone, full_name, login, merchant_id, record_outgoing_automatically, twilio_taskrouter_worker_id, unavailable_play_audio_uuid, unavailable_say, unavailable_say_voice, user_id, voicemail].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = UltracartClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
