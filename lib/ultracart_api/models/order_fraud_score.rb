=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

The version of the OpenAPI document: 2.0.0
Contact: support@ultracart.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1-SNAPSHOT

=end

require 'date'
require 'time'

module UltracartClient
  class OrderFraudScore
    # True if the IP address is a known anonymous proxy server
    attr_accessor :anonymous_proxy

    # Whether the BIN (first six digits) matched the country
    attr_accessor :bin_match

    # True if the email address belongs to a known credit card fraudster
    attr_accessor :carder_email

    # Country code
    attr_accessor :country_code

    # Country code matches BIN country
    attr_accessor :country_match

    # Whether the customer's phone number is located in the area of the billing address
    attr_accessor :customer_phone_in_billing_location

    # Distance in kilometers between the IP address and the BIN
    attr_accessor :distance_km

    # True if the email address is for a free service like gmail.com
    attr_accessor :free_email

    # True if the customer is in a high risk country known for internet fraud
    attr_accessor :high_risk_country

    # City associated with the IP address
    attr_accessor :ip_city

    # ISP that owns the IP address
    attr_accessor :ip_isp

    # Approximate latitude associated with the IP address
    attr_accessor :ip_latitude

    # Approximate longitude associated with the IP address
    attr_accessor :ip_longitude

    # Organization that owns the IP address
    attr_accessor :ip_org

    # State/region associated with the IP address
    attr_accessor :ip_region

    # Likelihood of the IP address being a proxy server
    attr_accessor :proxy_score

    # Overall score.  This is the score that is compared to see if the order is rejected or held for review by the fraud filter rules.
    attr_accessor :score

    # True if the address is a known ship forwarding company
    attr_accessor :ship_forwarder

    # Likelihood of the email address being associated with a spammer
    attr_accessor :spam_score

    # True if the IP address that placed the order is a transparent proxy server
    attr_accessor :transparent_proxy

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'anonymous_proxy' => :'anonymous_proxy',
        :'bin_match' => :'bin_match',
        :'carder_email' => :'carder_email',
        :'country_code' => :'country_code',
        :'country_match' => :'country_match',
        :'customer_phone_in_billing_location' => :'customer_phone_in_billing_location',
        :'distance_km' => :'distance_km',
        :'free_email' => :'free_email',
        :'high_risk_country' => :'high_risk_country',
        :'ip_city' => :'ip_city',
        :'ip_isp' => :'ip_isp',
        :'ip_latitude' => :'ip_latitude',
        :'ip_longitude' => :'ip_longitude',
        :'ip_org' => :'ip_org',
        :'ip_region' => :'ip_region',
        :'proxy_score' => :'proxy_score',
        :'score' => :'score',
        :'ship_forwarder' => :'ship_forwarder',
        :'spam_score' => :'spam_score',
        :'transparent_proxy' => :'transparent_proxy'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'anonymous_proxy' => :'Boolean',
        :'bin_match' => :'String',
        :'carder_email' => :'Boolean',
        :'country_code' => :'String',
        :'country_match' => :'Boolean',
        :'customer_phone_in_billing_location' => :'String',
        :'distance_km' => :'Integer',
        :'free_email' => :'Boolean',
        :'high_risk_country' => :'Boolean',
        :'ip_city' => :'String',
        :'ip_isp' => :'String',
        :'ip_latitude' => :'String',
        :'ip_longitude' => :'String',
        :'ip_org' => :'String',
        :'ip_region' => :'String',
        :'proxy_score' => :'Float',
        :'score' => :'Float',
        :'ship_forwarder' => :'Boolean',
        :'spam_score' => :'Float',
        :'transparent_proxy' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `UltracartClient::OrderFraudScore` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `UltracartClient::OrderFraudScore`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'anonymous_proxy')
        self.anonymous_proxy = attributes[:'anonymous_proxy']
      end

      if attributes.key?(:'bin_match')
        self.bin_match = attributes[:'bin_match']
      end

      if attributes.key?(:'carder_email')
        self.carder_email = attributes[:'carder_email']
      end

      if attributes.key?(:'country_code')
        self.country_code = attributes[:'country_code']
      end

      if attributes.key?(:'country_match')
        self.country_match = attributes[:'country_match']
      end

      if attributes.key?(:'customer_phone_in_billing_location')
        self.customer_phone_in_billing_location = attributes[:'customer_phone_in_billing_location']
      end

      if attributes.key?(:'distance_km')
        self.distance_km = attributes[:'distance_km']
      end

      if attributes.key?(:'free_email')
        self.free_email = attributes[:'free_email']
      end

      if attributes.key?(:'high_risk_country')
        self.high_risk_country = attributes[:'high_risk_country']
      end

      if attributes.key?(:'ip_city')
        self.ip_city = attributes[:'ip_city']
      end

      if attributes.key?(:'ip_isp')
        self.ip_isp = attributes[:'ip_isp']
      end

      if attributes.key?(:'ip_latitude')
        self.ip_latitude = attributes[:'ip_latitude']
      end

      if attributes.key?(:'ip_longitude')
        self.ip_longitude = attributes[:'ip_longitude']
      end

      if attributes.key?(:'ip_org')
        self.ip_org = attributes[:'ip_org']
      end

      if attributes.key?(:'ip_region')
        self.ip_region = attributes[:'ip_region']
      end

      if attributes.key?(:'proxy_score')
        self.proxy_score = attributes[:'proxy_score']
      end

      if attributes.key?(:'score')
        self.score = attributes[:'score']
      end

      if attributes.key?(:'ship_forwarder')
        self.ship_forwarder = attributes[:'ship_forwarder']
      end

      if attributes.key?(:'spam_score')
        self.spam_score = attributes[:'spam_score']
      end

      if attributes.key?(:'transparent_proxy')
        self.transparent_proxy = attributes[:'transparent_proxy']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      bin_match_validator = EnumAttributeValidator.new('String', ["NA", "No", "NotFound", "Yes"])
      return false unless bin_match_validator.valid?(@bin_match)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bin_match Object to be assigned
    def bin_match=(bin_match)
      validator = EnumAttributeValidator.new('String', ["NA", "No", "NotFound", "Yes"])
      unless validator.valid?(bin_match)
        fail ArgumentError, "invalid value for \"bin_match\", must be one of #{validator.allowable_values}."
      end
      @bin_match = bin_match
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          anonymous_proxy == o.anonymous_proxy &&
          bin_match == o.bin_match &&
          carder_email == o.carder_email &&
          country_code == o.country_code &&
          country_match == o.country_match &&
          customer_phone_in_billing_location == o.customer_phone_in_billing_location &&
          distance_km == o.distance_km &&
          free_email == o.free_email &&
          high_risk_country == o.high_risk_country &&
          ip_city == o.ip_city &&
          ip_isp == o.ip_isp &&
          ip_latitude == o.ip_latitude &&
          ip_longitude == o.ip_longitude &&
          ip_org == o.ip_org &&
          ip_region == o.ip_region &&
          proxy_score == o.proxy_score &&
          score == o.score &&
          ship_forwarder == o.ship_forwarder &&
          spam_score == o.spam_score &&
          transparent_proxy == o.transparent_proxy
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [anonymous_proxy, bin_match, carder_email, country_code, country_match, customer_phone_in_billing_location, distance_km, free_email, high_risk_country, ip_city, ip_isp, ip_latitude, ip_longitude, ip_org, ip_region, proxy_score, score, ship_forwarder, spam_score, transparent_proxy].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = UltracartClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
