=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

OpenAPI spec version: 2.0.0
Contact: support@ultracart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'date'

module UltracartClient
  class GiftCertificate
    # True if this gift certificate is activated and ready to apply to purchases.
    attr_accessor :activated

    # The code used by the customer to purchase against this gift certificate.
    attr_accessor :code

    # This is the customer profile oid associated with this internally managed gift certificate.
    attr_accessor :customer_profile_oid

    # True if this gift certificate was deleted.
    attr_accessor :deleted

    # Email of the customer associated with this gift certificate.
    attr_accessor :email

    # Expiration date time.
    attr_accessor :expiration_dts

    # Gift certificate oid.
    attr_accessor :gift_certificate_oid

    # This is an internally managed gift certificate associated with the loyalty cash rewards program.
    attr_accessor :internal

    # A list of all ledger activity for this gift certificate.
    attr_accessor :ledger_entries

    # Merchant Id
    attr_accessor :merchant_id

    # A list of all ledger activity for this gift certificate.
    attr_accessor :merchant_note

    # Original balance of the gift certificate.
    attr_accessor :original_balance

    # The order used to purchase this gift certificate.  This value is ONLY set during checkout when a certificate is purchased, not when it is used.  Any usage is recorded in the ledger
    attr_accessor :reference_order_id

    # The remaining balance on the gift certificate.  This is never set directly, but calculated from the ledger.  To change the remaining balance, add a ledger entry.
    attr_accessor :remaining_balance

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'activated' => :'activated',
        :'code' => :'code',
        :'customer_profile_oid' => :'customer_profile_oid',
        :'deleted' => :'deleted',
        :'email' => :'email',
        :'expiration_dts' => :'expiration_dts',
        :'gift_certificate_oid' => :'gift_certificate_oid',
        :'internal' => :'internal',
        :'ledger_entries' => :'ledger_entries',
        :'merchant_id' => :'merchant_id',
        :'merchant_note' => :'merchant_note',
        :'original_balance' => :'original_balance',
        :'reference_order_id' => :'reference_order_id',
        :'remaining_balance' => :'remaining_balance'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'activated' => :'BOOLEAN',
        :'code' => :'String',
        :'customer_profile_oid' => :'Integer',
        :'deleted' => :'BOOLEAN',
        :'email' => :'String',
        :'expiration_dts' => :'String',
        :'gift_certificate_oid' => :'Integer',
        :'internal' => :'BOOLEAN',
        :'ledger_entries' => :'Array<GiftCertificateLedgerEntry>',
        :'merchant_id' => :'String',
        :'merchant_note' => :'String',
        :'original_balance' => :'Float',
        :'reference_order_id' => :'String',
        :'remaining_balance' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'activated')
        self.activated = attributes[:'activated']
      end

      if attributes.has_key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.has_key?(:'customer_profile_oid')
        self.customer_profile_oid = attributes[:'customer_profile_oid']
      end

      if attributes.has_key?(:'deleted')
        self.deleted = attributes[:'deleted']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'expiration_dts')
        self.expiration_dts = attributes[:'expiration_dts']
      end

      if attributes.has_key?(:'gift_certificate_oid')
        self.gift_certificate_oid = attributes[:'gift_certificate_oid']
      end

      if attributes.has_key?(:'internal')
        self.internal = attributes[:'internal']
      end

      if attributes.has_key?(:'ledger_entries')
        if (value = attributes[:'ledger_entries']).is_a?(Array)
          self.ledger_entries = value
        end
      end

      if attributes.has_key?(:'merchant_id')
        self.merchant_id = attributes[:'merchant_id']
      end

      if attributes.has_key?(:'merchant_note')
        self.merchant_note = attributes[:'merchant_note']
      end

      if attributes.has_key?(:'original_balance')
        self.original_balance = attributes[:'original_balance']
      end

      if attributes.has_key?(:'reference_order_id')
        self.reference_order_id = attributes[:'reference_order_id']
      end

      if attributes.has_key?(:'remaining_balance')
        self.remaining_balance = attributes[:'remaining_balance']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@email.nil? && @email.to_s.length > 100
        invalid_properties.push('invalid value for "email", the character length must be smaller than or equal to 100.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@email.nil? && @email.to_s.length > 100
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if !email.nil? && email.to_s.length > 100
        fail ArgumentError, 'invalid value for "email", the character length must be smaller than or equal to 100.'
      end

      @email = email
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          activated == o.activated &&
          code == o.code &&
          customer_profile_oid == o.customer_profile_oid &&
          deleted == o.deleted &&
          email == o.email &&
          expiration_dts == o.expiration_dts &&
          gift_certificate_oid == o.gift_certificate_oid &&
          internal == o.internal &&
          ledger_entries == o.ledger_entries &&
          merchant_id == o.merchant_id &&
          merchant_note == o.merchant_note &&
          original_balance == o.original_balance &&
          reference_order_id == o.reference_order_id &&
          remaining_balance == o.remaining_balance
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [activated, code, customer_profile_oid, deleted, email, expiration_dts, gift_certificate_oid, internal, ledger_entries, merchant_id, merchant_note, original_balance, reference_order_id, remaining_balance].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = UltracartClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
