=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

OpenAPI spec version: 2.0.0
Contact: support@ultracart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'date'

module UltracartClient
  class CustomReportAccountConfig
    attr_accessor :ai_budget

    # Current AI usage creating reports
    attr_accessor :ai_usage

    # Current BigQuery SQL usage running reports
    attr_accessor :merchant_id

    attr_accessor :novice_sql_comments

    # True if they have opted into custom reports
    attr_accessor :opt_in

    # User that opted into custom reporting
    attr_accessor :opt_in_by_user

    # Date/time that custom reporting was opted in to
    attr_accessor :opt_in_date

    attr_accessor :read_only

    attr_accessor :sql_budget

    attr_accessor :sql_usage

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'ai_budget' => :'ai_budget',
        :'ai_usage' => :'ai_usage',
        :'merchant_id' => :'merchant_id',
        :'novice_sql_comments' => :'novice_sql_comments',
        :'opt_in' => :'opt_in',
        :'opt_in_by_user' => :'opt_in_by_user',
        :'opt_in_date' => :'opt_in_date',
        :'read_only' => :'read_only',
        :'sql_budget' => :'sql_budget',
        :'sql_usage' => :'sql_usage'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'ai_budget' => :'Float',
        :'ai_usage' => :'Float',
        :'merchant_id' => :'String',
        :'novice_sql_comments' => :'BOOLEAN',
        :'opt_in' => :'BOOLEAN',
        :'opt_in_by_user' => :'String',
        :'opt_in_date' => :'String',
        :'read_only' => :'BOOLEAN',
        :'sql_budget' => :'Float',
        :'sql_usage' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'ai_budget')
        self.ai_budget = attributes[:'ai_budget']
      end

      if attributes.has_key?(:'ai_usage')
        self.ai_usage = attributes[:'ai_usage']
      end

      if attributes.has_key?(:'merchant_id')
        self.merchant_id = attributes[:'merchant_id']
      end

      if attributes.has_key?(:'novice_sql_comments')
        self.novice_sql_comments = attributes[:'novice_sql_comments']
      end

      if attributes.has_key?(:'opt_in')
        self.opt_in = attributes[:'opt_in']
      end

      if attributes.has_key?(:'opt_in_by_user')
        self.opt_in_by_user = attributes[:'opt_in_by_user']
      end

      if attributes.has_key?(:'opt_in_date')
        self.opt_in_date = attributes[:'opt_in_date']
      end

      if attributes.has_key?(:'read_only')
        self.read_only = attributes[:'read_only']
      end

      if attributes.has_key?(:'sql_budget')
        self.sql_budget = attributes[:'sql_budget']
      end

      if attributes.has_key?(:'sql_usage')
        self.sql_usage = attributes[:'sql_usage']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          ai_budget == o.ai_budget &&
          ai_usage == o.ai_usage &&
          merchant_id == o.merchant_id &&
          novice_sql_comments == o.novice_sql_comments &&
          opt_in == o.opt_in &&
          opt_in_by_user == o.opt_in_by_user &&
          opt_in_date == o.opt_in_date &&
          read_only == o.read_only &&
          sql_budget == o.sql_budget &&
          sql_usage == o.sql_usage
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [ai_budget, ai_usage, merchant_id, novice_sql_comments, opt_in, opt_in_by_user, opt_in_date, read_only, sql_budget, sql_usage].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = UltracartClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
