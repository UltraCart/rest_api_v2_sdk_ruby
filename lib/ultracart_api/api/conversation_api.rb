=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

The version of the OpenAPI document: 2.0.0
Contact: support@ultracart.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1-SNAPSHOT

=end

require 'cgi'

module UltracartClient
  class ConversationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    def self.new_using_api_key(simple_key, verify_ssl = true, debugging = false)
      api_config = Configuration.new
      api_config.api_key_prefix['x-ultracart-simple-key'] = simple_key
      api_config.api_version = '2017-03-01'
      api_config.verify_ssl = verify_ssl

      api_client = ApiClient.new(api_config)
      api_client.config.debugging = debugging

      UltracartClient::ConversationApi.new(api_client)
    end

    # Delete a conversation canned message
    # Delete a conversation canned message 
    # @param conversation_canned_message_oid [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_conversation_canned_message(conversation_canned_message_oid, opts = {})
      delete_conversation_canned_message_with_http_info(conversation_canned_message_oid, opts)
      nil
    end

    # Delete a conversation canned message
    # Delete a conversation canned message 
    # @param conversation_canned_message_oid [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_conversation_canned_message_with_http_info(conversation_canned_message_oid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.delete_conversation_canned_message ...'
      end
      # verify the required parameter 'conversation_canned_message_oid' is set
      if @api_client.config.client_side_validation && conversation_canned_message_oid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_canned_message_oid' when calling ConversationApi.delete_conversation_canned_message"
      end
      # resource path
      local_var_path = '/conversation/canned_messages/{conversation_canned_message_oid}'.sub('{' + 'conversation_canned_message_oid' + '}', CGI.escape(conversation_canned_message_oid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.delete_conversation_canned_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#delete_conversation_canned_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a conversation department
    # Delete a conversation department 
    # @param conversation_department_oid [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_department(conversation_department_oid, opts = {})
      delete_department_with_http_info(conversation_department_oid, opts)
      nil
    end

    # Delete a conversation department
    # Delete a conversation department 
    # @param conversation_department_oid [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_department_with_http_info(conversation_department_oid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.delete_department ...'
      end
      # verify the required parameter 'conversation_department_oid' is set
      if @api_client.config.client_side_validation && conversation_department_oid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_department_oid' when calling ConversationApi.delete_department"
      end
      # resource path
      local_var_path = '/conversation/departments/{conversation_department_oid}'.sub('{' + 'conversation_department_oid' + '}', CGI.escape(conversation_department_oid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.delete_department",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#delete_department\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a conversation engagement
    # Delete a conversation engagement 
    # @param conversation_engagement_oid [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_engagement(conversation_engagement_oid, opts = {})
      delete_engagement_with_http_info(conversation_engagement_oid, opts)
      nil
    end

    # Delete a conversation engagement
    # Delete a conversation engagement 
    # @param conversation_engagement_oid [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_engagement_with_http_info(conversation_engagement_oid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.delete_engagement ...'
      end
      # verify the required parameter 'conversation_engagement_oid' is set
      if @api_client.config.client_side_validation && conversation_engagement_oid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_engagement_oid' when calling ConversationApi.delete_engagement"
      end
      # resource path
      local_var_path = '/conversation/engagements/{conversation_engagement_oid}'.sub('{' + 'conversation_engagement_oid' + '}', CGI.escape(conversation_engagement_oid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.delete_engagement",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#delete_engagement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete pbx agent
    # Delete a pbx agent 
    # @param conversation_pbx_agent_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxAgentResponse]
    def delete_pbx_agent(conversation_pbx_agent_uuid, opts = {})
      data, _status_code, _headers = delete_pbx_agent_with_http_info(conversation_pbx_agent_uuid, opts)
      data
    end

    # Delete pbx agent
    # Delete a pbx agent 
    # @param conversation_pbx_agent_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxAgentResponse, Integer, Hash)>] ConversationPbxAgentResponse data, response status code and response headers
    def delete_pbx_agent_with_http_info(conversation_pbx_agent_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.delete_pbx_agent ...'
      end
      # verify the required parameter 'conversation_pbx_agent_uuid' is set
      if @api_client.config.client_side_validation && conversation_pbx_agent_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_pbx_agent_uuid' when calling ConversationApi.delete_pbx_agent"
      end
      # resource path
      local_var_path = '/conversation/pbx/agent/{conversationPbxAgentUuid}'.sub('{' + 'conversationPbxAgentUuid' + '}', CGI.escape(conversation_pbx_agent_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxAgentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.delete_pbx_agent",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#delete_pbx_agent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Agent Voicemail
    # Delete pbx agent Voicemail 
    # @param recording_sid [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_pbx_agent_voicemail(recording_sid, opts = {})
      delete_pbx_agent_voicemail_with_http_info(recording_sid, opts)
      nil
    end

    # Delete Agent Voicemail
    # Delete pbx agent Voicemail 
    # @param recording_sid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_pbx_agent_voicemail_with_http_info(recording_sid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.delete_pbx_agent_voicemail ...'
      end
      # verify the required parameter 'recording_sid' is set
      if @api_client.config.client_side_validation && recording_sid.nil?
        fail ArgumentError, "Missing the required parameter 'recording_sid' when calling ConversationApi.delete_pbx_agent_voicemail"
      end
      # resource path
      local_var_path = '/conversation/pbx/agent/voicemails/{recording_sid}'.sub('{' + 'recording_sid' + '}', CGI.escape(recording_sid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.delete_pbx_agent_voicemail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#delete_pbx_agent_voicemail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete pbx audio
    # Delete a pbx audio 
    # @param conversation_pbx_audio_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxAudioResponse]
    def delete_pbx_audio(conversation_pbx_audio_uuid, opts = {})
      data, _status_code, _headers = delete_pbx_audio_with_http_info(conversation_pbx_audio_uuid, opts)
      data
    end

    # Delete pbx audio
    # Delete a pbx audio 
    # @param conversation_pbx_audio_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxAudioResponse, Integer, Hash)>] ConversationPbxAudioResponse data, response status code and response headers
    def delete_pbx_audio_with_http_info(conversation_pbx_audio_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.delete_pbx_audio ...'
      end
      # verify the required parameter 'conversation_pbx_audio_uuid' is set
      if @api_client.config.client_side_validation && conversation_pbx_audio_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_pbx_audio_uuid' when calling ConversationApi.delete_pbx_audio"
      end
      # resource path
      local_var_path = '/conversation/pbx/audio/{conversationPbxAudioUuid}'.sub('{' + 'conversationPbxAudioUuid' + '}', CGI.escape(conversation_pbx_audio_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxAudioResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.delete_pbx_audio",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#delete_pbx_audio\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete pbx menu
    # Delete a pbx menu 
    # @param conversation_pbx_menu_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxMenuResponse]
    def delete_pbx_menu(conversation_pbx_menu_uuid, opts = {})
      data, _status_code, _headers = delete_pbx_menu_with_http_info(conversation_pbx_menu_uuid, opts)
      data
    end

    # Delete pbx menu
    # Delete a pbx menu 
    # @param conversation_pbx_menu_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxMenuResponse, Integer, Hash)>] ConversationPbxMenuResponse data, response status code and response headers
    def delete_pbx_menu_with_http_info(conversation_pbx_menu_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.delete_pbx_menu ...'
      end
      # verify the required parameter 'conversation_pbx_menu_uuid' is set
      if @api_client.config.client_side_validation && conversation_pbx_menu_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_pbx_menu_uuid' when calling ConversationApi.delete_pbx_menu"
      end
      # resource path
      local_var_path = '/conversation/pbx/menu/{conversationPbxMenuUuid}'.sub('{' + 'conversationPbxMenuUuid' + '}', CGI.escape(conversation_pbx_menu_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxMenuResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.delete_pbx_menu",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#delete_pbx_menu\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete pbx phoneNumber
    # Delete a pbx phoneNumber 
    # @param conversation_pbx_phone_number_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxPhoneNumberResponse]
    def delete_pbx_phone_number(conversation_pbx_phone_number_uuid, opts = {})
      data, _status_code, _headers = delete_pbx_phone_number_with_http_info(conversation_pbx_phone_number_uuid, opts)
      data
    end

    # Delete pbx phoneNumber
    # Delete a pbx phoneNumber 
    # @param conversation_pbx_phone_number_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxPhoneNumberResponse, Integer, Hash)>] ConversationPbxPhoneNumberResponse data, response status code and response headers
    def delete_pbx_phone_number_with_http_info(conversation_pbx_phone_number_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.delete_pbx_phone_number ...'
      end
      # verify the required parameter 'conversation_pbx_phone_number_uuid' is set
      if @api_client.config.client_side_validation && conversation_pbx_phone_number_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_pbx_phone_number_uuid' when calling ConversationApi.delete_pbx_phone_number"
      end
      # resource path
      local_var_path = '/conversation/pbx/phone_number/{conversationPbxPhoneNumberUuid}'.sub('{' + 'conversationPbxPhoneNumberUuid' + '}', CGI.escape(conversation_pbx_phone_number_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxPhoneNumberResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.delete_pbx_phone_number",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#delete_pbx_phone_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete pbx queue
    # Delete a pbx queue 
    # @param conversation_pbx_queue_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxQueueResponse]
    def delete_pbx_queue(conversation_pbx_queue_uuid, opts = {})
      data, _status_code, _headers = delete_pbx_queue_with_http_info(conversation_pbx_queue_uuid, opts)
      data
    end

    # Delete pbx queue
    # Delete a pbx queue 
    # @param conversation_pbx_queue_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxQueueResponse, Integer, Hash)>] ConversationPbxQueueResponse data, response status code and response headers
    def delete_pbx_queue_with_http_info(conversation_pbx_queue_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.delete_pbx_queue ...'
      end
      # verify the required parameter 'conversation_pbx_queue_uuid' is set
      if @api_client.config.client_side_validation && conversation_pbx_queue_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_pbx_queue_uuid' when calling ConversationApi.delete_pbx_queue"
      end
      # resource path
      local_var_path = '/conversation/pbx/queue/{conversationPbxQueueUuid}'.sub('{' + 'conversationPbxQueueUuid' + '}', CGI.escape(conversation_pbx_queue_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxQueueResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.delete_pbx_queue",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#delete_pbx_queue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete pbx timeBased
    # Delete a pbx timeBased 
    # @param conversation_pbx_time_based_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxTimeBasedResponse]
    def delete_pbx_time_based(conversation_pbx_time_based_uuid, opts = {})
      data, _status_code, _headers = delete_pbx_time_based_with_http_info(conversation_pbx_time_based_uuid, opts)
      data
    end

    # Delete pbx timeBased
    # Delete a pbx timeBased 
    # @param conversation_pbx_time_based_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxTimeBasedResponse, Integer, Hash)>] ConversationPbxTimeBasedResponse data, response status code and response headers
    def delete_pbx_time_based_with_http_info(conversation_pbx_time_based_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.delete_pbx_time_based ...'
      end
      # verify the required parameter 'conversation_pbx_time_based_uuid' is set
      if @api_client.config.client_side_validation && conversation_pbx_time_based_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_pbx_time_based_uuid' when calling ConversationApi.delete_pbx_time_based"
      end
      # resource path
      local_var_path = '/conversation/pbx/time_based/{conversationPbxTimeBasedUuid}'.sub('{' + 'conversationPbxTimeBasedUuid' + '}', CGI.escape(conversation_pbx_time_based_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxTimeBasedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.delete_pbx_time_based",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#delete_pbx_time_based\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete pbx timeRange
    # Delete a pbx timeRange 
    # @param conversation_pbx_time_range_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxTimeRangeResponse]
    def delete_pbx_time_range(conversation_pbx_time_range_uuid, opts = {})
      data, _status_code, _headers = delete_pbx_time_range_with_http_info(conversation_pbx_time_range_uuid, opts)
      data
    end

    # Delete pbx timeRange
    # Delete a pbx timeRange 
    # @param conversation_pbx_time_range_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxTimeRangeResponse, Integer, Hash)>] ConversationPbxTimeRangeResponse data, response status code and response headers
    def delete_pbx_time_range_with_http_info(conversation_pbx_time_range_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.delete_pbx_time_range ...'
      end
      # verify the required parameter 'conversation_pbx_time_range_uuid' is set
      if @api_client.config.client_side_validation && conversation_pbx_time_range_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_pbx_time_range_uuid' when calling ConversationApi.delete_pbx_time_range"
      end
      # resource path
      local_var_path = '/conversation/pbx/time_range/{conversationPbxTimeRangeUuid}'.sub('{' + 'conversationPbxTimeRangeUuid' + '}', CGI.escape(conversation_pbx_time_range_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxTimeRangeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.delete_pbx_time_range",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#delete_pbx_time_range\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete pbx voicemailMailbox
    # Delete a pbx voicemailMailbox 
    # @param conversation_pbx_voicemail_mailbox_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxVoicemailMailboxResponse]
    def delete_pbx_voicemail_mailbox(conversation_pbx_voicemail_mailbox_uuid, opts = {})
      data, _status_code, _headers = delete_pbx_voicemail_mailbox_with_http_info(conversation_pbx_voicemail_mailbox_uuid, opts)
      data
    end

    # Delete pbx voicemailMailbox
    # Delete a pbx voicemailMailbox 
    # @param conversation_pbx_voicemail_mailbox_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxVoicemailMailboxResponse, Integer, Hash)>] ConversationPbxVoicemailMailboxResponse data, response status code and response headers
    def delete_pbx_voicemail_mailbox_with_http_info(conversation_pbx_voicemail_mailbox_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.delete_pbx_voicemail_mailbox ...'
      end
      # verify the required parameter 'conversation_pbx_voicemail_mailbox_uuid' is set
      if @api_client.config.client_side_validation && conversation_pbx_voicemail_mailbox_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_pbx_voicemail_mailbox_uuid' when calling ConversationApi.delete_pbx_voicemail_mailbox"
      end
      # resource path
      local_var_path = '/conversation/pbx/voicemail_mailbox/{conversationPbxVoicemailMailboxUuid}'.sub('{' + 'conversationPbxVoicemailMailboxUuid' + '}', CGI.escape(conversation_pbx_voicemail_mailbox_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxVoicemailMailboxResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.delete_pbx_voicemail_mailbox",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#delete_pbx_voicemail_mailbox\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Agent keep alive
    # Called periodically by the conversation API to keep the session alive. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_agent_keep_alive(opts = {})
      get_agent_keep_alive_with_http_info(opts)
      nil
    end

    # Agent keep alive
    # Called periodically by the conversation API to keep the session alive. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_agent_keep_alive_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_agent_keep_alive ...'
      end
      # resource path
      local_var_path = '/conversation/agent/keepalive'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_agent_keep_alive",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_agent_keep_alive\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get agent profile
    # Retrieve the agents profile 
    # @param [Hash] opts the optional parameters
    # @return [ConversationAgentProfileResponse]
    def get_agent_profile(opts = {})
      data, _status_code, _headers = get_agent_profile_with_http_info(opts)
      data
    end

    # Get agent profile
    # Retrieve the agents profile 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationAgentProfileResponse, Integer, Hash)>] ConversationAgentProfileResponse data, response status code and response headers
    def get_agent_profile_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_agent_profile ...'
      end
      # resource path
      local_var_path = '/conversation/agent/profile'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationAgentProfileResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_agent_profile",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_agent_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get agent websocket authorization
    # Retrieve a JWT to authorize an agent to make a websocket connection. 
    # @param [Hash] opts the optional parameters
    # @return [ConversationAgentAuthResponse]
    def get_agent_websocket_authorization(opts = {})
      data, _status_code, _headers = get_agent_websocket_authorization_with_http_info(opts)
      data
    end

    # Get agent websocket authorization
    # Retrieve a JWT to authorize an agent to make a websocket connection. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationAgentAuthResponse, Integer, Hash)>] ConversationAgentAuthResponse data, response status code and response headers
    def get_agent_websocket_authorization_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_agent_websocket_authorization ...'
      end
      # resource path
      local_var_path = '/conversation/agent/auth'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationAgentAuthResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_agent_websocket_authorization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_agent_websocket_authorization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a conversation
    # Retrieve a conversation including the participants and messages 
    # @param conversation_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @return [ConversationResponse]
    def get_conversation(conversation_uuid, opts = {})
      data, _status_code, _headers = get_conversation_with_http_info(conversation_uuid, opts)
      data
    end

    # Retrieve a conversation
    # Retrieve a conversation including the participants and messages 
    # @param conversation_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @return [Array<(ConversationResponse, Integer, Hash)>] ConversationResponse data, response status code and response headers
    def get_conversation_with_http_info(conversation_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_conversation ...'
      end
      # verify the required parameter 'conversation_uuid' is set
      if @api_client.config.client_side_validation && conversation_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_uuid' when calling ConversationApi.get_conversation"
      end
      # resource path
      local_var_path = '/conversation/conversations/{conversation_uuid}'.sub('{' + 'conversation_uuid' + '}', CGI.escape(conversation_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_conversation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_conversation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a list of canned messages ordered by short_code
    # Retrieve a list of canned messages ordered by short_code 
    # @param [Hash] opts the optional parameters
    # @return [ConversationCannedMessagesResponse]
    def get_conversation_canned_messages(opts = {})
      data, _status_code, _headers = get_conversation_canned_messages_with_http_info(opts)
      data
    end

    # Retrieve a list of canned messages ordered by short_code
    # Retrieve a list of canned messages ordered by short_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationCannedMessagesResponse, Integer, Hash)>] ConversationCannedMessagesResponse data, response status code and response headers
    def get_conversation_canned_messages_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_conversation_canned_messages ...'
      end
      # resource path
      local_var_path = '/conversation/canned_messages'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationCannedMessagesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_conversation_canned_messages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_conversation_canned_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a webchat conversation context
    # Get a webchat conversation context 
    # @param conversation_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [ConversationWebchatContext]
    def get_conversation_context(conversation_uuid, opts = {})
      data, _status_code, _headers = get_conversation_context_with_http_info(conversation_uuid, opts)
      data
    end

    # Get a webchat conversation context
    # Get a webchat conversation context 
    # @param conversation_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationWebchatContext, Integer, Hash)>] ConversationWebchatContext data, response status code and response headers
    def get_conversation_context_with_http_info(conversation_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_conversation_context ...'
      end
      # verify the required parameter 'conversation_uuid' is set
      if @api_client.config.client_side_validation && conversation_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_uuid' when calling ConversationApi.get_conversation_context"
      end
      # resource path
      local_var_path = '/conversation/conversations/{conversation_uuid}/context'.sub('{' + 'conversation_uuid' + '}', CGI.escape(conversation_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationWebchatContext'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_conversation_context",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_conversation_context\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a list of possible department members
    # Retrieve a list of possible department members 
    # @param [Hash] opts the optional parameters
    # @return [ConversationDepartmentMembersResponse]
    def get_conversation_department_member_list(opts = {})
      data, _status_code, _headers = get_conversation_department_member_list_with_http_info(opts)
      data
    end

    # Retrieve a list of possible department members
    # Retrieve a list of possible department members 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationDepartmentMembersResponse, Integer, Hash)>] ConversationDepartmentMembersResponse data, response status code and response headers
    def get_conversation_department_member_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_conversation_department_member_list ...'
      end
      # resource path
      local_var_path = '/conversation/department_members'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationDepartmentMembersResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_conversation_department_member_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_conversation_department_member_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a list of departments ordered by name
    # Retrieve a list of departments ordered by name 
    # @param [Hash] opts the optional parameters
    # @return [ConversationDepartmentsResponse]
    def get_conversation_departments(opts = {})
      data, _status_code, _headers = get_conversation_departments_with_http_info(opts)
      data
    end

    # Retrieve a list of departments ordered by name
    # Retrieve a list of departments ordered by name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationDepartmentsResponse, Integer, Hash)>] ConversationDepartmentsResponse data, response status code and response headers
    def get_conversation_departments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_conversation_departments ...'
      end
      # resource path
      local_var_path = '/conversation/departments'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationDepartmentsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_conversation_departments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_conversation_departments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an engagement
    # Retrieve an engagement 
    # @param conversation_engagement_oid [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [ConversationEngagementResponse]
    def get_conversation_engagement(conversation_engagement_oid, opts = {})
      data, _status_code, _headers = get_conversation_engagement_with_http_info(conversation_engagement_oid, opts)
      data
    end

    # Retrieve an engagement
    # Retrieve an engagement 
    # @param conversation_engagement_oid [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationEngagementResponse, Integer, Hash)>] ConversationEngagementResponse data, response status code and response headers
    def get_conversation_engagement_with_http_info(conversation_engagement_oid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_conversation_engagement ...'
      end
      # verify the required parameter 'conversation_engagement_oid' is set
      if @api_client.config.client_side_validation && conversation_engagement_oid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_engagement_oid' when calling ConversationApi.get_conversation_engagement"
      end
      # resource path
      local_var_path = '/conversation/engagements/{conversation_engagement_oid}'.sub('{' + 'conversation_engagement_oid' + '}', CGI.escape(conversation_engagement_oid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationEngagementResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_conversation_engagement",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_conversation_engagement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a list of engagements ordered by name
    # Retrieve a list of engagements ordered by name 
    # @param [Hash] opts the optional parameters
    # @return [ConversationEngagementsResponse]
    def get_conversation_engagements(opts = {})
      data, _status_code, _headers = get_conversation_engagements_with_http_info(opts)
      data
    end

    # Retrieve a list of engagements ordered by name
    # Retrieve a list of engagements ordered by name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationEngagementsResponse, Integer, Hash)>] ConversationEngagementsResponse data, response status code and response headers
    def get_conversation_engagements_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_conversation_engagements ...'
      end
      # resource path
      local_var_path = '/conversation/engagements'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationEngagementsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_conversation_engagements",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_conversation_engagements\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve conversation messages
    # Retrieve conversation messages since a particular time 
    # @param conversation_uuid [String] 
    # @param since [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @return [ConversationMessagesResponse]
    def get_conversation_messages(conversation_uuid, since, opts = {})
      data, _status_code, _headers = get_conversation_messages_with_http_info(conversation_uuid, since, opts)
      data
    end

    # Retrieve conversation messages
    # Retrieve conversation messages since a particular time 
    # @param conversation_uuid [String] 
    # @param since [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @return [Array<(ConversationMessagesResponse, Integer, Hash)>] ConversationMessagesResponse data, response status code and response headers
    def get_conversation_messages_with_http_info(conversation_uuid, since, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_conversation_messages ...'
      end
      # verify the required parameter 'conversation_uuid' is set
      if @api_client.config.client_side_validation && conversation_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_uuid' when calling ConversationApi.get_conversation_messages"
      end
      # verify the required parameter 'since' is set
      if @api_client.config.client_side_validation && since.nil?
        fail ArgumentError, "Missing the required parameter 'since' when calling ConversationApi.get_conversation_messages"
      end
      # resource path
      local_var_path = '/conversation/conversations/{conversation_uuid}/messages/{since}'.sub('{' + 'conversation_uuid' + '}', CGI.escape(conversation_uuid.to_s)).sub('{' + 'since' + '}', CGI.escape(since.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationMessagesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_conversation_messages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_conversation_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a presigned conversation multimedia upload URL
    # Get a presigned conversation multimedia upload URL 
    # @param extension [String] 
    # @param [Hash] opts the optional parameters
    # @return [ConversationMultimediaUploadUrlResponse]
    def get_conversation_multimedia_upload_url(extension, opts = {})
      data, _status_code, _headers = get_conversation_multimedia_upload_url_with_http_info(extension, opts)
      data
    end

    # Get a presigned conversation multimedia upload URL
    # Get a presigned conversation multimedia upload URL 
    # @param extension [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationMultimediaUploadUrlResponse, Integer, Hash)>] ConversationMultimediaUploadUrlResponse data, response status code and response headers
    def get_conversation_multimedia_upload_url_with_http_info(extension, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_conversation_multimedia_upload_url ...'
      end
      # verify the required parameter 'extension' is set
      if @api_client.config.client_side_validation && extension.nil?
        fail ArgumentError, "Missing the required parameter 'extension' when calling ConversationApi.get_conversation_multimedia_upload_url"
      end
      # resource path
      local_var_path = '/conversation/upload_url/{extension}'.sub('{' + 'extension' + '}', CGI.escape(extension.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationMultimediaUploadUrlResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_conversation_multimedia_upload_url",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_conversation_multimedia_upload_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a pre-signed conversation multimedia upload URL
    # Get a pre-signed conversation multimedia upload URL 
    # @param extension [String] 
    # @param [Hash] opts the optional parameters
    # @return [ConversationMultimediaUploadUrlResponse]
    def get_conversation_pbx_audio_upload_url(extension, opts = {})
      data, _status_code, _headers = get_conversation_pbx_audio_upload_url_with_http_info(extension, opts)
      data
    end

    # Get a pre-signed conversation multimedia upload URL
    # Get a pre-signed conversation multimedia upload URL 
    # @param extension [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationMultimediaUploadUrlResponse, Integer, Hash)>] ConversationMultimediaUploadUrlResponse data, response status code and response headers
    def get_conversation_pbx_audio_upload_url_with_http_info(extension, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_conversation_pbx_audio_upload_url ...'
      end
      # verify the required parameter 'extension' is set
      if @api_client.config.client_side_validation && extension.nil?
        fail ArgumentError, "Missing the required parameter 'extension' when calling ConversationApi.get_conversation_pbx_audio_upload_url"
      end
      # resource path
      local_var_path = '/conversation/pbx/audio/upload_url/{extension}'.sub('{' + 'extension' + '}', CGI.escape(extension.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationMultimediaUploadUrlResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_conversation_pbx_audio_upload_url",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_conversation_pbx_audio_upload_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get orders and customer information for a phone number
    # Retrieves all the orders, auto orders, and customer profile for a given phone number 
    # @param pbx_customer_snapshot_request [ConversationPbxCustomerSnapshotRequest] Conversation pbx customer snapshot request
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxCustomerSnapshotResponse]
    def get_conversation_pbx_customer_snapshot(pbx_customer_snapshot_request, opts = {})
      data, _status_code, _headers = get_conversation_pbx_customer_snapshot_with_http_info(pbx_customer_snapshot_request, opts)
      data
    end

    # Get orders and customer information for a phone number
    # Retrieves all the orders, auto orders, and customer profile for a given phone number 
    # @param pbx_customer_snapshot_request [ConversationPbxCustomerSnapshotRequest] Conversation pbx customer snapshot request
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxCustomerSnapshotResponse, Integer, Hash)>] ConversationPbxCustomerSnapshotResponse data, response status code and response headers
    def get_conversation_pbx_customer_snapshot_with_http_info(pbx_customer_snapshot_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_conversation_pbx_customer_snapshot ...'
      end
      # verify the required parameter 'pbx_customer_snapshot_request' is set
      if @api_client.config.client_side_validation && pbx_customer_snapshot_request.nil?
        fail ArgumentError, "Missing the required parameter 'pbx_customer_snapshot_request' when calling ConversationApi.get_conversation_pbx_customer_snapshot"
      end
      # resource path
      local_var_path = '/conversation/pbx/customer_snapshot'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pbx_customer_snapshot_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxCustomerSnapshotResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_conversation_pbx_customer_snapshot",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_conversation_pbx_customer_snapshot\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve conversation permissions
    # Retrieve conversation permissions 
    # @param [Hash] opts the optional parameters
    # @return [ConversationPermissionsResponse]
    def get_conversation_permissions(opts = {})
      data, _status_code, _headers = get_conversation_permissions_with_http_info(opts)
      data
    end

    # Retrieve conversation permissions
    # Retrieve conversation permissions 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPermissionsResponse, Integer, Hash)>] ConversationPermissionsResponse data, response status code and response headers
    def get_conversation_permissions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_conversation_permissions ...'
      end
      # resource path
      local_var_path = '/conversation/permissions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPermissionsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_conversation_permissions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_conversation_permissions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a conversation webchat queue statuses
    # Retrieve a conversation webchat queue statuses including agent status and queue entries 
    # @param [Hash] opts the optional parameters
    # @return [ConversationWebchatQueueStatusesResponse]
    def get_conversation_webchat_queue_statuses(opts = {})
      data, _status_code, _headers = get_conversation_webchat_queue_statuses_with_http_info(opts)
      data
    end

    # Retrieve a conversation webchat queue statuses
    # Retrieve a conversation webchat queue statuses including agent status and queue entries 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationWebchatQueueStatusesResponse, Integer, Hash)>] ConversationWebchatQueueStatusesResponse data, response status code and response headers
    def get_conversation_webchat_queue_statuses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_conversation_webchat_queue_statuses ...'
      end
      # resource path
      local_var_path = '/conversation/conversations/queues/statuses'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationWebchatQueueStatusesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_conversation_webchat_queue_statuses",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_conversation_webchat_queue_statuses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a list of conversation summaries newest to oldest
    # Retrieve a list of conversation summaries that are ordered newest to oldest, include the most recent message and whether its been read. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :medium 
    # @option opts [String] :before 
    # @option opts [Integer] :_limit The maximum number of records to return on this one API call. (Max 200) (default to 100)
    # @option opts [Integer] :_offset Pagination of the record set.  Offset is a zero based index. (default to 0)
    # @return [ConversationsResponse]
    def get_conversations(opts = {})
      data, _status_code, _headers = get_conversations_with_http_info(opts)
      data
    end

    # Retrieve a list of conversation summaries newest to oldest
    # Retrieve a list of conversation summaries that are ordered newest to oldest, include the most recent message and whether its been read. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :medium 
    # @option opts [String] :before 
    # @option opts [Integer] :_limit The maximum number of records to return on this one API call. (Max 200) (default to 100)
    # @option opts [Integer] :_offset Pagination of the record set.  Offset is a zero based index. (default to 0)
    # @return [Array<(ConversationsResponse, Integer, Hash)>] ConversationsResponse data, response status code and response headers
    def get_conversations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_conversations ...'
      end
      # resource path
      local_var_path = '/conversation/conversations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'medium'] = opts[:'medium'] if !opts[:'medium'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'_limit'] = opts[:'_limit'] if !opts[:'_limit'].nil?
      query_params[:'_offset'] = opts[:'_offset'] if !opts[:'_offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_conversations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_conversations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a list of matching terms for a search field
    # Retrieve a list of matching terms for a search field 
    # @param autocomplete_request [ConversationAutocompleteRequest] Autocomplete Request
    # @param [Hash] opts the optional parameters
    # @return [ConversationAutocompleteResponse]
    def get_conversations_autocomplete(autocomplete_request, opts = {})
      data, _status_code, _headers = get_conversations_autocomplete_with_http_info(autocomplete_request, opts)
      data
    end

    # Retrieve a list of matching terms for a search field
    # Retrieve a list of matching terms for a search field 
    # @param autocomplete_request [ConversationAutocompleteRequest] Autocomplete Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationAutocompleteResponse, Integer, Hash)>] ConversationAutocompleteResponse data, response status code and response headers
    def get_conversations_autocomplete_with_http_info(autocomplete_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_conversations_autocomplete ...'
      end
      # verify the required parameter 'autocomplete_request' is set
      if @api_client.config.client_side_validation && autocomplete_request.nil?
        fail ArgumentError, "Missing the required parameter 'autocomplete_request' when calling ConversationApi.get_conversations_autocomplete"
      end
      # resource path
      local_var_path = '/conversation/conversations/autocomplete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(autocomplete_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationAutocompleteResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_conversations_autocomplete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_conversations_autocomplete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search conversations
    # Search conversations 
    # @param search_request [ConversationSearchRequest] Search Request
    # @param [Hash] opts the optional parameters
    # @return [ConversationSearchResponse]
    def get_conversations_search(search_request, opts = {})
      data, _status_code, _headers = get_conversations_search_with_http_info(search_request, opts)
      data
    end

    # Search conversations
    # Search conversations 
    # @param search_request [ConversationSearchRequest] Search Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationSearchResponse, Integer, Hash)>] ConversationSearchResponse data, response status code and response headers
    def get_conversations_search_with_http_info(search_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_conversations_search ...'
      end
      # verify the required parameter 'search_request' is set
      if @api_client.config.client_side_validation && search_request.nil?
        fail ArgumentError, "Missing the required parameter 'search_request' when calling ConversationApi.get_conversations_search"
      end
      # resource path
      local_var_path = '/conversation/conversations/search'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(search_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationSearchResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_conversations_search",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_conversations_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get location data for engagement configuration
    # Get location data for engagement configuration 
    # @param [Hash] opts the optional parameters
    # @return [ConversationLocationsResponse]
    def get_locations_for_engagement(opts = {})
      data, _status_code, _headers = get_locations_for_engagement_with_http_info(opts)
      data
    end

    # Get location data for engagement configuration
    # Get location data for engagement configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationLocationsResponse, Integer, Hash)>] ConversationLocationsResponse data, response status code and response headers
    def get_locations_for_engagement_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_locations_for_engagement ...'
      end
      # resource path
      local_var_path = '/conversation/locations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationLocationsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_locations_for_engagement",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_locations_for_engagement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pbx agent
    # Retrieve a pbx agent 
    # @param conversation_pbx_agent_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxAgentResponse]
    def get_pbx_agent(conversation_pbx_agent_uuid, opts = {})
      data, _status_code, _headers = get_pbx_agent_with_http_info(conversation_pbx_agent_uuid, opts)
      data
    end

    # Get pbx agent
    # Retrieve a pbx agent 
    # @param conversation_pbx_agent_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxAgentResponse, Integer, Hash)>] ConversationPbxAgentResponse data, response status code and response headers
    def get_pbx_agent_with_http_info(conversation_pbx_agent_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_pbx_agent ...'
      end
      # verify the required parameter 'conversation_pbx_agent_uuid' is set
      if @api_client.config.client_side_validation && conversation_pbx_agent_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_pbx_agent_uuid' when calling ConversationApi.get_pbx_agent"
      end
      # resource path
      local_var_path = '/conversation/pbx/agent/{conversationPbxAgentUuid}'.sub('{' + 'conversationPbxAgentUuid' + '}', CGI.escape(conversation_pbx_agent_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxAgentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_pbx_agent",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_pbx_agent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Agent Voicemail
    # Retrieve pbx agent Voicemail 
    # @param recording_sid [String] 
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxVoicemailMessageResponse]
    def get_pbx_agent_voicemail(recording_sid, opts = {})
      data, _status_code, _headers = get_pbx_agent_voicemail_with_http_info(recording_sid, opts)
      data
    end

    # Get Agent Voicemail
    # Retrieve pbx agent Voicemail 
    # @param recording_sid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxVoicemailMessageResponse, Integer, Hash)>] ConversationPbxVoicemailMessageResponse data, response status code and response headers
    def get_pbx_agent_voicemail_with_http_info(recording_sid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_pbx_agent_voicemail ...'
      end
      # verify the required parameter 'recording_sid' is set
      if @api_client.config.client_side_validation && recording_sid.nil?
        fail ArgumentError, "Missing the required parameter 'recording_sid' when calling ConversationApi.get_pbx_agent_voicemail"
      end
      # resource path
      local_var_path = '/conversation/pbx/agent/voicemails/{recording_sid}'.sub('{' + 'recording_sid' + '}', CGI.escape(recording_sid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxVoicemailMessageResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_pbx_agent_voicemail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_pbx_agent_voicemail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Agent Voicemails
    # Retrieve pbx agent Voicemails 
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxVoicemailMessageSummariesResponse]
    def get_pbx_agent_voicemails(opts = {})
      data, _status_code, _headers = get_pbx_agent_voicemails_with_http_info(opts)
      data
    end

    # Get Agent Voicemails
    # Retrieve pbx agent Voicemails 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxVoicemailMessageSummariesResponse, Integer, Hash)>] ConversationPbxVoicemailMessageSummariesResponse data, response status code and response headers
    def get_pbx_agent_voicemails_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_pbx_agent_voicemails ...'
      end
      # resource path
      local_var_path = '/conversation/pbx/agent/voicemails'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxVoicemailMessageSummariesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_pbx_agent_voicemails",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_pbx_agent_voicemails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pbx agents
    # Retrieve pbx agents 
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxAgentsResponse]
    def get_pbx_agents(opts = {})
      data, _status_code, _headers = get_pbx_agents_with_http_info(opts)
      data
    end

    # Get pbx agents
    # Retrieve pbx agents 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxAgentsResponse, Integer, Hash)>] ConversationPbxAgentsResponse data, response status code and response headers
    def get_pbx_agents_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_pbx_agents ...'
      end
      # resource path
      local_var_path = '/conversation/pbx/agent'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxAgentsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_pbx_agents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_pbx_agents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pbx audio
    # Retrieve a pbx audio 
    # @param conversation_pbx_audio_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxAudioResponse]
    def get_pbx_audio(conversation_pbx_audio_uuid, opts = {})
      data, _status_code, _headers = get_pbx_audio_with_http_info(conversation_pbx_audio_uuid, opts)
      data
    end

    # Get pbx audio
    # Retrieve a pbx audio 
    # @param conversation_pbx_audio_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxAudioResponse, Integer, Hash)>] ConversationPbxAudioResponse data, response status code and response headers
    def get_pbx_audio_with_http_info(conversation_pbx_audio_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_pbx_audio ...'
      end
      # verify the required parameter 'conversation_pbx_audio_uuid' is set
      if @api_client.config.client_side_validation && conversation_pbx_audio_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_pbx_audio_uuid' when calling ConversationApi.get_pbx_audio"
      end
      # resource path
      local_var_path = '/conversation/pbx/audio/{conversationPbxAudioUuid}'.sub('{' + 'conversationPbxAudioUuid' + '}', CGI.escape(conversation_pbx_audio_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxAudioResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_pbx_audio",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_pbx_audio\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pbx audios
    # Retrieve pbx audios 
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxAudiosResponse]
    def get_pbx_audios(opts = {})
      data, _status_code, _headers = get_pbx_audios_with_http_info(opts)
      data
    end

    # Get pbx audios
    # Retrieve pbx audios 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxAudiosResponse, Integer, Hash)>] ConversationPbxAudiosResponse data, response status code and response headers
    def get_pbx_audios_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_pbx_audios ...'
      end
      # resource path
      local_var_path = '/conversation/pbx/audio'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxAudiosResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_pbx_audios",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_pbx_audios\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pbx menu
    # Retrieve a pbx menu 
    # @param conversation_pbx_menu_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxMenuResponse]
    def get_pbx_menu(conversation_pbx_menu_uuid, opts = {})
      data, _status_code, _headers = get_pbx_menu_with_http_info(conversation_pbx_menu_uuid, opts)
      data
    end

    # Get pbx menu
    # Retrieve a pbx menu 
    # @param conversation_pbx_menu_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxMenuResponse, Integer, Hash)>] ConversationPbxMenuResponse data, response status code and response headers
    def get_pbx_menu_with_http_info(conversation_pbx_menu_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_pbx_menu ...'
      end
      # verify the required parameter 'conversation_pbx_menu_uuid' is set
      if @api_client.config.client_side_validation && conversation_pbx_menu_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_pbx_menu_uuid' when calling ConversationApi.get_pbx_menu"
      end
      # resource path
      local_var_path = '/conversation/pbx/menu/{conversationPbxMenuUuid}'.sub('{' + 'conversationPbxMenuUuid' + '}', CGI.escape(conversation_pbx_menu_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxMenuResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_pbx_menu",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_pbx_menu\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pbx menus
    # Retrieve pbx menus 
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxMenusResponse]
    def get_pbx_menus(opts = {})
      data, _status_code, _headers = get_pbx_menus_with_http_info(opts)
      data
    end

    # Get pbx menus
    # Retrieve pbx menus 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxMenusResponse, Integer, Hash)>] ConversationPbxMenusResponse data, response status code and response headers
    def get_pbx_menus_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_pbx_menus ...'
      end
      # resource path
      local_var_path = '/conversation/pbx/menu'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxMenusResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_pbx_menus",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_pbx_menus\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pbx phoneNumber
    # Retrieve a pbx phoneNumber 
    # @param conversation_pbx_phone_number_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxPhoneNumberResponse]
    def get_pbx_phone_number(conversation_pbx_phone_number_uuid, opts = {})
      data, _status_code, _headers = get_pbx_phone_number_with_http_info(conversation_pbx_phone_number_uuid, opts)
      data
    end

    # Get pbx phoneNumber
    # Retrieve a pbx phoneNumber 
    # @param conversation_pbx_phone_number_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxPhoneNumberResponse, Integer, Hash)>] ConversationPbxPhoneNumberResponse data, response status code and response headers
    def get_pbx_phone_number_with_http_info(conversation_pbx_phone_number_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_pbx_phone_number ...'
      end
      # verify the required parameter 'conversation_pbx_phone_number_uuid' is set
      if @api_client.config.client_side_validation && conversation_pbx_phone_number_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_pbx_phone_number_uuid' when calling ConversationApi.get_pbx_phone_number"
      end
      # resource path
      local_var_path = '/conversation/pbx/phone_number/{conversationPbxPhoneNumberUuid}'.sub('{' + 'conversationPbxPhoneNumberUuid' + '}', CGI.escape(conversation_pbx_phone_number_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxPhoneNumberResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_pbx_phone_number",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_pbx_phone_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pbx phoneNumbers
    # Retrieve pbx phoneNumbers 
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxPhoneNumbersResponse]
    def get_pbx_phone_numbers(opts = {})
      data, _status_code, _headers = get_pbx_phone_numbers_with_http_info(opts)
      data
    end

    # Get pbx phoneNumbers
    # Retrieve pbx phoneNumbers 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxPhoneNumbersResponse, Integer, Hash)>] ConversationPbxPhoneNumbersResponse data, response status code and response headers
    def get_pbx_phone_numbers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_pbx_phone_numbers ...'
      end
      # resource path
      local_var_path = '/conversation/pbx/phone_number'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxPhoneNumbersResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_pbx_phone_numbers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_pbx_phone_numbers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pbx queue
    # Retrieve a pbx queue 
    # @param conversation_pbx_queue_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxQueueResponse]
    def get_pbx_queue(conversation_pbx_queue_uuid, opts = {})
      data, _status_code, _headers = get_pbx_queue_with_http_info(conversation_pbx_queue_uuid, opts)
      data
    end

    # Get pbx queue
    # Retrieve a pbx queue 
    # @param conversation_pbx_queue_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxQueueResponse, Integer, Hash)>] ConversationPbxQueueResponse data, response status code and response headers
    def get_pbx_queue_with_http_info(conversation_pbx_queue_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_pbx_queue ...'
      end
      # verify the required parameter 'conversation_pbx_queue_uuid' is set
      if @api_client.config.client_side_validation && conversation_pbx_queue_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_pbx_queue_uuid' when calling ConversationApi.get_pbx_queue"
      end
      # resource path
      local_var_path = '/conversation/pbx/queue/{conversationPbxQueueUuid}'.sub('{' + 'conversationPbxQueueUuid' + '}', CGI.escape(conversation_pbx_queue_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxQueueResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_pbx_queue",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_pbx_queue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Queue Voicemail
    # Retrieve pbx queue Voicemail 
    # @param queue_uuid [String] 
    # @param recording_sid [String] 
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxVoicemailMessageResponse]
    def get_pbx_queue_voicemail(queue_uuid, recording_sid, opts = {})
      data, _status_code, _headers = get_pbx_queue_voicemail_with_http_info(queue_uuid, recording_sid, opts)
      data
    end

    # Get Queue Voicemail
    # Retrieve pbx queue Voicemail 
    # @param queue_uuid [String] 
    # @param recording_sid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxVoicemailMessageResponse, Integer, Hash)>] ConversationPbxVoicemailMessageResponse data, response status code and response headers
    def get_pbx_queue_voicemail_with_http_info(queue_uuid, recording_sid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_pbx_queue_voicemail ...'
      end
      # verify the required parameter 'queue_uuid' is set
      if @api_client.config.client_side_validation && queue_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'queue_uuid' when calling ConversationApi.get_pbx_queue_voicemail"
      end
      # verify the required parameter 'recording_sid' is set
      if @api_client.config.client_side_validation && recording_sid.nil?
        fail ArgumentError, "Missing the required parameter 'recording_sid' when calling ConversationApi.get_pbx_queue_voicemail"
      end
      # resource path
      local_var_path = '/conversation/pbx/queues/{queue_uuid}/voicemails/{recording_sid}'.sub('{' + 'queue_uuid' + '}', CGI.escape(queue_uuid.to_s)).sub('{' + 'recording_sid' + '}', CGI.escape(recording_sid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxVoicemailMessageResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_pbx_queue_voicemail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_pbx_queue_voicemail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Queue Voicemails
    # Retrieve pbx queue voicemails 
    # @param queue_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxVoicemailMessageSummariesResponse]
    def get_pbx_queue_voicemails(queue_uuid, opts = {})
      data, _status_code, _headers = get_pbx_queue_voicemails_with_http_info(queue_uuid, opts)
      data
    end

    # Get Queue Voicemails
    # Retrieve pbx queue voicemails 
    # @param queue_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxVoicemailMessageSummariesResponse, Integer, Hash)>] ConversationPbxVoicemailMessageSummariesResponse data, response status code and response headers
    def get_pbx_queue_voicemails_with_http_info(queue_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_pbx_queue_voicemails ...'
      end
      # verify the required parameter 'queue_uuid' is set
      if @api_client.config.client_side_validation && queue_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'queue_uuid' when calling ConversationApi.get_pbx_queue_voicemails"
      end
      # resource path
      local_var_path = '/conversation/pbx/queues/{queue_uuid}/voicemails'.sub('{' + 'queue_uuid' + '}', CGI.escape(queue_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxVoicemailMessageSummariesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_pbx_queue_voicemails",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_pbx_queue_voicemails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pbx queues
    # Retrieve pbx queues 
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxQueuesResponse]
    def get_pbx_queues(opts = {})
      data, _status_code, _headers = get_pbx_queues_with_http_info(opts)
      data
    end

    # Get pbx queues
    # Retrieve pbx queues 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxQueuesResponse, Integer, Hash)>] ConversationPbxQueuesResponse data, response status code and response headers
    def get_pbx_queues_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_pbx_queues ...'
      end
      # resource path
      local_var_path = '/conversation/pbx/queue'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxQueuesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_pbx_queues",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_pbx_queues\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pbx timeBased
    # Retrieve a pbx timeBased 
    # @param conversation_pbx_time_based_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxTimeBasedResponse]
    def get_pbx_time_based(conversation_pbx_time_based_uuid, opts = {})
      data, _status_code, _headers = get_pbx_time_based_with_http_info(conversation_pbx_time_based_uuid, opts)
      data
    end

    # Get pbx timeBased
    # Retrieve a pbx timeBased 
    # @param conversation_pbx_time_based_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxTimeBasedResponse, Integer, Hash)>] ConversationPbxTimeBasedResponse data, response status code and response headers
    def get_pbx_time_based_with_http_info(conversation_pbx_time_based_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_pbx_time_based ...'
      end
      # verify the required parameter 'conversation_pbx_time_based_uuid' is set
      if @api_client.config.client_side_validation && conversation_pbx_time_based_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_pbx_time_based_uuid' when calling ConversationApi.get_pbx_time_based"
      end
      # resource path
      local_var_path = '/conversation/pbx/time_based/{conversationPbxTimeBasedUuid}'.sub('{' + 'conversationPbxTimeBasedUuid' + '}', CGI.escape(conversation_pbx_time_based_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxTimeBasedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_pbx_time_based",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_pbx_time_based\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pbx timeBaseds
    # Retrieve pbx timeBaseds 
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxTimeBasedsResponse]
    def get_pbx_time_baseds(opts = {})
      data, _status_code, _headers = get_pbx_time_baseds_with_http_info(opts)
      data
    end

    # Get pbx timeBaseds
    # Retrieve pbx timeBaseds 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxTimeBasedsResponse, Integer, Hash)>] ConversationPbxTimeBasedsResponse data, response status code and response headers
    def get_pbx_time_baseds_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_pbx_time_baseds ...'
      end
      # resource path
      local_var_path = '/conversation/pbx/time_based'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxTimeBasedsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_pbx_time_baseds",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_pbx_time_baseds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pbx timeRange
    # Retrieve a pbx timeRange 
    # @param conversation_pbx_time_range_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxTimeRangeResponse]
    def get_pbx_time_range(conversation_pbx_time_range_uuid, opts = {})
      data, _status_code, _headers = get_pbx_time_range_with_http_info(conversation_pbx_time_range_uuid, opts)
      data
    end

    # Get pbx timeRange
    # Retrieve a pbx timeRange 
    # @param conversation_pbx_time_range_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxTimeRangeResponse, Integer, Hash)>] ConversationPbxTimeRangeResponse data, response status code and response headers
    def get_pbx_time_range_with_http_info(conversation_pbx_time_range_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_pbx_time_range ...'
      end
      # verify the required parameter 'conversation_pbx_time_range_uuid' is set
      if @api_client.config.client_side_validation && conversation_pbx_time_range_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_pbx_time_range_uuid' when calling ConversationApi.get_pbx_time_range"
      end
      # resource path
      local_var_path = '/conversation/pbx/time_range/{conversationPbxTimeRangeUuid}'.sub('{' + 'conversationPbxTimeRangeUuid' + '}', CGI.escape(conversation_pbx_time_range_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxTimeRangeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_pbx_time_range",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_pbx_time_range\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pbx timeRanges
    # Retrieve pbx timeRanges 
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxTimeRangesResponse]
    def get_pbx_time_ranges(opts = {})
      data, _status_code, _headers = get_pbx_time_ranges_with_http_info(opts)
      data
    end

    # Get pbx timeRanges
    # Retrieve pbx timeRanges 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxTimeRangesResponse, Integer, Hash)>] ConversationPbxTimeRangesResponse data, response status code and response headers
    def get_pbx_time_ranges_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_pbx_time_ranges ...'
      end
      # resource path
      local_var_path = '/conversation/pbx/time_range'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxTimeRangesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_pbx_time_ranges",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_pbx_time_ranges\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pbx voicemailMailbox
    # Retrieve a pbx voicemailMailbox 
    # @param conversation_pbx_voicemail_mailbox_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxVoicemailMailboxResponse]
    def get_pbx_voicemail_mailbox(conversation_pbx_voicemail_mailbox_uuid, opts = {})
      data, _status_code, _headers = get_pbx_voicemail_mailbox_with_http_info(conversation_pbx_voicemail_mailbox_uuid, opts)
      data
    end

    # Get pbx voicemailMailbox
    # Retrieve a pbx voicemailMailbox 
    # @param conversation_pbx_voicemail_mailbox_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxVoicemailMailboxResponse, Integer, Hash)>] ConversationPbxVoicemailMailboxResponse data, response status code and response headers
    def get_pbx_voicemail_mailbox_with_http_info(conversation_pbx_voicemail_mailbox_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_pbx_voicemail_mailbox ...'
      end
      # verify the required parameter 'conversation_pbx_voicemail_mailbox_uuid' is set
      if @api_client.config.client_side_validation && conversation_pbx_voicemail_mailbox_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_pbx_voicemail_mailbox_uuid' when calling ConversationApi.get_pbx_voicemail_mailbox"
      end
      # resource path
      local_var_path = '/conversation/pbx/voicemail_mailbox/{conversationPbxVoicemailMailboxUuid}'.sub('{' + 'conversationPbxVoicemailMailboxUuid' + '}', CGI.escape(conversation_pbx_voicemail_mailbox_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxVoicemailMailboxResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_pbx_voicemail_mailbox",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_pbx_voicemail_mailbox\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pbx voicemailMailboxes
    # Retrieve pbx voicemailMailboxes 
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxVoicemailMailboxesResponse]
    def get_pbx_voicemail_mailboxes(opts = {})
      data, _status_code, _headers = get_pbx_voicemail_mailboxes_with_http_info(opts)
      data
    end

    # Get pbx voicemailMailboxes
    # Retrieve pbx voicemailMailboxes 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxVoicemailMailboxesResponse, Integer, Hash)>] ConversationPbxVoicemailMailboxesResponse data, response status code and response headers
    def get_pbx_voicemail_mailboxes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.get_pbx_voicemail_mailboxes ...'
      end
      # resource path
      local_var_path = '/conversation/pbx/voicemail_mailbox'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxVoicemailMailboxesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.get_pbx_voicemail_mailboxes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#get_pbx_voicemail_mailboxes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insert a canned message
    # Insert a canned message 
    # @param canned_message [ConversationCannedMessage] Canned message
    # @param [Hash] opts the optional parameters
    # @return [ConversationCannedMessageResponse]
    def insert_conversation_canned_message(canned_message, opts = {})
      data, _status_code, _headers = insert_conversation_canned_message_with_http_info(canned_message, opts)
      data
    end

    # Insert a canned message
    # Insert a canned message 
    # @param canned_message [ConversationCannedMessage] Canned message
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationCannedMessageResponse, Integer, Hash)>] ConversationCannedMessageResponse data, response status code and response headers
    def insert_conversation_canned_message_with_http_info(canned_message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.insert_conversation_canned_message ...'
      end
      # verify the required parameter 'canned_message' is set
      if @api_client.config.client_side_validation && canned_message.nil?
        fail ArgumentError, "Missing the required parameter 'canned_message' when calling ConversationApi.insert_conversation_canned_message"
      end
      # resource path
      local_var_path = '/conversation/canned_messages'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(canned_message)

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationCannedMessageResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.insert_conversation_canned_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#insert_conversation_canned_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insert a department
    # Insert a department 
    # @param department [ConversationDepartment] Department
    # @param [Hash] opts the optional parameters
    # @return [ConversationDepartmentResponse]
    def insert_conversation_department(department, opts = {})
      data, _status_code, _headers = insert_conversation_department_with_http_info(department, opts)
      data
    end

    # Insert a department
    # Insert a department 
    # @param department [ConversationDepartment] Department
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationDepartmentResponse, Integer, Hash)>] ConversationDepartmentResponse data, response status code and response headers
    def insert_conversation_department_with_http_info(department, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.insert_conversation_department ...'
      end
      # verify the required parameter 'department' is set
      if @api_client.config.client_side_validation && department.nil?
        fail ArgumentError, "Missing the required parameter 'department' when calling ConversationApi.insert_conversation_department"
      end
      # resource path
      local_var_path = '/conversation/departments'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(department)

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationDepartmentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.insert_conversation_department",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#insert_conversation_department\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insert a engagement
    # Insert a engagement 
    # @param engagement [ConversationEngagement] Engagement
    # @param [Hash] opts the optional parameters
    # @return [ConversationEngagementResponse]
    def insert_conversation_engagement(engagement, opts = {})
      data, _status_code, _headers = insert_conversation_engagement_with_http_info(engagement, opts)
      data
    end

    # Insert a engagement
    # Insert a engagement 
    # @param engagement [ConversationEngagement] Engagement
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationEngagementResponse, Integer, Hash)>] ConversationEngagementResponse data, response status code and response headers
    def insert_conversation_engagement_with_http_info(engagement, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.insert_conversation_engagement ...'
      end
      # verify the required parameter 'engagement' is set
      if @api_client.config.client_side_validation && engagement.nil?
        fail ArgumentError, "Missing the required parameter 'engagement' when calling ConversationApi.insert_conversation_engagement"
      end
      # resource path
      local_var_path = '/conversation/engagements'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(engagement)

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationEngagementResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.insert_conversation_engagement",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#insert_conversation_engagement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insert pbx agent
    # Insert a pbx agent 
    # @param pbx_agent [ConversationPbxAgent] Pbx Agent
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxAgentResponse]
    def insert_pbx_agent(pbx_agent, opts = {})
      data, _status_code, _headers = insert_pbx_agent_with_http_info(pbx_agent, opts)
      data
    end

    # Insert pbx agent
    # Insert a pbx agent 
    # @param pbx_agent [ConversationPbxAgent] Pbx Agent
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxAgentResponse, Integer, Hash)>] ConversationPbxAgentResponse data, response status code and response headers
    def insert_pbx_agent_with_http_info(pbx_agent, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.insert_pbx_agent ...'
      end
      # verify the required parameter 'pbx_agent' is set
      if @api_client.config.client_side_validation && pbx_agent.nil?
        fail ArgumentError, "Missing the required parameter 'pbx_agent' when calling ConversationApi.insert_pbx_agent"
      end
      # resource path
      local_var_path = '/conversation/pbx/agent'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pbx_agent)

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxAgentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.insert_pbx_agent",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#insert_pbx_agent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insert pbx audio
    # Insert a pbx audio 
    # @param pbx_audio [ConversationPbxAudio] Pbx Audio
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxAudioResponse]
    def insert_pbx_audio(pbx_audio, opts = {})
      data, _status_code, _headers = insert_pbx_audio_with_http_info(pbx_audio, opts)
      data
    end

    # Insert pbx audio
    # Insert a pbx audio 
    # @param pbx_audio [ConversationPbxAudio] Pbx Audio
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxAudioResponse, Integer, Hash)>] ConversationPbxAudioResponse data, response status code and response headers
    def insert_pbx_audio_with_http_info(pbx_audio, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.insert_pbx_audio ...'
      end
      # verify the required parameter 'pbx_audio' is set
      if @api_client.config.client_side_validation && pbx_audio.nil?
        fail ArgumentError, "Missing the required parameter 'pbx_audio' when calling ConversationApi.insert_pbx_audio"
      end
      # resource path
      local_var_path = '/conversation/pbx/audio'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pbx_audio)

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxAudioResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.insert_pbx_audio",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#insert_pbx_audio\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insert pbx menu
    # Insert a pbx menu 
    # @param pbx_menu [ConversationPbxMenu] Pbx Menu
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxMenuResponse]
    def insert_pbx_menu(pbx_menu, opts = {})
      data, _status_code, _headers = insert_pbx_menu_with_http_info(pbx_menu, opts)
      data
    end

    # Insert pbx menu
    # Insert a pbx menu 
    # @param pbx_menu [ConversationPbxMenu] Pbx Menu
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxMenuResponse, Integer, Hash)>] ConversationPbxMenuResponse data, response status code and response headers
    def insert_pbx_menu_with_http_info(pbx_menu, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.insert_pbx_menu ...'
      end
      # verify the required parameter 'pbx_menu' is set
      if @api_client.config.client_side_validation && pbx_menu.nil?
        fail ArgumentError, "Missing the required parameter 'pbx_menu' when calling ConversationApi.insert_pbx_menu"
      end
      # resource path
      local_var_path = '/conversation/pbx/menu'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pbx_menu)

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxMenuResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.insert_pbx_menu",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#insert_pbx_menu\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insert pbx phoneNumber
    # Insert a pbx phoneNumber 
    # @param pbx_phone_number [ConversationPbxPhoneNumber] Pbx PhoneNumber
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxPhoneNumberResponse]
    def insert_pbx_phone_number(pbx_phone_number, opts = {})
      data, _status_code, _headers = insert_pbx_phone_number_with_http_info(pbx_phone_number, opts)
      data
    end

    # Insert pbx phoneNumber
    # Insert a pbx phoneNumber 
    # @param pbx_phone_number [ConversationPbxPhoneNumber] Pbx PhoneNumber
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxPhoneNumberResponse, Integer, Hash)>] ConversationPbxPhoneNumberResponse data, response status code and response headers
    def insert_pbx_phone_number_with_http_info(pbx_phone_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.insert_pbx_phone_number ...'
      end
      # verify the required parameter 'pbx_phone_number' is set
      if @api_client.config.client_side_validation && pbx_phone_number.nil?
        fail ArgumentError, "Missing the required parameter 'pbx_phone_number' when calling ConversationApi.insert_pbx_phone_number"
      end
      # resource path
      local_var_path = '/conversation/pbx/phone_number'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pbx_phone_number)

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxPhoneNumberResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.insert_pbx_phone_number",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#insert_pbx_phone_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insert pbx queue
    # Insert a pbx queue 
    # @param pbx_queue [ConversationPbxQueue] Pbx Queue
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxQueueResponse]
    def insert_pbx_queue(pbx_queue, opts = {})
      data, _status_code, _headers = insert_pbx_queue_with_http_info(pbx_queue, opts)
      data
    end

    # Insert pbx queue
    # Insert a pbx queue 
    # @param pbx_queue [ConversationPbxQueue] Pbx Queue
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxQueueResponse, Integer, Hash)>] ConversationPbxQueueResponse data, response status code and response headers
    def insert_pbx_queue_with_http_info(pbx_queue, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.insert_pbx_queue ...'
      end
      # verify the required parameter 'pbx_queue' is set
      if @api_client.config.client_side_validation && pbx_queue.nil?
        fail ArgumentError, "Missing the required parameter 'pbx_queue' when calling ConversationApi.insert_pbx_queue"
      end
      # resource path
      local_var_path = '/conversation/pbx/queue'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pbx_queue)

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxQueueResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.insert_pbx_queue",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#insert_pbx_queue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insert pbx timeBased
    # Insert a pbx timeBased 
    # @param pbx_time_based [ConversationPbxTimeBased] Pbx TimeBased
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxTimeBasedResponse]
    def insert_pbx_time_based(pbx_time_based, opts = {})
      data, _status_code, _headers = insert_pbx_time_based_with_http_info(pbx_time_based, opts)
      data
    end

    # Insert pbx timeBased
    # Insert a pbx timeBased 
    # @param pbx_time_based [ConversationPbxTimeBased] Pbx TimeBased
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxTimeBasedResponse, Integer, Hash)>] ConversationPbxTimeBasedResponse data, response status code and response headers
    def insert_pbx_time_based_with_http_info(pbx_time_based, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.insert_pbx_time_based ...'
      end
      # verify the required parameter 'pbx_time_based' is set
      if @api_client.config.client_side_validation && pbx_time_based.nil?
        fail ArgumentError, "Missing the required parameter 'pbx_time_based' when calling ConversationApi.insert_pbx_time_based"
      end
      # resource path
      local_var_path = '/conversation/pbx/time_based'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pbx_time_based)

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxTimeBasedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.insert_pbx_time_based",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#insert_pbx_time_based\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insert pbx timeRange
    # Insert a pbx timeRange 
    # @param pbx_time_range [ConversationPbxTimeRange] Pbx TimeRange
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxTimeRangeResponse]
    def insert_pbx_time_range(pbx_time_range, opts = {})
      data, _status_code, _headers = insert_pbx_time_range_with_http_info(pbx_time_range, opts)
      data
    end

    # Insert pbx timeRange
    # Insert a pbx timeRange 
    # @param pbx_time_range [ConversationPbxTimeRange] Pbx TimeRange
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxTimeRangeResponse, Integer, Hash)>] ConversationPbxTimeRangeResponse data, response status code and response headers
    def insert_pbx_time_range_with_http_info(pbx_time_range, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.insert_pbx_time_range ...'
      end
      # verify the required parameter 'pbx_time_range' is set
      if @api_client.config.client_side_validation && pbx_time_range.nil?
        fail ArgumentError, "Missing the required parameter 'pbx_time_range' when calling ConversationApi.insert_pbx_time_range"
      end
      # resource path
      local_var_path = '/conversation/pbx/time_range'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pbx_time_range)

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxTimeRangeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.insert_pbx_time_range",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#insert_pbx_time_range\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insert pbx voicemailMailbox
    # Insert a pbx voicemailMailbox 
    # @param pbx_voicemail_mailbox [ConversationPbxVoicemailMailbox] Pbx VoicemailMailbox
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxVoicemailMailboxResponse]
    def insert_pbx_voicemail_mailbox(pbx_voicemail_mailbox, opts = {})
      data, _status_code, _headers = insert_pbx_voicemail_mailbox_with_http_info(pbx_voicemail_mailbox, opts)
      data
    end

    # Insert pbx voicemailMailbox
    # Insert a pbx voicemailMailbox 
    # @param pbx_voicemail_mailbox [ConversationPbxVoicemailMailbox] Pbx VoicemailMailbox
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxVoicemailMailboxResponse, Integer, Hash)>] ConversationPbxVoicemailMailboxResponse data, response status code and response headers
    def insert_pbx_voicemail_mailbox_with_http_info(pbx_voicemail_mailbox, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.insert_pbx_voicemail_mailbox ...'
      end
      # verify the required parameter 'pbx_voicemail_mailbox' is set
      if @api_client.config.client_side_validation && pbx_voicemail_mailbox.nil?
        fail ArgumentError, "Missing the required parameter 'pbx_voicemail_mailbox' when calling ConversationApi.insert_pbx_voicemail_mailbox"
      end
      # resource path
      local_var_path = '/conversation/pbx/voicemail_mailbox'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pbx_voicemail_mailbox)

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxVoicemailMailboxResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.insert_pbx_voicemail_mailbox",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#insert_pbx_voicemail_mailbox\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Join a conversation
    # Join a conversation 
    # @param conversation_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [ConversationJoinRequest] :join_request Join request
    # @return [nil]
    def join_conversation(conversation_uuid, opts = {})
      join_conversation_with_http_info(conversation_uuid, opts)
      nil
    end

    # Join a conversation
    # Join a conversation 
    # @param conversation_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [ConversationJoinRequest] :join_request Join request
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def join_conversation_with_http_info(conversation_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.join_conversation ...'
      end
      # verify the required parameter 'conversation_uuid' is set
      if @api_client.config.client_side_validation && conversation_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_uuid' when calling ConversationApi.join_conversation"
      end
      # resource path
      local_var_path = '/conversation/conversations/{conversation_uuid}/join'.sub('{' + 'conversation_uuid' + '}', CGI.escape(conversation_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'join_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.join_conversation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#join_conversation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Leave a conversation
    # Leave a conversation 
    # @param conversation_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def leave_conversation(conversation_uuid, opts = {})
      leave_conversation_with_http_info(conversation_uuid, opts)
      nil
    end

    # Leave a conversation
    # Leave a conversation 
    # @param conversation_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def leave_conversation_with_http_info(conversation_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.leave_conversation ...'
      end
      # verify the required parameter 'conversation_uuid' is set
      if @api_client.config.client_side_validation && conversation_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_uuid' when calling ConversationApi.leave_conversation"
      end
      # resource path
      local_var_path = '/conversation/conversations/{conversation_uuid}/leave'.sub('{' + 'conversation_uuid' + '}', CGI.escape(conversation_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.leave_conversation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#leave_conversation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Listened Agent Voicemail
    # Listened pbx agent Voicemail 
    # @param recording_sid [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def listened_pbx_agent_voicemail(recording_sid, opts = {})
      listened_pbx_agent_voicemail_with_http_info(recording_sid, opts)
      nil
    end

    # Listened Agent Voicemail
    # Listened pbx agent Voicemail 
    # @param recording_sid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def listened_pbx_agent_voicemail_with_http_info(recording_sid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.listened_pbx_agent_voicemail ...'
      end
      # verify the required parameter 'recording_sid' is set
      if @api_client.config.client_side_validation && recording_sid.nil?
        fail ArgumentError, "Missing the required parameter 'recording_sid' when calling ConversationApi.listened_pbx_agent_voicemail"
      end
      # resource path
      local_var_path = '/conversation/pbx/agent/voicemails/{recording_sid}/listened'.sub('{' + 'recording_sid' + '}', CGI.escape(recording_sid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.listened_pbx_agent_voicemail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#listened_pbx_agent_voicemail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Mark a conversation as read
    # Mark a conversation as read 
    # @param conversation_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def mark_read_conversation(conversation_uuid, opts = {})
      mark_read_conversation_with_http_info(conversation_uuid, opts)
      nil
    end

    # Mark a conversation as read
    # Mark a conversation as read 
    # @param conversation_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mark_read_conversation_with_http_info(conversation_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.mark_read_conversation ...'
      end
      # verify the required parameter 'conversation_uuid' is set
      if @api_client.config.client_side_validation && conversation_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_uuid' when calling ConversationApi.mark_read_conversation"
      end
      # resource path
      local_var_path = '/conversation/conversations/{conversation_uuid}/markread'.sub('{' + 'conversation_uuid' + '}', CGI.escape(conversation_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.mark_read_conversation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#mark_read_conversation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # reset statistics within the queue
    # reset statistics within the queue 
    # @param queue_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reset_conversation_pbx_queue_statistics(queue_uuid, opts = {})
      reset_conversation_pbx_queue_statistics_with_http_info(queue_uuid, opts)
      nil
    end

    # reset statistics within the queue
    # reset statistics within the queue 
    # @param queue_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reset_conversation_pbx_queue_statistics_with_http_info(queue_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.reset_conversation_pbx_queue_statistics ...'
      end
      # verify the required parameter 'queue_uuid' is set
      if @api_client.config.client_side_validation && queue_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'queue_uuid' when calling ConversationApi.reset_conversation_pbx_queue_statistics"
      end
      # resource path
      local_var_path = '/conversation/pbx/queues/{queue_uuid}/reset_statistics'.sub('{' + 'queue_uuid' + '}', CGI.escape(queue_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.reset_conversation_pbx_queue_statistics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#reset_conversation_pbx_queue_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search for canned messages by short_code
    # Search for canned messages by short_code 
    # @param search_request [ConversationCannedMessagesSearch] Search request
    # @param [Hash] opts the optional parameters
    # @return [ConversationCannedMessagesResponse]
    def search_conversation_canned_messages(search_request, opts = {})
      data, _status_code, _headers = search_conversation_canned_messages_with_http_info(search_request, opts)
      data
    end

    # Search for canned messages by short_code
    # Search for canned messages by short_code 
    # @param search_request [ConversationCannedMessagesSearch] Search request
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationCannedMessagesResponse, Integer, Hash)>] ConversationCannedMessagesResponse data, response status code and response headers
    def search_conversation_canned_messages_with_http_info(search_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.search_conversation_canned_messages ...'
      end
      # verify the required parameter 'search_request' is set
      if @api_client.config.client_side_validation && search_request.nil?
        fail ArgumentError, "Missing the required parameter 'search_request' when calling ConversationApi.search_conversation_canned_messages"
      end
      # resource path
      local_var_path = '/conversation/canned_messages/search'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(search_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationCannedMessagesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.search_conversation_canned_messages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#search_conversation_canned_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unsubscribe any SMS participants in this conversation
    # Unsubscribe any SMS participants in this conversation 
    # @param conversation_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sms_unsubscribe_conversation(conversation_uuid, opts = {})
      sms_unsubscribe_conversation_with_http_info(conversation_uuid, opts)
      nil
    end

    # Unsubscribe any SMS participants in this conversation
    # Unsubscribe any SMS participants in this conversation 
    # @param conversation_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def sms_unsubscribe_conversation_with_http_info(conversation_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.sms_unsubscribe_conversation ...'
      end
      # verify the required parameter 'conversation_uuid' is set
      if @api_client.config.client_side_validation && conversation_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_uuid' when calling ConversationApi.sms_unsubscribe_conversation"
      end
      # resource path
      local_var_path = '/conversation/conversations/{conversation_uuid}/sms_unsubscribe'.sub('{' + 'conversation_uuid' + '}', CGI.escape(conversation_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.sms_unsubscribe_conversation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#sms_unsubscribe_conversation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start a conversation
    # Start a new conversation 
    # @param start_request [ConversationStartRequest] Start request
    # @param [Hash] opts the optional parameters
    # @return [ConversationStartResponse]
    def start_conversation(start_request, opts = {})
      data, _status_code, _headers = start_conversation_with_http_info(start_request, opts)
      data
    end

    # Start a conversation
    # Start a new conversation 
    # @param start_request [ConversationStartRequest] Start request
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationStartResponse, Integer, Hash)>] ConversationStartResponse data, response status code and response headers
    def start_conversation_with_http_info(start_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.start_conversation ...'
      end
      # verify the required parameter 'start_request' is set
      if @api_client.config.client_side_validation && start_request.nil?
        fail ArgumentError, "Missing the required parameter 'start_request' when calling ConversationApi.start_conversation"
      end
      # resource path
      local_var_path = '/conversation/conversations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(start_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationStartResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.start_conversation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#start_conversation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update agent profile
    # Update agent profile 
    # @param profile_request [ConversationAgentProfile] Profile request
    # @param [Hash] opts the optional parameters
    # @return [ConversationAgentProfileResponse]
    def update_agent_profile(profile_request, opts = {})
      data, _status_code, _headers = update_agent_profile_with_http_info(profile_request, opts)
      data
    end

    # Update agent profile
    # Update agent profile 
    # @param profile_request [ConversationAgentProfile] Profile request
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationAgentProfileResponse, Integer, Hash)>] ConversationAgentProfileResponse data, response status code and response headers
    def update_agent_profile_with_http_info(profile_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.update_agent_profile ...'
      end
      # verify the required parameter 'profile_request' is set
      if @api_client.config.client_side_validation && profile_request.nil?
        fail ArgumentError, "Missing the required parameter 'profile_request' when calling ConversationApi.update_agent_profile"
      end
      # resource path
      local_var_path = '/conversation/agent/profile'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(profile_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationAgentProfileResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.update_agent_profile",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#update_agent_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a canned message
    # Update a canned message 
    # @param conversation_canned_message_oid [Integer] 
    # @param canned_message [ConversationCannedMessage] Canned message
    # @param [Hash] opts the optional parameters
    # @return [ConversationCannedMessageResponse]
    def update_conversation_canned_message(conversation_canned_message_oid, canned_message, opts = {})
      data, _status_code, _headers = update_conversation_canned_message_with_http_info(conversation_canned_message_oid, canned_message, opts)
      data
    end

    # Update a canned message
    # Update a canned message 
    # @param conversation_canned_message_oid [Integer] 
    # @param canned_message [ConversationCannedMessage] Canned message
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationCannedMessageResponse, Integer, Hash)>] ConversationCannedMessageResponse data, response status code and response headers
    def update_conversation_canned_message_with_http_info(conversation_canned_message_oid, canned_message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.update_conversation_canned_message ...'
      end
      # verify the required parameter 'conversation_canned_message_oid' is set
      if @api_client.config.client_side_validation && conversation_canned_message_oid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_canned_message_oid' when calling ConversationApi.update_conversation_canned_message"
      end
      # verify the required parameter 'canned_message' is set
      if @api_client.config.client_side_validation && canned_message.nil?
        fail ArgumentError, "Missing the required parameter 'canned_message' when calling ConversationApi.update_conversation_canned_message"
      end
      # resource path
      local_var_path = '/conversation/canned_messages/{conversation_canned_message_oid}'.sub('{' + 'conversation_canned_message_oid' + '}', CGI.escape(conversation_canned_message_oid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(canned_message)

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationCannedMessageResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.update_conversation_canned_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#update_conversation_canned_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a department
    # Update a department 
    # @param conversation_department_oid [Integer] 
    # @param department [ConversationDepartment] Department
    # @param [Hash] opts the optional parameters
    # @return [ConversationDepartmentResponse]
    def update_conversation_department(conversation_department_oid, department, opts = {})
      data, _status_code, _headers = update_conversation_department_with_http_info(conversation_department_oid, department, opts)
      data
    end

    # Update a department
    # Update a department 
    # @param conversation_department_oid [Integer] 
    # @param department [ConversationDepartment] Department
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationDepartmentResponse, Integer, Hash)>] ConversationDepartmentResponse data, response status code and response headers
    def update_conversation_department_with_http_info(conversation_department_oid, department, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.update_conversation_department ...'
      end
      # verify the required parameter 'conversation_department_oid' is set
      if @api_client.config.client_side_validation && conversation_department_oid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_department_oid' when calling ConversationApi.update_conversation_department"
      end
      # verify the required parameter 'department' is set
      if @api_client.config.client_side_validation && department.nil?
        fail ArgumentError, "Missing the required parameter 'department' when calling ConversationApi.update_conversation_department"
      end
      # resource path
      local_var_path = '/conversation/departments/{conversation_department_oid}'.sub('{' + 'conversation_department_oid' + '}', CGI.escape(conversation_department_oid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(department)

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationDepartmentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.update_conversation_department",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#update_conversation_department\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a engagement
    # Update a engagement 
    # @param conversation_engagement_oid [Integer] 
    # @param engagement [ConversationEngagement] Engagement
    # @param [Hash] opts the optional parameters
    # @return [ConversationEngagementResponse]
    def update_conversation_engagement(conversation_engagement_oid, engagement, opts = {})
      data, _status_code, _headers = update_conversation_engagement_with_http_info(conversation_engagement_oid, engagement, opts)
      data
    end

    # Update a engagement
    # Update a engagement 
    # @param conversation_engagement_oid [Integer] 
    # @param engagement [ConversationEngagement] Engagement
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationEngagementResponse, Integer, Hash)>] ConversationEngagementResponse data, response status code and response headers
    def update_conversation_engagement_with_http_info(conversation_engagement_oid, engagement, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.update_conversation_engagement ...'
      end
      # verify the required parameter 'conversation_engagement_oid' is set
      if @api_client.config.client_side_validation && conversation_engagement_oid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_engagement_oid' when calling ConversationApi.update_conversation_engagement"
      end
      # verify the required parameter 'engagement' is set
      if @api_client.config.client_side_validation && engagement.nil?
        fail ArgumentError, "Missing the required parameter 'engagement' when calling ConversationApi.update_conversation_engagement"
      end
      # resource path
      local_var_path = '/conversation/engagements/{conversation_engagement_oid}'.sub('{' + 'conversation_engagement_oid' + '}', CGI.escape(conversation_engagement_oid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(engagement)

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationEngagementResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.update_conversation_engagement",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#update_conversation_engagement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update status within the queue
    # Update status within the queue 
    # @param queue_name [String] 
    # @param status_request [ConversationWebchatQueueStatusUpdateRequest] Status request
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_conversation_webchat_queue_status(queue_name, status_request, opts = {})
      update_conversation_webchat_queue_status_with_http_info(queue_name, status_request, opts)
      nil
    end

    # Update status within the queue
    # Update status within the queue 
    # @param queue_name [String] 
    # @param status_request [ConversationWebchatQueueStatusUpdateRequest] Status request
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_conversation_webchat_queue_status_with_http_info(queue_name, status_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.update_conversation_webchat_queue_status ...'
      end
      # verify the required parameter 'queue_name' is set
      if @api_client.config.client_side_validation && queue_name.nil?
        fail ArgumentError, "Missing the required parameter 'queue_name' when calling ConversationApi.update_conversation_webchat_queue_status"
      end
      # verify the required parameter 'status_request' is set
      if @api_client.config.client_side_validation && status_request.nil?
        fail ArgumentError, "Missing the required parameter 'status_request' when calling ConversationApi.update_conversation_webchat_queue_status"
      end
      # resource path
      local_var_path = '/conversation/conversations/queues/{queue_name}/status'.sub('{' + 'queue_name' + '}', CGI.escape(queue_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(status_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.update_conversation_webchat_queue_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#update_conversation_webchat_queue_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update pbx agent
    # Update a pbx agent 
    # @param conversation_pbx_agent_uuid [String] 
    # @param pbx_agent [ConversationPbxAgent] Pbx Agent
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxAgentResponse]
    def update_pbx_agent(conversation_pbx_agent_uuid, pbx_agent, opts = {})
      data, _status_code, _headers = update_pbx_agent_with_http_info(conversation_pbx_agent_uuid, pbx_agent, opts)
      data
    end

    # Update pbx agent
    # Update a pbx agent 
    # @param conversation_pbx_agent_uuid [String] 
    # @param pbx_agent [ConversationPbxAgent] Pbx Agent
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxAgentResponse, Integer, Hash)>] ConversationPbxAgentResponse data, response status code and response headers
    def update_pbx_agent_with_http_info(conversation_pbx_agent_uuid, pbx_agent, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.update_pbx_agent ...'
      end
      # verify the required parameter 'conversation_pbx_agent_uuid' is set
      if @api_client.config.client_side_validation && conversation_pbx_agent_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_pbx_agent_uuid' when calling ConversationApi.update_pbx_agent"
      end
      # verify the required parameter 'pbx_agent' is set
      if @api_client.config.client_side_validation && pbx_agent.nil?
        fail ArgumentError, "Missing the required parameter 'pbx_agent' when calling ConversationApi.update_pbx_agent"
      end
      # resource path
      local_var_path = '/conversation/pbx/agent/{conversationPbxAgentUuid}'.sub('{' + 'conversationPbxAgentUuid' + '}', CGI.escape(conversation_pbx_agent_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pbx_agent)

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxAgentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.update_pbx_agent",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#update_pbx_agent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update pbx audio
    # Update a pbx audio 
    # @param conversation_pbx_audio_uuid [String] 
    # @param pbx_audio [ConversationPbxAudio] Pbx Audio
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxAudioResponse]
    def update_pbx_audio(conversation_pbx_audio_uuid, pbx_audio, opts = {})
      data, _status_code, _headers = update_pbx_audio_with_http_info(conversation_pbx_audio_uuid, pbx_audio, opts)
      data
    end

    # Update pbx audio
    # Update a pbx audio 
    # @param conversation_pbx_audio_uuid [String] 
    # @param pbx_audio [ConversationPbxAudio] Pbx Audio
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxAudioResponse, Integer, Hash)>] ConversationPbxAudioResponse data, response status code and response headers
    def update_pbx_audio_with_http_info(conversation_pbx_audio_uuid, pbx_audio, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.update_pbx_audio ...'
      end
      # verify the required parameter 'conversation_pbx_audio_uuid' is set
      if @api_client.config.client_side_validation && conversation_pbx_audio_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_pbx_audio_uuid' when calling ConversationApi.update_pbx_audio"
      end
      # verify the required parameter 'pbx_audio' is set
      if @api_client.config.client_side_validation && pbx_audio.nil?
        fail ArgumentError, "Missing the required parameter 'pbx_audio' when calling ConversationApi.update_pbx_audio"
      end
      # resource path
      local_var_path = '/conversation/pbx/audio/{conversationPbxAudioUuid}'.sub('{' + 'conversationPbxAudioUuid' + '}', CGI.escape(conversation_pbx_audio_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pbx_audio)

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxAudioResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.update_pbx_audio",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#update_pbx_audio\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update pbx menu
    # Update a pbx menu 
    # @param conversation_pbx_menu_uuid [String] 
    # @param pbx_menu [ConversationPbxMenu] Pbx Menu
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxMenuResponse]
    def update_pbx_menu(conversation_pbx_menu_uuid, pbx_menu, opts = {})
      data, _status_code, _headers = update_pbx_menu_with_http_info(conversation_pbx_menu_uuid, pbx_menu, opts)
      data
    end

    # Update pbx menu
    # Update a pbx menu 
    # @param conversation_pbx_menu_uuid [String] 
    # @param pbx_menu [ConversationPbxMenu] Pbx Menu
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxMenuResponse, Integer, Hash)>] ConversationPbxMenuResponse data, response status code and response headers
    def update_pbx_menu_with_http_info(conversation_pbx_menu_uuid, pbx_menu, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.update_pbx_menu ...'
      end
      # verify the required parameter 'conversation_pbx_menu_uuid' is set
      if @api_client.config.client_side_validation && conversation_pbx_menu_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_pbx_menu_uuid' when calling ConversationApi.update_pbx_menu"
      end
      # verify the required parameter 'pbx_menu' is set
      if @api_client.config.client_side_validation && pbx_menu.nil?
        fail ArgumentError, "Missing the required parameter 'pbx_menu' when calling ConversationApi.update_pbx_menu"
      end
      # resource path
      local_var_path = '/conversation/pbx/menu/{conversationPbxMenuUuid}'.sub('{' + 'conversationPbxMenuUuid' + '}', CGI.escape(conversation_pbx_menu_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pbx_menu)

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxMenuResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.update_pbx_menu",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#update_pbx_menu\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update pbx phoneNumber
    # Update a pbx phoneNumber 
    # @param conversation_pbx_phone_number_uuid [String] 
    # @param pbx_phone_number [ConversationPbxPhoneNumber] Pbx PhoneNumber
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxPhoneNumberResponse]
    def update_pbx_phone_number(conversation_pbx_phone_number_uuid, pbx_phone_number, opts = {})
      data, _status_code, _headers = update_pbx_phone_number_with_http_info(conversation_pbx_phone_number_uuid, pbx_phone_number, opts)
      data
    end

    # Update pbx phoneNumber
    # Update a pbx phoneNumber 
    # @param conversation_pbx_phone_number_uuid [String] 
    # @param pbx_phone_number [ConversationPbxPhoneNumber] Pbx PhoneNumber
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxPhoneNumberResponse, Integer, Hash)>] ConversationPbxPhoneNumberResponse data, response status code and response headers
    def update_pbx_phone_number_with_http_info(conversation_pbx_phone_number_uuid, pbx_phone_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.update_pbx_phone_number ...'
      end
      # verify the required parameter 'conversation_pbx_phone_number_uuid' is set
      if @api_client.config.client_side_validation && conversation_pbx_phone_number_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_pbx_phone_number_uuid' when calling ConversationApi.update_pbx_phone_number"
      end
      # verify the required parameter 'pbx_phone_number' is set
      if @api_client.config.client_side_validation && pbx_phone_number.nil?
        fail ArgumentError, "Missing the required parameter 'pbx_phone_number' when calling ConversationApi.update_pbx_phone_number"
      end
      # resource path
      local_var_path = '/conversation/pbx/phone_number/{conversationPbxPhoneNumberUuid}'.sub('{' + 'conversationPbxPhoneNumberUuid' + '}', CGI.escape(conversation_pbx_phone_number_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pbx_phone_number)

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxPhoneNumberResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.update_pbx_phone_number",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#update_pbx_phone_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update pbx queue
    # Update a pbx queue 
    # @param conversation_pbx_queue_uuid [String] 
    # @param pbx_queue [ConversationPbxQueue] Pbx Queue
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxQueueResponse]
    def update_pbx_queue(conversation_pbx_queue_uuid, pbx_queue, opts = {})
      data, _status_code, _headers = update_pbx_queue_with_http_info(conversation_pbx_queue_uuid, pbx_queue, opts)
      data
    end

    # Update pbx queue
    # Update a pbx queue 
    # @param conversation_pbx_queue_uuid [String] 
    # @param pbx_queue [ConversationPbxQueue] Pbx Queue
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxQueueResponse, Integer, Hash)>] ConversationPbxQueueResponse data, response status code and response headers
    def update_pbx_queue_with_http_info(conversation_pbx_queue_uuid, pbx_queue, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.update_pbx_queue ...'
      end
      # verify the required parameter 'conversation_pbx_queue_uuid' is set
      if @api_client.config.client_side_validation && conversation_pbx_queue_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_pbx_queue_uuid' when calling ConversationApi.update_pbx_queue"
      end
      # verify the required parameter 'pbx_queue' is set
      if @api_client.config.client_side_validation && pbx_queue.nil?
        fail ArgumentError, "Missing the required parameter 'pbx_queue' when calling ConversationApi.update_pbx_queue"
      end
      # resource path
      local_var_path = '/conversation/pbx/queue/{conversationPbxQueueUuid}'.sub('{' + 'conversationPbxQueueUuid' + '}', CGI.escape(conversation_pbx_queue_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pbx_queue)

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxQueueResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.update_pbx_queue",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#update_pbx_queue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update pbx timeBased
    # Update a pbx timeBased 
    # @param conversation_pbx_time_based_uuid [String] 
    # @param pbx_time_based [ConversationPbxTimeBased] Pbx TimeBased
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxTimeBasedResponse]
    def update_pbx_time_based(conversation_pbx_time_based_uuid, pbx_time_based, opts = {})
      data, _status_code, _headers = update_pbx_time_based_with_http_info(conversation_pbx_time_based_uuid, pbx_time_based, opts)
      data
    end

    # Update pbx timeBased
    # Update a pbx timeBased 
    # @param conversation_pbx_time_based_uuid [String] 
    # @param pbx_time_based [ConversationPbxTimeBased] Pbx TimeBased
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxTimeBasedResponse, Integer, Hash)>] ConversationPbxTimeBasedResponse data, response status code and response headers
    def update_pbx_time_based_with_http_info(conversation_pbx_time_based_uuid, pbx_time_based, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.update_pbx_time_based ...'
      end
      # verify the required parameter 'conversation_pbx_time_based_uuid' is set
      if @api_client.config.client_side_validation && conversation_pbx_time_based_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_pbx_time_based_uuid' when calling ConversationApi.update_pbx_time_based"
      end
      # verify the required parameter 'pbx_time_based' is set
      if @api_client.config.client_side_validation && pbx_time_based.nil?
        fail ArgumentError, "Missing the required parameter 'pbx_time_based' when calling ConversationApi.update_pbx_time_based"
      end
      # resource path
      local_var_path = '/conversation/pbx/time_based/{conversationPbxTimeBasedUuid}'.sub('{' + 'conversationPbxTimeBasedUuid' + '}', CGI.escape(conversation_pbx_time_based_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pbx_time_based)

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxTimeBasedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.update_pbx_time_based",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#update_pbx_time_based\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update pbx timeRange
    # Update a pbx timeRange 
    # @param conversation_pbx_time_range_uuid [String] 
    # @param pbx_time_range [ConversationPbxTimeRange] Pbx TimeRange
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxTimeRangeResponse]
    def update_pbx_time_range(conversation_pbx_time_range_uuid, pbx_time_range, opts = {})
      data, _status_code, _headers = update_pbx_time_range_with_http_info(conversation_pbx_time_range_uuid, pbx_time_range, opts)
      data
    end

    # Update pbx timeRange
    # Update a pbx timeRange 
    # @param conversation_pbx_time_range_uuid [String] 
    # @param pbx_time_range [ConversationPbxTimeRange] Pbx TimeRange
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxTimeRangeResponse, Integer, Hash)>] ConversationPbxTimeRangeResponse data, response status code and response headers
    def update_pbx_time_range_with_http_info(conversation_pbx_time_range_uuid, pbx_time_range, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.update_pbx_time_range ...'
      end
      # verify the required parameter 'conversation_pbx_time_range_uuid' is set
      if @api_client.config.client_side_validation && conversation_pbx_time_range_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_pbx_time_range_uuid' when calling ConversationApi.update_pbx_time_range"
      end
      # verify the required parameter 'pbx_time_range' is set
      if @api_client.config.client_side_validation && pbx_time_range.nil?
        fail ArgumentError, "Missing the required parameter 'pbx_time_range' when calling ConversationApi.update_pbx_time_range"
      end
      # resource path
      local_var_path = '/conversation/pbx/time_range/{conversationPbxTimeRangeUuid}'.sub('{' + 'conversationPbxTimeRangeUuid' + '}', CGI.escape(conversation_pbx_time_range_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pbx_time_range)

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxTimeRangeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.update_pbx_time_range",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#update_pbx_time_range\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update pbx voicemailMailbox
    # Update a pbx voicemailMailbox 
    # @param conversation_pbx_voicemail_mailbox_uuid [String] 
    # @param pbx_voicemail_mailbox [ConversationPbxVoicemailMailbox] Pbx VoicemailMailbox
    # @param [Hash] opts the optional parameters
    # @return [ConversationPbxVoicemailMailboxResponse]
    def update_pbx_voicemail_mailbox(conversation_pbx_voicemail_mailbox_uuid, pbx_voicemail_mailbox, opts = {})
      data, _status_code, _headers = update_pbx_voicemail_mailbox_with_http_info(conversation_pbx_voicemail_mailbox_uuid, pbx_voicemail_mailbox, opts)
      data
    end

    # Update pbx voicemailMailbox
    # Update a pbx voicemailMailbox 
    # @param conversation_pbx_voicemail_mailbox_uuid [String] 
    # @param pbx_voicemail_mailbox [ConversationPbxVoicemailMailbox] Pbx VoicemailMailbox
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationPbxVoicemailMailboxResponse, Integer, Hash)>] ConversationPbxVoicemailMailboxResponse data, response status code and response headers
    def update_pbx_voicemail_mailbox_with_http_info(conversation_pbx_voicemail_mailbox_uuid, pbx_voicemail_mailbox, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationApi.update_pbx_voicemail_mailbox ...'
      end
      # verify the required parameter 'conversation_pbx_voicemail_mailbox_uuid' is set
      if @api_client.config.client_side_validation && conversation_pbx_voicemail_mailbox_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_pbx_voicemail_mailbox_uuid' when calling ConversationApi.update_pbx_voicemail_mailbox"
      end
      # verify the required parameter 'pbx_voicemail_mailbox' is set
      if @api_client.config.client_side_validation && pbx_voicemail_mailbox.nil?
        fail ArgumentError, "Missing the required parameter 'pbx_voicemail_mailbox' when calling ConversationApi.update_pbx_voicemail_mailbox"
      end
      # resource path
      local_var_path = '/conversation/pbx/voicemail_mailbox/{conversationPbxVoicemailMailboxUuid}'.sub('{' + 'conversationPbxVoicemailMailboxUuid' + '}', CGI.escape(conversation_pbx_voicemail_mailbox_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params['X-UltraCart-Api-Version'] = @api_client.select_header_api_version()
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pbx_voicemail_mailbox)

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationPbxVoicemailMailboxResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ultraCartOauth', 'ultraCartSimpleApiKey']

      new_options = opts.merge(
        :operation => :"ConversationApi.update_pbx_voicemail_mailbox",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationApi#update_pbx_voicemail_mailbox\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
