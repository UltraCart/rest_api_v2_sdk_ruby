=begin
#UltraCart Rest API V2

#UltraCart REST API Version 2

OpenAPI spec version: 2.0.0
Contact: support@ultracart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'spec_helper'
require 'json'

# Unit tests for UltraCartAdminV2::StorefrontApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'StorefrontApi' do
  before do
    # run before each test
    @instance = UltraCartAdminV2::StorefrontApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of StorefrontApi' do
    it 'should create an instact of StorefrontApi' do
      expect(@instance).to be_instance_of(UltraCartAdminV2::StorefrontApi)
    end
  end

  # unit tests for archive_email_list
  # Archive email list
  # 
  # @param storefront_oid null
  # @param email_list_uuid null
  # @param [Hash] opts the optional parameters
  # @return [EmailListArchiveResponse]
  describe 'archive_email_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for archive_email_segment
  # Archive email segment
  # 
  # @param storefront_oid null
  # @param email_segment_uuid null
  # @param [Hash] opts the optional parameters
  # @return [EmailSegmentArchiveResponse]
  describe 'archive_email_segment test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for check_download_email_segment
  # Check download of email segment
  # 
  # @param storefront_oid null
  # @param email_segment_uuid null
  # @param email_segment_rebuild_uuid null
  # @param [Hash] opts the optional parameters
  # @return [EmailSegmentDownloadPrepareResponse]
  describe 'check_download_email_segment test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for clone_email_campaign
  # Clone email campaign
  # 
  # @param storefront_oid null
  # @param email_campaign_uuid null
  # @param [Hash] opts the optional parameters
  # @return [EmailCampaignResponse]
  describe 'clone_email_campaign test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for clone_email_flow
  # Clone email flow
  # 
  # @param storefront_oid null
  # @param email_flow_uuid null
  # @param [Hash] opts the optional parameters
  # @return [EmailFlowResponse]
  describe 'clone_email_flow test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_email_sending_domain
  # Create email campaign
  # 
  # @param domain null
  # @param [Hash] opts the optional parameters
  # @return [EmailSendingDomainResponse]
  describe 'create_email_sending_domain test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_email_email
  # Delete email email
  # 
  # @param storefront_oid null
  # @param commseq_email_uuid null
  # @param [Hash] opts the optional parameters
  # @return [BaseResponse]
  describe 'delete_email_email test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_email_list_customer
  # Delete email list customer
  # 
  # @param storefront_oid null
  # @param email_list_uuid null
  # @param email_customer_uuid null
  # @param [Hash] opts the optional parameters
  # @return [BaseResponse]
  describe 'delete_email_list_customer test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_email_sending_domain
  # delete email campaign
  # 
  # @param domain null
  # @param [Hash] opts the optional parameters
  # @return [BaseResponse]
  describe 'delete_email_sending_domain test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_experiment
  # Delete experiment
  # 
  # @param storefront_oid null
  # @param storefront_experiment_oid null
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_experiment test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for geocode_address
  # Obtain lat/long for an address
  # 
  # @param storefront_oid null
  # @param geocode_request geocode request
  # @param [Hash] opts the optional parameters
  # @return [GeocodeResponse]
  describe 'geocode_address test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_countries
  # Get countries
  # Obtain a list of all the countries 
  # @param storefront_oid null
  # @param [Hash] opts the optional parameters
  # @return [CountriesResponse]
  describe 'get_countries test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_base_templates
  # Get email communication base templates
  # 
  # @param storefront_oid null
  # @param [Hash] opts the optional parameters
  # @return [EmailBaseTemplateListResponse]
  describe 'get_email_base_templates test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_campaign
  # Get email campaign
  # 
  # @param storefront_oid null
  # @param email_campaign_uuid null
  # @param [Hash] opts the optional parameters
  # @return [EmailCampaignResponse]
  describe 'get_email_campaign test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_campaigns
  # Get email campaigns
  # 
  # @param storefront_oid null
  # @param [Hash] opts the optional parameters
  # @return [EmailCampaignsResponse]
  describe 'get_email_campaigns test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_campaigns_with_stats
  # Get email campaigns with stats
  # 
  # @param storefront_oid null
  # @param stat_days null
  # @param [Hash] opts the optional parameters
  # @return [EmailCampaignsResponse]
  describe 'get_email_campaigns_with_stats test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_commseq
  # Get email commseq
  # 
  # @param storefront_oid null
  # @param commseq_uuid null
  # @param [Hash] opts the optional parameters
  # @return [EmailCommseqResponse]
  describe 'get_email_commseq test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_commseq_email_stats
  # Get email communication sequence emails stats
  # 
  # @param storefront_oid null
  # @param commseq_uuid null
  # @param stats_request StatsRequest
  # @param [Hash] opts the optional parameters
  # @return [EmailStatSummaryResponse]
  describe 'get_email_commseq_email_stats test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_commseq_stat_overall
  # Get communication sequence stats overall
  # 
  # @param storefront_oid null
  # @param commseq_uuid null
  # @param [Hash] opts the optional parameters
  # @return [EmailCommseqStatResponse]
  describe 'get_email_commseq_stat_overall test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_commseq_step_waiting
  # Get email communication sequence customers waiting at each requested step
  # 
  # @param storefront_oid null
  # @param commseq_uuid null
  # @param waiting_request WaitingRequest
  # @param [Hash] opts the optional parameters
  # @return [EmailStepWaitingResponse]
  describe 'get_email_commseq_step_waiting test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_commseqs
  # Get email commseqs
  # 
  # @param storefront_oid null
  # @param [Hash] opts the optional parameters
  # @return [EmailCommseqsResponse]
  describe 'get_email_commseqs test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_dashboard_activity
  # Get email dashboard activity
  # 
  # @param storefront_oid null
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :last_records null
  # @return [EmailDashboardActivityResponse]
  describe 'get_email_dashboard_activity test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_dashboard_stats
  # Get dashboard stats
  # 
  # @param storefront_oid null
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :days null
  # @return [EmailDashboardStatsResponse]
  describe 'get_email_dashboard_stats test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_email
  # Get email email
  # 
  # @param storefront_oid null
  # @param commseq_email_uuid null
  # @param [Hash] opts the optional parameters
  # @return [EmailCommseqEmailResponse]
  describe 'get_email_email test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_emails
  # Get email emails
  # 
  # @param storefront_oid null
  # @param [Hash] opts the optional parameters
  # @return [EmailCommseqEmailsResponse]
  describe 'get_email_emails test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_emails_multiple
  # Get email emails multiple
  # 
  # @param storefront_oid null
  # @param email_commseq_emails_request Request of email uuids
  # @param [Hash] opts the optional parameters
  # @return [EmailCommseqEmailsResponse]
  describe 'get_email_emails_multiple test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_flow
  # Get email flow
  # 
  # @param storefront_oid null
  # @param email_flow_uuid null
  # @param [Hash] opts the optional parameters
  # @return [EmailFlowResponse]
  describe 'get_email_flow test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_flows
  # Get email flows
  # 
  # @param storefront_oid null
  # @param [Hash] opts the optional parameters
  # @return [EmailFlowsResponse]
  describe 'get_email_flows test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_list
  # Get email list
  # 
  # @param storefront_oid null
  # @param email_list_uuid null
  # @param [Hash] opts the optional parameters
  # @return [EmailListResponse]
  describe 'get_email_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_list_customer_editor_url
  # Get email list customers
  # 
  # @param storefront_oid null
  # @param email_list_uuid null
  # @param email_customer_uuid null
  # @param [Hash] opts the optional parameters
  # @return [EmailCustomerEditorUrlResponse]
  describe 'get_email_list_customer_editor_url test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_list_customers
  # Get email list customers
  # 
  # @param storefront_oid null
  # @param email_list_uuid null
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_number null
  # @option opts [Integer] :page_size null
  # @return [EmailListCustomersResponse]
  describe 'get_email_list_customers test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_lists
  # Get email lists
  # 
  # @param storefront_oid null
  # @param [Hash] opts the optional parameters
  # @return [EmailListsResponse]
  describe 'get_email_lists test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_segment
  # Get email segment
  # 
  # @param storefront_oid null
  # @param email_segment_uuid null
  # @param [Hash] opts the optional parameters
  # @return [EmailSegmentResponse]
  describe 'get_email_segment test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_segment_customer_editor_url
  # Get email segment customers editor URL
  # 
  # @param storefront_oid null
  # @param email_segment_uuid null
  # @param email_customer_uuid null
  # @param [Hash] opts the optional parameters
  # @return [EmailCustomerEditorUrlResponse]
  describe 'get_email_segment_customer_editor_url test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_segment_customers
  # Get email segment customers
  # 
  # @param storefront_oid null
  # @param email_segment_uuid null
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_number null
  # @option opts [Integer] :page_size null
  # @return [EmailSegmentCustomersResponse]
  describe 'get_email_segment_customers test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_segments
  # Get email segments
  # 
  # @param storefront_oid null
  # @param [Hash] opts the optional parameters
  # @return [EmailSegmentsResponse]
  describe 'get_email_segments test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_sending_domain
  # Get email sending domain
  # 
  # @param domain null
  # @param [Hash] opts the optional parameters
  # @return [EmailSendingDomainResponse]
  describe 'get_email_sending_domain test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_sending_domain_status
  # Get email sending domain status
  # 
  # @param domain null
  # @param [Hash] opts the optional parameters
  # @return [EmailSendingDomainResponse]
  describe 'get_email_sending_domain_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_sending_domains
  # Get email sending domains
  # 
  # @param [Hash] opts the optional parameters
  # @return [EmailSendingDomainsResponse]
  describe 'get_email_sending_domains test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_template
  # Get email template
  # 
  # @param storefront_oid null
  # @param email_template_oid null
  # @param [Hash] opts the optional parameters
  # @return [EmailTemplate]
  describe 'get_email_template test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_templates
  # Get email templates
  # 
  # @param storefront_oid null
  # @param [Hash] opts the optional parameters
  # @option opts [String] :trigger_type null
  # @return [EmailTemplatesResponse]
  describe 'get_email_templates test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email_third_party_providers
  # Get a list of third party email providers
  # 
  # @param storefront_oid null
  # @param [Hash] opts the optional parameters
  # @return [EmailThirdPartyProvidersResponse]
  describe 'get_email_third_party_providers test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_experiments
  # Get experiments
  # 
  # @param storefront_oid null
  # @param [Hash] opts the optional parameters
  # @return [ExperimentsResponse]
  describe 'get_experiments test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_histogram_property_names
  # Get histogram property names
  # Obtain a list of property names for a given property type 
  # @param storefront_oid null
  # @param [Hash] opts the optional parameters
  # @option opts [String] :property_type null
  # @return [EmailHistogramPropertyNamesResponse]
  describe 'get_histogram_property_names test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_histogram_property_values
  # Get histogram property values
  # Obtain a list of property values for a given property name and type 
  # @param storefront_oid null
  # @param [Hash] opts the optional parameters
  # @option opts [String] :property_name null
  # @option opts [String] :property_type null
  # @option opts [Integer] :limit null
  # @return [EmailHistogramPropertyValuesResponse]
  describe 'get_histogram_property_values test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for import_email_third_party_provider_list
  # Import a third party provider list
  # 
  # @param storefront_oid null
  # @param import_request lists to import
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'import_email_third_party_provider_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for insert_email_campaign
  # Insert email campaign
  # 
  # @param storefront_oid null
  # @param email_campaign Email campaign
  # @param [Hash] opts the optional parameters
  # @return [EmailCampaignResponse]
  describe 'insert_email_campaign test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for insert_email_commseq
  # Insert email commseq
  # 
  # @param storefront_oid null
  # @param email_commseq Email commseq
  # @param [Hash] opts the optional parameters
  # @return [EmailCommseqResponse]
  describe 'insert_email_commseq test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for insert_email_email
  # Insert email email
  # 
  # @param storefront_oid null
  # @param email_commseq_email Email email
  # @param [Hash] opts the optional parameters
  # @return [EmailCommseqEmailResponse]
  describe 'insert_email_email test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for insert_email_flow
  # Insert email flow
  # 
  # @param storefront_oid null
  # @param email_flow Email flow
  # @param [Hash] opts the optional parameters
  # @return [EmailFlowResponse]
  describe 'insert_email_flow test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for insert_email_list
  # Insert email list
  # 
  # @param storefront_oid null
  # @param email_list Email list
  # @param [Hash] opts the optional parameters
  # @return [EmailListResponse]
  describe 'insert_email_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for insert_email_segment
  # Insert email segment
  # 
  # @param storefront_oid null
  # @param email_segment Email segment
  # @param [Hash] opts the optional parameters
  # @return [EmailSegmentResponse]
  describe 'insert_email_segment test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for prepare_download_email_segment
  # Prepare download of email segment
  # 
  # @param storefront_oid null
  # @param email_segment_uuid null
  # @param [Hash] opts the optional parameters
  # @return [EmailSegmentDownloadPrepareResponse]
  describe 'prepare_download_email_segment test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search
  # Searches for all matching values
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :category null
  # @option opts [String] :matches null
  # @option opts [Integer] :max_hits null
  # @return [LookupResponse]
  describe 'search test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_email_list_customers
  # Search email list customers
  # 
  # @param storefront_oid null
  # @param email_list_uuid null
  # @param [Hash] opts the optional parameters
  # @option opts [String] :starts_with null
  # @return [EmailListCustomersResponse]
  describe 'search_email_list_customers test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_email_segment_customers
  # Search email segment customers
  # 
  # @param storefront_oid null
  # @param email_segment_uuid null
  # @param [Hash] opts the optional parameters
  # @option opts [String] :starts_with null
  # @return [EmailSegmentCustomersResponse]
  describe 'search_email_segment_customers test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for start_email_campaign
  # Start email campaign
  # 
  # @param storefront_oid null
  # @param email_campaign_uuid null
  # @param [Hash] opts the optional parameters
  # @return [BaseResponse]
  describe 'start_email_campaign test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for subscribe_to_email_list
  # Subscribe customers to email list
  # 
  # @param storefront_oid null
  # @param email_list_uuid null
  # @param customers Customers
  # @param [Hash] opts the optional parameters
  # @return [EmailListSubscribeResponse]
  describe 'subscribe_to_email_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_email_campaign
  # Update email campaign
  # 
  # @param storefront_oid null
  # @param email_campaign_uuid null
  # @param email_campaign Email campaign
  # @param [Hash] opts the optional parameters
  # @return [EmailCampaignResponse]
  describe 'update_email_campaign test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_email_commseq
  # Update email commseq
  # 
  # @param storefront_oid null
  # @param commseq_uuid null
  # @param email_commseq Email commseq
  # @param [Hash] opts the optional parameters
  # @return [EmailCommseqResponse]
  describe 'update_email_commseq test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_email_email
  # Update email email
  # 
  # @param storefront_oid null
  # @param commseq_email_uuid null
  # @param email_commseq_email Email commseq email
  # @param [Hash] opts the optional parameters
  # @return [EmailCommseqEmailResponse]
  describe 'update_email_email test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_email_flow
  # Update email flow
  # 
  # @param storefront_oid null
  # @param email_flow_uuid null
  # @param email_flow Email flow
  # @param [Hash] opts the optional parameters
  # @return [EmailFlowResponse]
  describe 'update_email_flow test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_email_list
  # Update email list
  # 
  # @param storefront_oid null
  # @param email_list_uuid null
  # @param email_list Email list
  # @param [Hash] opts the optional parameters
  # @return [EmailListResponse]
  describe 'update_email_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_email_segment
  # Update email segment
  # 
  # @param storefront_oid null
  # @param email_segment_uuid null
  # @param email_segment Email segment
  # @param [Hash] opts the optional parameters
  # @return [EmailSegmentResponse]
  describe 'update_email_segment test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_experiment
  # Update experiment
  # 
  # @param storefront_oid null
  # @param storefront_experiment_oid null
  # @param experiment Experiment
  # @param [Hash] opts the optional parameters
  # @return [ExperimentResponse]
  describe 'update_experiment test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
